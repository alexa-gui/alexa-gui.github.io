const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":110,\"nextId\":110,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-51dc1b1e\",\"2\":\"v-51dc1b1e#_1-article-title\",\"3\":\"v-51dc1b1e#_2-code\",\"4\":\"v-51dc1b1e#_3-image\",\"5\":\"v-51dc1b1e#_4-ordered-and-unordered-headings-task-list\",\"6\":\"v-51dc1b1e#_5-information-box-tip-container\",\"7\":\"v-51dc1b1e#_6-links\",\"8\":\"v-51dc1b1e#_7-underline\",\"9\":\"v-51dc1b1e#_8-alignment\",\"10\":\"v-51dc1b1e#_9-formulas\",\"11\":\"v-51dc1b1e#_10-multimedia\",\"12\":\"v-51dc1b1e@0\",\"13\":\"v-51dc1b1e@1\",\"14\":\"v-0c806187\",\"15\":\"v-0c806187#session-1-–-introduction-dec-22nd\",\"16\":\"v-0c806187@0\",\"17\":\"v-0c806187@1\",\"18\":\"v-97fd02aa\",\"19\":\"v-97fd02aa#_1-understanding-variables-—-examples-from-life\",\"20\":\"v-97fd02aa#_1-1-literal-understanding\",\"21\":\"v-97fd02aa#_1-2-an-example-🌰\",\"22\":\"v-97fd02aa#_2-how-to-create-variables-—-assignment-statements\",\"23\":\"v-97fd02aa#_3-exploring-print\",\"24\":\"v-97fd02aa#_3-1-printing-multiple-data-at-once\",\"25\":\"v-97fd02aa#_3-2-modifying-the-separation-of-multiple-variables-printed-simultaneously\",\"26\":\"v-97fd02aa#_3-3-modifying-end-changes-the-output-ending-style\",\"27\":\"v-97fd02aa#_3-4-end-and-sep-can-be-used-simultaneously\",\"28\":\"v-97fd02aa#_4-advanced-assignment-methods\",\"29\":\"v-97fd02aa#_4-1-assigning-the-same-value-to-multiple-variables-simultaneously\",\"30\":\"v-97fd02aa#_4-2-assigning-different-values-to-multiple-variables-simultaneously\",\"31\":\"v-97fd02aa#_5-naming-rules-for-variables\",\"32\":\"v-97fd02aa#_6-exercises\",\"33\":\"v-97fd02aa@0\",\"34\":\"v-97fd02aa@1\",\"35\":\"v-0be6faf8\",\"36\":\"v-0be6faf8#data-types\",\"37\":\"v-0be6faf8#_1-numeric-types-int-float\",\"38\":\"v-0be6faf8#_1-1-code-examples\",\"39\":\"v-0be6faf8#_2-strings-str\",\"40\":\"v-0be6faf8#_2-1-code-example\",\"41\":\"v-0be6faf8#_2-2-three-characteristics-of-strings\",\"42\":\"v-0be6faf8#_3-lists-list\",\"43\":\"v-0be6faf8#_3-1-code-example\",\"44\":\"v-0be6faf8#_3-2-three-characteristics-of-lists\",\"45\":\"v-0be6faf8#_4-tuples-tuple\",\"46\":\"v-0be6faf8#_4-1-code-example\",\"47\":\"v-0be6faf8#_4-2-three-characteristics-of-tuples\",\"48\":\"v-0be6faf8#_4-3-tuple-vs-list\",\"49\":\"v-0be6faf8#_5-dictionary-dict\",\"50\":\"v-0be6faf8#_5-1-code-example\",\"51\":\"v-0be6faf8#_5-2-characteristics-of-a-dictionary\",\"52\":\"v-0be6faf8#_6-set-set\",\"53\":\"v-0be6faf8#_6-1-code-example\",\"54\":\"v-0be6faf8#_6-2-characteristics-of-a-set\",\"55\":\"v-0be6faf8#_7-boolean-bool\",\"56\":\"v-0be6faf8#_7-1-code-example\",\"57\":\"v-0be6faf8@0\",\"58\":\"v-0be6faf8@1\",\"59\":\"v-1dcd066f\",\"60\":\"v-1dcd066f#_1-characteristics-of-numeric-types\",\"61\":\"v-1dcd066f#_2-arithmetic-operators\",\"62\":\"v-1dcd066f#_3-a-little-practice-numeric-transformation\",\"63\":\"v-1dcd066f#_4-comparison-operators-comparing-the-values\",\"64\":\"v-1dcd066f#_5-assignment-operators\",\"65\":\"v-1dcd066f#_7-3-1-sum-and-difference-of-numbers\",\"66\":\"v-1dcd066f#_7-3-2-multiplication-and-division-of-numbers\",\"67\":\"v-1dcd066f#_7-3-3-remainder-and-power-operation\",\"68\":\"v-1dcd066f#_7-3-4-comparison-operations\",\"69\":\"v-1dcd066f@0\",\"70\":\"v-1dcd066f@1\",\"71\":\"v-6ea29539\",\"72\":\"v-6ea29539#_1-definition-of-strings\",\"73\":\"v-6ea29539#_2-creating-strings\",\"74\":\"v-6ea29539#_3-string-length\",\"75\":\"v-6ea29539#_4-getting-characters-from-a-string\",\"76\":\"v-6ea29539#_4-1-getting-a-single-character\",\"77\":\"v-6ea29539#_4-2-getting-a-range-of-characters\",\"78\":\"v-6ea29539#_4-3-getting-multiple-discontinuous-characters\",\"79\":\"v-6ea29539#_4-4-optimization\",\"80\":\"v-6ea29539#_4-5-string-reversal\",\"81\":\"v-6ea29539#_5-string-built-in-methods\",\"82\":\"v-6ea29539#_5-1-upper\",\"83\":\"v-6ea29539#_5-2-lower\",\"84\":\"v-6ea29539#_5-3-capitalize\",\"85\":\"v-6ea29539#_5-4-title\",\"86\":\"v-6ea29539#_5-5-startswith\",\"87\":\"v-6ea29539#_5-6-endswith\",\"88\":\"v-6ea29539#_5-7-count\",\"89\":\"v-6ea29539#_5-8-find\",\"90\":\"v-6ea29539#_5-9-index\",\"91\":\"v-6ea29539#_5-10-isdigit\",\"92\":\"v-6ea29539#_5-11-isalpha\",\"93\":\"v-6ea29539#_5-13-isupper\",\"94\":\"v-6ea29539#_5-14-islower\",\"95\":\"v-6ea29539#_5-15-isspace\",\"96\":\"v-6ea29539#_5-16-strip\",\"97\":\"v-6ea29539#_5-17-lstrip\",\"98\":\"v-6ea29539#_5-18-rstrip\",\"99\":\"v-6ea29539#_5-19-replace\",\"100\":\"v-6ea29539#_5-20-split\",\"101\":\"v-6ea29539#_5-21-rsplit\",\"102\":\"v-6ea29539#_5-22-join\",\"103\":\"v-6ea29539#_6-string-formatting\",\"104\":\"v-6ea29539@0\",\"105\":\"v-6ea29539@1\",\"106\":\"v-12140137\",\"107\":\"v-71f414cc\",\"108\":\"v-fc67f334\",\"109\":\"v-3389deea\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,16],\"1\":[2,78],\"2\":[3],\"3\":[2],\"4\":[2],\"5\":[7],\"6\":[5],\"7\":[2],\"8\":[2],\"9\":[2],\"10\":[2],\"11\":[2],\"12\":[null,null,2],\"13\":[null,null,2],\"14\":[4],\"15\":[6],\"16\":[null,null,1],\"17\":[null,null,2],\"18\":[1],\"19\":[6],\"20\":[3,6],\"21\":[5,107],\"22\":[7,80],\"23\":[3],\"24\":[7,39],\"25\":[10,12],\"26\":[8],\"27\":[9,14],\"28\":[4],\"29\":[10,8],\"30\":[9,10],\"31\":[5,83],\"32\":[2,155],\"33\":[null,null,1],\"34\":[null,null,2],\"35\":[2],\"36\":[2,2],\"37\":[6],\"38\":[3,21],\"39\":[4],\"40\":[4,18],\"41\":[5,56],\"42\":[4],\"43\":[4,26],\"44\":[6,60],\"45\":[4],\"46\":[4,26],\"47\":[6,52],\"48\":[5,168],\"49\":[4],\"50\":[4,26],\"51\":[6,61],\"52\":[4],\"53\":[4,22],\"54\":[6,110],\"55\":[4],\"56\":[4,11],\"57\":[null,null,1],\"58\":[null,null,2],\"59\":[2],\"60\":[5,37],\"61\":[3,36],\"62\":[6,82],\"63\":[6,41],\"64\":[3,34],\"65\":[9,37],\"66\":[8,35],\"67\":[6,54],\"68\":[5,45],\"69\":[null,null,1],\"70\":[null,null,2],\"71\":[1],\"72\":[4,14],\"73\":[3,124],\"74\":[3,24],\"75\":[6],\"76\":[6,16],\"77\":[7,36],\"78\":[6,36],\"79\":[2,29],\"80\":[4,78],\"81\":[5],\"82\":[4,13],\"83\":[4,13],\"84\":[4,13],\"85\":[4,22],\"86\":[3,23],\"87\":[4,26],\"88\":[4,28],\"89\":[4,36],\"90\":[4,35],\"91\":[4,23],\"92\":[4,45],\"93\":[4,19],\"94\":[4,19],\"95\":[4,21],\"96\":[4,39],\"97\":[4,20],\"98\":[4,20],\"99\":[4,32],\"100\":[4,47],\"101\":[4,41],\"102\":[4,28],\"103\":[3,87],\"104\":[null,null,1],\"105\":[null,null,2],\"106\":[2],\"107\":[1],\"108\":[2],\"109\":[1]},\"averageFieldLength\":[4.232408696060987,43.464603582119146,0.5625344464796913],\"storedFields\":{\"0\":{\"h\":\"Intro Page\",\"t\":[\"Student of Cambridge University, Engineering\",\"“Hinc lucem et pocula sacra.”\",\"From here the journey starts.\"]},\"1\":{\"h\":\"Typora guide\",\"t\":[\"Do not use Chinese characters for file names.\",\"Use hyphens instead of spaces.\",\"Start the first line of the article with three dashes ---.\",\"Headings should be formatted with two or three hash symbols followed by a space. Headings range from level 2 to level 6, excluding the article title.\",\"Begin and end an extended section with three colons ::: and md-demo.\",\"Use triple backticks with the language identifier to input code:\",\"print(\\\"hello bornforthis\\\") \",\"To insert an image, copy-paste it, and it will automatically generate a folder named assets.\",\"Create links using the format [link name](link).\"]},\"2\":{\"h\":\"1. Article Title\"},\"3\":{\"h\":\"2. Code\"},\"4\":{\"h\":\"3. Image\"},\"5\":{\"h\":\"4. Ordered and Unordered Headings, Task List\"},\"6\":{\"h\":\"5. Information Box/Tip Container\"},\"7\":{\"h\":\"6. Links\"},\"8\":{\"h\":\"7. Underline\"},\"9\":{\"h\":\"8. Alignment\"},\"10\":{\"h\":\"9. Formulas\"},\"11\":{\"h\":\"10. Multimedia\"},\"12\":{\"c\":[\"Web design\"]},\"13\":{\"c\":[\"web\",\"typora\"]},\"14\":{\"h\":\"CUEA mentoring session 1\"},\"15\":{\"h\":\"Session 1 – Introduction (Dec. 22nd)\"},\"16\":{\"c\":[\"Python\"]},\"17\":{\"c\":[\"web\",\"typora\"]},\"18\":{\"h\":\"Variables\"},\"19\":{\"h\":\"1. Understanding Variables — Examples from Life\"},\"20\":{\"h\":\"1.1 Literal Understanding\",\"t\":[\"变 (Biàn): Change\",\"量 (Liàng): Size\"]},\"21\":{\"h\":\"1.2 An Example 🌰\",\"t\":[\"Imagine you are the class monitor and you need to track the monthly exam scores of each student in the class. Each month, there's a sheet of paper with scores listed for each student, such as:\",\"Li Lei 98 points\",\"Ma Dongmei 89 points\",\"Liu Yitong 96 points\",\"......\",\"One day, the teacher asks to see Liu Yitong's scores for January, February, and March. As the class monitor, what do you do? — You can't just give the teacher all the monthly exam sheets; that would be inappropriate.\",\"You should copy Liu Yitong's scores for January, February, and March onto a separate sheet of paper and then give it to the teacher.\",\"So, why not initially assign an envelope (or a file) for each student? The envelope starts flat, and when we put things (data) into it, does it not expand? — Does it not change? Does it not have size? Clearly, it does.\",\"So, an envelope is like a variable that allocates space in the computer's memory to store data.\",\"Characteristics: The value of a variable can be overwritten, remembering only the last value.\"]},\"22\":{\"h\":\"2. How to Create Variables — Assignment Statements\",\"t\":[\"Variable: Represents or references a value using a variable name.\",\"Nuwa molded a clay figurine, which had no life. Then Nuwa waved a willow branch, giving life to the clay figurine. Now, the clay figurine represents Nuwa's descendant. \\\"Variable: clay figurine, Value: Nuwa.\\\"\",\"Members of the National People's Congress are elected by the masses through voting. They represent the will of the vast majority of the people. So, they can say, \\\"I represent the will of the masses.\\\" \\\"Variable: NPC representative, Value: the people.\\\"\",\"Initializing Assignment Statement: Variable Name = Expression\",\"Variable Name: This is the space; we call it by a name.\",\"Expression: Similar to a mathematical expression.\",\"Program logic: From top to bottom, from right to left, and finally, assignment.\"]},\"23\":{\"h\":\"3. Exploring print\"},\"24\":{\"h\":\"3.1 Printing Multiple Data at Once\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c) # ---output--- 1 2 3 \",\"From the output, it can be seen that print outputs multiple variables simultaneously, with each value separated by a default space.\",\"Now, can we modify this default space? — The answer is obviously yes.\",\"Use sep.\"]},\"25\":{\"h\":\"3.2 Modifying the Separation of Multiple Variables Printed Simultaneously\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c, sep=' interval ') # ---output--- 1 interval 2 interval 3 \"]},\"26\":{\"h\":\"3.3 Modifying end Changes the Output Ending Style\"},\"27\":{\"h\":\"3.4 end and sep Can Be Used Simultaneously\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep=\\\"~\\\", end=\\\" love Python\\\") # ---output--- 1~1~1 love Python \"]},\"28\":{\"h\":\"4. Advanced Assignment Methods\"},\"29\":{\"h\":\"4.1 Assigning the Same Value to Multiple Variables Simultaneously\",\"t\":[\"a = b = c = 1 print(a, b, c) # ---output--- 1 1 1 \"]},\"30\":{\"h\":\"4.2 Assigning Different Values to Multiple Variables Simultaneously\",\"t\":[\"a, b, c = 1, 2, 3 print(a, b, c) # ---output--- 1 2 3 \"]},\"31\":{\"h\":\"5. Naming Rules for Variables\",\"t\":[\"A combination of uppercase and lowercase English letters, numbers, and _, and cannot start with a number.\",\"System keywords cannot be used as variable names. \\\"Get keyword list: help('keywords')\",\"Variable names are case-sensitive in Python.\",\"Variable names cannot contain spaces, but underscores can be used to separate words.\",\"Avoid using Python's built-in function names as variables.\",\"Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not \"]},\"32\":{\"h\":\"6. Exercises\",\"t\":[\"In Python, variable names can start with a number.\",\"[ ] True\",\"[x] False\",\"In Python, which of the following variable names is valid?\",\"[ ] 2myVar\",\"[x] myVar2\",\"[ ] my-var\",\"[ ] my var\",\"In Python, variable names are case-sensitive.\",\"[x] True\",\"[ ] False\",\"In Python, my_var and myVar represent the same variable.\",\"[ ] True\",\"[x] False\",\"Variable names can be Python keywords.\",\"[ ] True\",\"[x] False\",\"None is a special type in Python, representing no value or an empty value.\",\"[x] True\",\"[ ] False\",\"Which of the following is a valid variable assignment in Python?\",\"[ ] 123abc = \\\"hello\\\"\",\"[ ] for = \\\"world\\\"\",\"[x] _hidden = \\\"secret\\\"\",\"[ ] import = 123\",\"In Python, a variable can be assigned multiple values simultaneously.\",\"[ ] True\",\"[x] False\",\"Which of the following is a multi-variable assignment in Python?\",\"[x] a, b, c = 1, 2, 3\",\"[ ] a = 1, b = 2, c = 3\",\"[ ] a; b; c = 1; 2; 3\",\"[ ] a = 1; b = 2; c = 3;\",\"A variable must be assigned before using it.\",\"[x] True\",\"[ ] False\",\"In Python, the type of a variable is static and cannot be changed once assigned.\",\"[ ] True\",\"[x] False\",\"Which represents a global variable in Python?\",\"[ ] var = \\\"hello\\\"\",\"[ ] global var ✅\",\"[x] var(global) ❌\",\"[ ] def var():\",\"Which represents deleting a variable in Python?\",\"[ ] delete x\",\"[ ] del x ✅\",\"[x] remove x ❌\",\"[ ] destroy x\",\"After x = 5, changing the value of y will also change the value of x.\",\"[ ] True\",\"[x] False\",\"After x = [1, 2, 3], changing the content of y will also change the content of x.\",\"[ ] True ✅\",\"[x] False ❌\",\"In Python, variables can only store values of basic data types, such as integers or strings.\",\"[ ] True\",\"[x] False\",\"Juice Exchange\",\"Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don't like to use each other's cups.\",\"There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother's cup with cola and the younger brother's cup with juice.\",\"Question: How do you swap the juice in the brothers' cups?\",\"en\",\"Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don't like to use each other's cups. There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother's cup with cola and the younger brother's cup with juice. How can you swap the juice in the brothers' cups?\",\"！！！\",\"Don’t use the following methods！！！\",\"Austin = \\\"Coke\\\" Jaden = \\\"juice\\\" print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) # 待补充代码 print(\\\"Austin\\\", Jaden) print(\\\"Jaden\\\", Austin) \",\"Create variables\",\"Output：\",\"Austin Jaden Alex Cava \",\"Output：\",\"Austin$Jaden$Alex$Cava% \"]},\"33\":{\"c\":[\"Python\"]},\"34\":{\"c\":[\"web\",\"typora\"]},\"35\":{\"h\":\"Data Types\"},\"36\":{\"h\":\"Data Types\",\"t\":[\"image-20231222204535588\"]},\"37\":{\"h\":\"1. Numeric Types [int, float]\"},\"38\":{\"h\":\"1.1 Code Examples\",\"t\":[\"Integer\",\"int_num = 1 t = type(int_num) # check data type print(int_num) print(\\\"int num type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output 1 int num type is:>>> <class 'int'> Directly check data type and print:>>> <class 'int'> \",\"Float\",\"float_num = 1.5 t = type(float_num) # check data type print(float_num) print(\\\"float num type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output 1.5 float num type is:>>> <class 'float'> Directly check data type and print:>>> <class 'float'> \"]},\"39\":{\"h\":\"2. Strings [str]\"},\"40\":{\"h\":\"2.1 Code Example\",\"t\":[\"string = \\\"Hello Alexa\\\" t = type(string) print(string) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output Hello Alexa string type is:>>> <class 'str'> Directly check data type and print:>>> <class 'str'> \"]},\"41\":{\"h\":\"2.2 Three Characteristics of Strings\",\"t\":[\"Orderliness \",\"From left to right, index starts from 0\",\"From right to left, index starts from -1\",\"Anything inside quotes is considered an index\",\"Immutability \",\"Strings cannot be changed after creation\",\"Note: Immutability means that during the execution of the code, strings cannot be modified, added, or deleted\",\"Any Character \",\"Any character that can be entered from the keyboard can be an element of a string\",\"Characters placed in a string become the type of the string, with each element referred to as a \\\"subcharacter\\\"\"]},\"42\":{\"h\":\"3. Lists [list]\"},\"43\":{\"h\":\"3.1 Code Example\",\"t\":[\"lst = [\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False] t = type(lst) print(lst) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output ['Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False] string type is:>>> <class 'list'> Directly check data type and print:>>> <class 'list'> \"]},\"44\":{\"h\":\"3.2 Three Characteristics of Lists\",\"t\":[\"Orderliness \",\"From left to right, index starts from 0\",\"From right to left, index starts from -1\",\"Each element in the list is counted \",\"For example: lst = [\\\"alexa\\\", 12]\",\"In the above list, there are two elements with indices: \",\"\\\"alexa\\\", from left to right 0, from right to left -1\",\"12, from left to right 1, from right to left -1\",\"Mutability: During the program's execution, lists can be \\\"added, changed, deleted\\\"\",\"Any Data Type: Any data type in Python can be an element of a list\",\"All Data Types Owned by Python \\\"Only Include Basic Data Types\\\"\",\"image-20231222204547540\"]},\"45\":{\"h\":\"4. Tuples [tuple]\"},\"46\":{\"h\":\"4.1 Code Example\",\"t\":[\"tup = (\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False) t = type(tup) print(tup) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output ('Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False) string type is:>>> <class 'tuple'> Directly check data type and print:>>> <class 'tuple'> \"]},\"47\":{\"h\":\"4.2 Three Characteristics of Tuples\",\"t\":[\"Orderliness \",\"From left to right, index starts from 0\",\"From right to left, index starts from -1\",\"Each element in the tuple is counted \",\"For example: tup = (“alexa”, 12)\",\"In the above tuple, there are two elements with indices: \",\"“alexa”, from left to right 0, from right to left -1\",\"12, from left to right 1, from right to left -1\",\"Immutability: During the program's execution, tuples cannot be \\\"added, changed, deleted\\\"\",\"Any Data Type: Any data type in Python can be an element of a tuple\"]},\"48\":{\"h\":\"4.3 Tuple vs List\",\"t\":[\"Why Choose a Tuple After Having a List?\",\"If the stored data or quantity is variable, such as a log function on a social platform that tracks which posts a user has viewed in a week, then a list is more suitable.\",\"If the stored data and quantity are constant, such as a system (software) that needs to return the latitude and longitude of a location and directly pass it to the user for viewing, then a tuple is definitely more suitable.\",\"Assumption\",\"Assumption 1: Now there is a warehouse, and you want to add items to the warehouse. The warehouse is large, and there may or may not be space available. In this case, do we need to hire a warehouse manager so that we can directly ask the warehouse manager if there is space (is there space/ memory)? The warehouse manager will tell you, and you can directly add your items. \",\"The question is, why does the warehouse manager know if there is space in the warehouse? — Because the warehouse manager will track the status of the warehouse all the time.\",\"Assumption\",\"2: Now there is a warehouse for atomic bombs. After the warehouse is created, only one atomic bomb can be stored. So, do we need to set up a special person to track the status of the atomic bomb warehouse? — No need, it is redundant. (Otherwise, the leader will run out of oil hahaha)\",\"Why?\",\"User logs 📔, will it always change (record 📝 which posts have been viewed)? Do we need a \\\"person\\\" similar to a warehouse manager to track and know if there is space (if there is space/ memory), and also know where to add it? — A list is more appropriate because lists are mutable. \\\"Mutable means: adding, deleting, modifying\\\" \",\"Why is a tuple not suitable? — Because every time you need to add data, you have to create a new tuple. (It's like: you create a warehouse for atomic bombs, it is just enough to store one, so when you want to store two, you can only create a new warehouse again.)\",\"Will the latitude and longitude change? Obviously not, so there is no need for an extra \\\"person\\\" to track the status. — Can a list be used? Yes, but it is unnecessary. \\\"Because we don't need a warehouse manager.\\\" Using a list is a bit wasteful of resources. The functionality of the tuple is just enough.\"]},\"49\":{\"h\":\"5. Dictionary [dict]\"},\"50\":{\"h\":\"5.1 Code Example\",\"t\":[\"d = {\\\"name\\\": \\\"alexa\\\", \\\"age\\\": 18, 1: \\\"int\\\", 1.1: 1, \\\"tup\\\": (1, 2, 3)} t = type(d) print(d) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output {'name': 'alexa', 'age': 18, 1: 'int', 1.1: 1, 'tup': (1, 2, 3)} string type is:>>> <class 'dict'> Directly check data type and print:>>> <class 'dict'> \"]},\"51\":{\"h\":\"5.2 Characteristics of a Dictionary\",\"t\":[\"Unordered (after Python 3.6+, it is ordered) \",\"Understand as unordered for now\",\"Some early basics may not be needed\",\"Composition of a Dictionary: Composed of a series of keys and values d = {\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\",\"Key: \",\"Only immutable data types can be used as keys\",\"For example: strings, numbers, booleans, tuples\",\"Value: Any data type, all data types owned by Python\",\"Mutability: Can add, delete, and change values corresponding to keys\"]},\"52\":{\"h\":\"6. Set [set]\"},\"53\":{\"h\":\"6.1 Code Example\",\"t\":[\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} t = type(set1) print(set1) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} string type is:>>> <class 'set'> Directly check data type and print:>>> <class 'set'> \"]},\"54\":{\"h\":\"6.2 Characteristics of a Set\",\"t\":[\"Unordered: Sets have no order, meaning there is no index\",\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} print(set1) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} \",\"The order may change after running, and it might not be the same as the input order\",\"Warning\",\"If you run the set many times or one of the times, the order does not change, we still cannot say that the set is ordered. Why? You throw a die 500 times, and it is always 6. Can you say that throwing a die is a deterministic event? — Obviously not 🙅.\",\"Determinism: \",\"Every value in a set is determined, meaning \\\"immutable data types\\\" are needed\",\"For example: boolean, number, tuple, string\",\"For example: Why doesn't a list work? — Lists are mutable and have indeterminacy\",\"Uniqueness: Repeating values will not cause an error, and duplicates will be automatically removed\",\"set2 = {1, 1, 1, 2, 2, 3} print(set2) # output {1, 2, 3} \",\"Mutability: You can add and delete data in a set, but you cannot modify the output. \\\"Note: It is impossible to specify the index to delete an element\\\"\"]},\"55\":{\"h\":\"7. Boolean [bool]\"},\"56\":{\"h\":\"7.1 Code Example\",\"t\":[\"condition = True # False print(condition) print(type(condition)) # output True <class 'bool'> \"]},\"57\":{\"c\":[\"Python\"]},\"58\":{\"c\":[\"web\",\"typora\"]},\"59\":{\"h\":\"Numeric Type\"},\"60\":{\"h\":\"1. Characteristics of Numeric Types\",\"t\":[\"image-20231222232833034\",\"In [2]: 1+1 Out[2]: 2 In [3]: 1+1.0 Out[3]: 2.0 In [4]: 9-1 Out[4]: 8 In [5]: 9-1.0 Out[5]: 8.0 In [6]: 2*2 Out[6]: 4 In [7]: 2*2.0 Out[7]: 4.0 In [8]: 9/3 Out[8]: 3.0 In [9]: # If one of the numbers is float, the result will be float (highest priority) In [10]: # Division involves precision issues, so the result is a float \",\"Patterns\",\"If one of the numbers is a float, the result will be a float (highest priority).\",\"Division involves precision issues, so the result type is a float.\"]},\"61\":{\"h\":\"2. Arithmetic Operators\",\"t\":[\"Arithmetic Operators: Used for arithmetic calculations.\",\"Operator\",\"Description\",\"Example\",\"+\",\"Addition operator\",\"1 + 1 = 2\",\"-\",\"Subtraction operator\",\"2 - 1 = 1\",\"*\",\"Multiplication operator\",\"2 * 3 = 6\",\"/\",\"Division operator\",\"9 / 3 = 3.0\",\"**\",\"Exponentiation operator\",\"2 ** 3 = 8\",\"%\",\"Modulus operator, calculates remainder\",\"9 % 2 = 1\",\"//\",\"Floor division operator, calculates quotient and removes decimal part\",\"9 // 2 = 4\",\"Note: 9 / 2 = 4......1\"]},\"62\":{\"h\":\"3. A Little Practice: Numeric Transformation\",\"t\":[\"Suppose you have a two-digit integer, and you need to generate two new numbers based on the following rules:\",\"The first new number is the sum of the individual digits of the original number.\",\"The second new number is the reversal of the original number (e.g., if the original number is 21, the reversed number is 12).\",\"Write Python code to implement the above requirements.\",\"a = 12 a0 = a // 10 a1 = a % 10 b = a0 + a1 c = 10 * a1 + a0 print(b, c) # output 3 21 \",\"Input:\",\"An integer num (10 ≤ num ≤ 99)\",\"Output:\",\"Two integers or an error message string.\",\"Example:\",\"Suppose the input number num is 91, then your code should output two numbers: 10 (sum of 9 and 1) and 19 (reversed form of 91).\",\"Suppose the input number num is 26, then your code should output two numbers: 8 (sum of 2 and 6) and 62 (reversed form of 26).\",\"Suppose the input number num is 18, then your code should output two numbers: 9 (sum of 1 and 8) and 81 (reversed form of 18).\"]},\"63\":{\"h\":\"4. Comparison Operators: Comparing the Values\",\"t\":[\"Operator\",\"Description\",\"Example\",\">\",\"Checks if the first operand is greater than the second\",\"print(1 > 2)\",\"<\",\"Checks if the first operand is less than the second\",\"print(1 < 2)\",\">=\",\"Checks if the first operand is greater than or equal to the second\",\"print(3 >= 3)\",\"<=\",\"Checks if the first operand is less than or equal to the second\",\"print(3 <= 4)\",\"==\",\"Checks if the two operands are equal\",\"print(2 == 2)\",\"!=\",\"Checks if the two operands are not equal\",\"print(2 != 1)\",\"Try the examples above and see the results?\",\"print(1 > 2) print(1 < 2) print(3 >= 3) print(3 <= 4) print(2 == 2) print(2 != 1) # output False True True True True True \"]},\"64\":{\"h\":\"5. Assignment Operators\",\"t\":[\"Operator\",\"Description\",\"Example\",\"=\",\"Assigns the value on the right to the variable on the left\",\"a = 1\",\"+=\",\"a += b is equivalent to a = a + b\",\"a += 10\",\"-=\",\"a -= b is equivalent to `a\",\"= a - b |a -= 10 | |*= |a *= bis equivalent toa = a * b |a *= 10 | |/= |a /= bis equivalent toa = a / b |a /= 10 | |**= |a **= bis equivalent toa = a ** b |a **= 10 | |//= |a //= bis equivalent toa = a // b |a //= 10` |\",\"a = 1 a += 10 a -= 10 a *= 10 a /= 10 a **= 10 a //= 10 print(a) # output 0.0 # Division results in a float \"]},\"65\":{\"h\":\"7.3.1 Sum and Difference of Numbers:\",\"t\":[\"Write a Python code snippet that creates two numbers a and b, calculates and prints their sum and the result of subtracting a from b.\",\"Code Template\",\"a = 10 b = 5 Sum = a + b Difference = a - b print(Sum, Difference) # Test assert Sum == a + b assert Difference == a - b \",\"Output Example:\",\"Sum: 8 Difference: 2 \"]},\"66\":{\"h\":\"7.3.2 Multiplication and Division of Numbers\",\"t\":[\"Write a Python code snippet that creates two numbers x and y, calculates and prints their product and division result.\",\"Code Template\",\"x = 10 y = 5 product = x * y division = x / y print(product, division) # Test assert product == x * y assert division == x / y \",\"Output Example:\",\"Product: 12 Division: 3.0 \"]},\"67\":{\"h\":\"7.3.3 Remainder and Power Operation\",\"t\":[\"Write a Python code snippet that creates two numbers m and n, calculates and prints the remainder of m divided by n and m raised to the power of n.\",\"Code Template\",\"m = 10 n = 5 floor_div = m // n power = m ** n print(floor_div, power) # Test assert remainder == m % n assert power == m ** n \",\"**Output Example:\",\"Sure, here's the translation of the provided text into English in Markdown format:\",\"**Code Exercise: Comparisons** ```python Remainder: 1 Power: 81 \"]},\"68\":{\"h\":\"7.3.4 Comparison Operations\",\"t\":[\"Write a Python code snippet that takes two numbers p and q as input, compares their sizes, and prints the corresponding result (greater than, less than, equal to).\",\"Code Template\",\"p = 10 q = 5 if p > q: print(p, \\\" is greater than \\\", q) elif p < q: print(p, \\\" is less than \\\", q) else: print(p, \\\" is equal to \\\", q) if ______: print(f\\\"{p} is greater than {q}\\\") assert p > q elif ______: print(f\\\"{p} is less than {q}\\\") assert p < q else: print(f\\\"{p} is equal to {q}\\\") assert p == q \",\"Output Example:\",\"4 is less than 5 \"]},\"69\":{\"c\":[\"Python\"]},\"70\":{\"c\":[\"web\",\"typora\"]},\"71\":{\"h\":\"Strings\"},\"72\":{\"h\":\"1. Definition of Strings\",\"t\":[\"A string is a sequence composed of letters, numbers, and special characters.\",\"image-20231222232933858\"]},\"73\":{\"h\":\"2. Creating Strings\",\"t\":[\"— Using single quotes, double quotes, or triple quotes.\",\"name = \\\"alexa\\\" number = '18' paragraph = '''Hello, I'm Alexa ''' para = \\\"\\\"\\\"Hello Alexa \\\"\\\"\\\" \",\"Mixing single and double quotes, so you may need to accept different types of quotes, otherwise, you cannot fully encapsulate the string content.\",\"string = 'I'm Alexa # wrong string = \\\"I'm Alexa\\\" # correct \",\"What about triple quotes?\",\"Let's say we need to store the following text in Python code:\",\"We sometimes need to not only look at the answers within the options but also think about the answers outside the options. — AI Yuechuang Shallow ones see shallow, deep ones see deep. — Huang Jiabao The earliest risers are idealists, the fastest runners are scammers, and the bravest are adventurers who are afraid of missing everything and rushing in are leeks. And the real success, may not have entered yet. Implement the function first, then optimize, otherwise, everything will be chaotic. — AI Yuechuang Anything you can't write clearly is something you haven't really understood. \",\"How do we implement this in Python code as a string?\",\"Triple quotes can also be used for comments\",\"image-20231222233001673\"]},\"74\":{\"h\":\"3. String Length\",\"t\":[\"Use len(): Returns the length or number of characters in the string, starting from one, including spaces.\",\"para = \\\"Hello, alexa\\\" print(len(para)) # Output 12 \"]},\"75\":{\"h\":\"4. Getting Characters from a String\"},\"76\":{\"h\":\"4.1 Getting a Single Character\",\"t\":[\"para = \\\"Hello, alexa\\\" print(para[2]) # Selecting the 3rd character print(para[0]) # Selecting the 1st character print(para[-1]) # Selecting the last character print(para[len(para)-1]) # Selecting the last character \"]},\"77\":{\"h\":\"4.2 Getting a Range of Characters\",\"t\":[\"Use slicing interval (left-closed right-open) string[start: end]\",\"\\\"\\\"\\\"Syntax: string = \\\"bornforthis\\\" select = string[start: end] PS: Remember to +1 for end\\\"\\\"\\\" para = \\\"Hello, alexa\\\" print(para[2:6]) # Selecting the 3rd to the 6th character (not including the 7th) # Output llo, \"]},\"78\":{\"h\":\"4.3 Getting Multiple Discontinuous Characters\",\"t\":[\"Use slicing interval string[start: end: sep]\",\"\\\"\\\"\\\" Syntax: string = \\\"0123456789\\\" select = string[start: end: sep] *sep= how many steps to the next number* PS: Remember to +1 for end \\\"\\\"\\\" string = \\\"0123456789\\\" # Get characters 02468 select = string[0: len(string): 2] print(select) # Get characters 13579 select = string[1: len(string): 2] print(select) string = \\\"bornforthis\\\" # Get characters ofts select = string[1: len(string): 3] print(select) \"]},\"79\":{\"h\":\"4.4 Optimization\",\"t\":[\"If we want to extract characters from the beginning to the end, we can omit the start and/or end, leaving them blank.\",\"string = \\\"0123456789\\\" # Get characters 02468 select = string[:: 2] print(select) # Get characters 13579 select = string[1:: 2] print(select) \"]},\"80\":{\"h\":\"4.5 String Reversal\",\"t\":[\"The third position of the string controls the direction of character extraction. The default is 1 for positive, and if we change it to -1, it will be reversed.\",\"Warning\",\"Positive and negative control direction, number size controls step size.\",\"string = \\\"bornforthis\\\" select = string[:: -1] print(select) # Output sihtrofnrob \",\"What does the ellipsis omit?\",\"select = string[0:11: -1] print(select) # Output No result \",\"If you use a positive index, starting from 0, going to -1 has no value, not satisfied.\",\"image-20231222233023698\",\"If you directly use a positive index to swap positions, the last one is 0, and it will be omitted:\",\"select = string[len(string):0: -1] print(select) # Output sihtrofnro # Missing \\\"b\\\" \",\"So it should be reversed from -1 to the last one:\",\"image-20231222233037523\",\"select = string[-1:-1*len(string)-1: -1] print(select) \",\"# Get rofn select = string[-5:-9: -1] print(select) \"]},\"81\":{\"h\":\"5. String Built-in Methods\"},\"82\":{\"h\":\"5.1 .upper()\",\"t\":[\"Converts the entire string to uppercase.\",\"string = \\\"bornforthis\\\" print(string.upper()) # Output BORNFORTHIS \"]},\"83\":{\"h\":\"5.2 .lower()\",\"t\":[\"Converts the entire string to lowercase.\",\"string = \\\"BORNFORTHIS\\\" print(string.lower()) # Output bornforthis \"]},\"84\":{\"h\":\"5.3 .capitalize()\",\"t\":[\"Capitalizes the first letter of the string.\",\"string = \\\"BORNFORTHIS\\\" print(string.capitalize()) # Output Bornforthis \"]},\"85\":{\"h\":\"5.4 .title()\",\"t\":[\"Capitalizes the first letter of each word, creating a title format.\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.title()) # Output Bornforthis To-Aiyc \"]},\"86\":{\"h\":\"5.5 .startswith()\",\"t\":[\"Checks if the string starts with a specific content, returns True or False.\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"b\\\")) # Output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"BO\\\")) # Output True \"]},\"87\":{\"h\":\"5.6 .endswith()\",\"t\":[\"Checks if the string ends with a specific character or word, returns a boolean value.\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"BO\\\")) # Output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"yc\\\")) # Output True \"]},\"88\":{\"h\":\"5.7 .count()\",\"t\":[\"Counts the number of times a specific character or word appears in the target string.\",\"string = \\\"BORNFORTHIS to-aiyc bornforthis\\\" print(string.count(\\\"i\\\")) # Output 2 # Case-sensitive string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.count(\\\"for\\\")) # Output 2 \"]},\"89\":{\"h\":\"5.8 .find()\",\"t\":[\"Finds the index of the first occurrence of a specific character or word in the string. If searching for a word, find() returns the index of the first character of the target word. If the character or word is not found, it returns -1.\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"for\\\")) # Output 12 # Returns the index of the first occurrence string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"R\\\")) # Output 2 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"k\\\")) # Output -1 \"]},\"90\":{\"h\":\"5.9 .index()\",\"t\":[\"Finds the index of the first occurrence of a specific character or word in the string. If searching for a word, index() returns the index of the first character of the target word. If the character or word is not found, it raises an error.\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.index(\\\"k\\\")) # Output ValueError: substring not found \"]},\"91\":{\"h\":\"5.10 .isdigit()\",\"t\":[\"Checks if the string is a pure numeric string. Returns False if any character in the string is not a number.\",\"string = \\\"01234567\\\" print(string.isdigit()) # Output True string = \\\"01234567o\\\" print(string.isdigit()) # Output False \"]},\"92\":{\"h\":\"5.11 .isalpha()\",\"t\":[\"Checks if the string is a pure alphabetical string. Returns False if any character in the string is not a letter.\",\"string = \\\"abcdefg\\\" print(string.isalpha()) # Output True string = \\\"abcdefg0\\\" print(string.isalpha()) # Output False \",\"Sure, here is the translation of the provided Markdown content to English:\",\"## 5.12 .isalnum() Checks whether the string consists of alphanumeric characters only. Returns False if the string contains any non-alphanumeric elements. ```python string = \\\"abcdefg0\\\" print(string.isalnum()) # output True string = \\\"abcdefg0!\\\" print(string.isalnum()) # output False \"]},\"93\":{\"h\":\"5.13 .isupper()\",\"t\":[\"Checks if all the letters in the string are uppercase. Returns True if all uppercase, otherwise False.\",\"string = \\\"abcdefg0!\\\" print(string.isupper()) # output False \"]},\"94\":{\"h\":\"5.14 .islower()\",\"t\":[\"Checks if all the letters in the string are lowercase. Returns True if all lowercase, otherwise False.\",\"string = \\\"abcdefg0!\\\" print(string.islower()) # output True \"]},\"95\":{\"h\":\"5.15 .isspace()\",\"t\":[\"Checks if the string consists of only whitespace characters. Returns True for pure whitespace, otherwise False.\",\"string = \\\"abcdefg0!\\\" print(string.isspace()) # output False string = \\\" \\\" print(string.isspace()) # output True \"]},\"96\":{\"h\":\"5.16 .strip()\",\"t\":[\"By default, removes leading and trailing whitespace characters from the target string. If specified, it can also remove specified characters.\",\"string = \\\" bornforthis \\\" print(string.strip()) # Removes leading and trailing spaces # output bornforthis string = \\\"---bornforthis---\\\" print(string.strip(\\\"-\\\")) # Removes leading and trailing hyphens # output bornforthis string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"-\\\")) # Removes consecutive hyphens only from both ends until a different character is encountered # output -bornforthis-- string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"- \\\")) # Removes all hyphens and spaces from both ends simultaneously # output bornforthis \"]},\"97\":{\"h\":\"5.17 .lstrip()\",\"t\":[\"By default, removes leading whitespace characters from the string. If specified, it can remove specified leading characters.\",\"string = \\\"-- -bornforthis-- -\\\" print(string.lstrip(\\\"- \\\")) # output bornforthis-- - \"]},\"98\":{\"h\":\"5.18 .rstrip()\",\"t\":[\"By default, removes trailing whitespace characters from the string. If specified, it can remove specified trailing characters.\",\"string = \\\"-- -bornforthis-- -\\\" print(string.rstrip(\\\"- \\\")) # output -- -bornforthis \"]},\"99\":{\"h\":\"5.19 .replace()\",\"t\":[\".replace(old, new, count) replaces occurrences of the \\\"old\\\" character with the \\\"new\\\" character. The count parameter controls the number of replacements.\",\"string = \\\"-- -bornforthis-- -\\\" string1 = string.replace(\\\" \\\",\\\"*\\\") # Replaces all spaces with * string2 = string.replace(\\\"-\\\", \\\"!\\\", 3) # Replaces the first three hyphens with ! print(string, string1, string2, sep=\\\"\\\\n\\\") # output -- -bornforthis-- - --**-bornforthis--*- !! !bornforthis-- - \"]},\"100\":{\"h\":\"5.20 .split()\",\"t\":[\".split(sep, maxsplit) splits the string using a specific character, default is space. If the \\\"sep\\\" parameter is provided, it splits using that character and returns a list. The maxsplit parameter controls how many splits to perform, default is to split from the left.\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.split() lst2 = string.split(\\\"o\\\") lst3 = string.split(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am b', 'rnf', 'rthis b', 'rnforthis'] \"]},\"101\":{\"h\":\"5.21 .rsplit()\",\"t\":[\".rsplit(sep, maxsplit) splits the string from the right, using a specific character if provided. Returns a list. The maxsplit parameter controls how many splits to perform.\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.rsplit() lst2 = string.rsplit(\\\"o\\\") lst3 = string.rsplit(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am bornf', 'rthis b', 'rnf', 'rthis'] \"]},\"102\":{\"h\":\"5.22 .join()\",\"t\":[\"Joins the characters of a string with a specific separator. “sep”.join(string)\",\"string = \\\"i am bornforthis \\\" string_joined = \\\"-\\\".join(string) print(string_joined) # output i- -a-m- -b-o-r-n-f-o-r-t-h-i-s- \"]},\"103\":{\"h\":\"6. String Formatting\",\"t\":[\"Issue:\",\"string = \\\"Hi Bornforthis,Welcome to XiaMen.\\\" print(string) # ---output--- Hi Bornforthis,Welcome to XiaMen. \",\"The problem is that each time we want to change a name or location, we need to create a new string.\",\"Using string concatenation may be cumbersome, especially for more complex strings.\",\"Another issue is that different data types cannot be directly concatenated in Python, unless explicitly converted to strings:\",\"string = \\\"Money is \\\" + 190 print(string) # ---output--- Traceback (most recent call last): File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py\\\", line 1, in <module> string = \\\"Money is \\\" + 190 TypeError: can only concatenate str (not \\\"int\\\") to str string = \\\"Money is \\\" + str(190) print(string) # ---output--- Money is 190 \",\"To address these issues, the format method is introduced.\"]},\"104\":{\"c\":[\"Python\"]},\"105\":{\"c\":[\"web\",\"typora\"]},\"106\":{\"h\":\"Engineering Mentoring\"},\"107\":{\"h\":\"Python\"},\"108\":{\"h\":\"Engineering Mentoring\"},\"109\":{\"h\":\"Python\"}},\"dirtCount\":0,\"index\":[[\"q\",{\"1\":{\"68\":13}}],[\"quotient\",{\"1\":{\"61\":1}}],[\"quotes\",{\"1\":{\"41\":1,\"73\":7}}],[\"quantity\",{\"1\":{\"48\":2}}],[\"question\",{\"1\":{\"32\":1,\"48\":1}}],[\"```python\",{\"1\":{\"67\":1,\"92\":1}}],[\"`a\",{\"1\":{\"64\":1}}],[\"|\",{\"1\":{\"64\":9}}],[\"|a\",{\"1\":{\"64\":9}}],[\"<module>\",{\"1\":{\"103\":1}}],[\"<=\",{\"1\":{\"63\":3}}],[\"<\",{\"1\":{\"63\":3,\"68\":2}}],[\"<class\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"56\":1}}],[\"≤\",{\"1\":{\"62\":2}}],[\"+1\",{\"1\":{\"77\":1,\"78\":1}}],[\"+=\",{\"1\":{\"64\":4}}],[\"+\",{\"1\":{\"61\":2,\"62\":2,\"64\":1,\"65\":2,\"103\":3}}],[\"🙅\",{\"1\":{\"54\":1}}],[\"📝\",{\"1\":{\"48\":1}}],[\"📔\",{\"1\":{\"48\":1}}],[\"k\",{\"1\":{\"89\":1,\"90\":1}}],[\"know\",{\"1\":{\"48\":3}}],[\"key\",{\"1\":{\"51\":1}}],[\"key2\",{\"1\":{\"51\":1}}],[\"key1\",{\"1\":{\"51\":1}}],[\"keys\",{\"1\":{\"51\":3}}],[\"keyboard\",{\"1\":{\"41\":1}}],[\"keyword\",{\"1\":{\"31\":2}}],[\"keywords\",{\"1\":{\"31\":3,\"32\":1}}],[\"01234567o\",{\"1\":{\"91\":1}}],[\"01234567\",{\"1\":{\"91\":1}}],[\"0123456789\",{\"1\":{\"78\":2,\"79\":1}}],[\"02468\",{\"1\":{\"78\":1,\"79\":1}}],[\"0\",{\"1\":{\"41\":1,\"44\":2,\"47\":2,\"60\":7,\"61\":1,\"64\":2,\"66\":1,\"76\":1,\"78\":1,\"80\":4}}],[\">=\",{\"1\":{\"63\":3}}],[\">\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"56\":1,\"63\":3,\"68\":2}}],[\">>>\",{\"1\":{\"38\":8,\"40\":4,\"43\":4,\"46\":4,\"50\":4,\"53\":4}}],[\"待补充代码\",{\"1\":{\"32\":1}}],[\"❌\",{\"1\":{\"32\":3}}],[\"✅\",{\"1\":{\"32\":3}}],[\"xiamen\",{\"1\":{\"103\":2}}],[\"x\",{\"1\":{\"32\":24,\"43\":2,\"46\":2,\"66\":6}}],[\"~\",{\"1\":{\"27\":1}}],[\"==\",{\"1\":{\"63\":3,\"65\":2,\"66\":2,\"67\":2,\"68\":1}}],[\"=\",{\"1\":{\"22\":1,\"24\":3,\"25\":3,\"27\":3,\"29\":3,\"30\":1,\"32\":17,\"38\":4,\"40\":2,\"43\":2,\"44\":1,\"46\":2,\"47\":1,\"50\":2,\"51\":1,\"53\":2,\"54\":2,\"56\":1,\"61\":8,\"62\":5,\"63\":3,\"64\":29,\"65\":4,\"66\":4,\"67\":4,\"68\":2,\"73\":6,\"74\":1,\"76\":1,\"77\":3,\"78\":7,\"79\":3,\"80\":6,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"91\":2,\"92\":4,\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":1,\"98\":1,\"99\":3,\"100\":4,\"101\":4,\"102\":2,\"103\":4}}],[\"viewing\",{\"1\":{\"48\":1}}],[\"viewed\",{\"1\":{\"48\":2}}],[\"vs\",{\"0\":{\"48\":1}}],[\"voting\",{\"1\":{\"22\":1}}],[\"var\",{\"1\":{\"32\":7}}],[\"variable\",{\"1\":{\"21\":2,\"22\":6,\"31\":3,\"32\":12,\"48\":1,\"64\":1}}],[\"variables\",{\"0\":{\"18\":1,\"19\":1,\"22\":1,\"25\":1,\"29\":1,\"30\":1,\"31\":1},\"1\":{\"24\":1,\"31\":1,\"32\":2}}],[\"valid\",{\"1\":{\"32\":2}}],[\"valueerror\",{\"1\":{\"90\":1}}],[\"value2\",{\"1\":{\"51\":1}}],[\"value1\",{\"1\":{\"51\":1}}],[\"values\",{\"0\":{\"30\":1,\"63\":1},\"1\":{\"32\":2,\"51\":2,\"54\":1}}],[\"value\",{\"0\":{\"29\":1},\"1\":{\"21\":2,\"22\":3,\"24\":1,\"32\":4,\"51\":1,\"54\":1,\"64\":1,\"80\":1,\"87\":1}}],[\"vast\",{\"1\":{\"22\":1}}],[\"rsplit\",{\"0\":{\"101\":1},\"1\":{\"101\":4}}],[\"rstrip\",{\"0\":{\"98\":1},\"1\":{\"98\":1}}],[\"rthis\",{\"1\":{\"100\":3,\"101\":4}}],[\"rnforthis\",{\"1\":{\"100\":1}}],[\"rnf\",{\"1\":{\"100\":3,\"101\":3}}],[\"r\",{\"1\":{\"89\":1,\"102\":2}}],[\"rofn\",{\"1\":{\"80\":1}}],[\"risers\",{\"1\":{\"73\":1}}],[\"right\",{\"1\":{\"22\":1,\"41\":2,\"44\":6,\"47\":6,\"64\":1,\"77\":1,\"101\":1}}],[\"rushing\",{\"1\":{\"73\":1}}],[\"runners\",{\"1\":{\"73\":1}}],[\"running\",{\"1\":{\"54\":1}}],[\"run\",{\"1\":{\"48\":1,\"54\":1}}],[\"rules\",{\"0\":{\"31\":1},\"1\":{\"62\":1}}],[\"raises\",{\"1\":{\"90\":1}}],[\"raised\",{\"1\":{\"67\":1}}],[\"raise\",{\"1\":{\"31\":1}}],[\"range\",{\"0\":{\"77\":1},\"1\":{\"1\":1}}],[\"recent\",{\"1\":{\"103\":1}}],[\"record\",{\"1\":{\"48\":1}}],[\"really\",{\"1\":{\"73\":1}}],[\"real\",{\"1\":{\"73\":1}}],[\"requirements\",{\"1\":{\"62\":1}}],[\"reversed\",{\"1\":{\"62\":4,\"80\":2}}],[\"reversal\",{\"0\":{\"80\":1},\"1\":{\"62\":1}}],[\"results\",{\"1\":{\"63\":1,\"64\":1}}],[\"result\",{\"1\":{\"60\":4,\"65\":1,\"66\":1,\"68\":1,\"80\":1}}],[\"resources\",{\"1\":{\"48\":1}}],[\"replacements\",{\"1\":{\"99\":1}}],[\"replaces\",{\"1\":{\"99\":3}}],[\"replace\",{\"0\":{\"99\":1},\"1\":{\"99\":3}}],[\"repeating\",{\"1\":{\"54\":1}}],[\"representing\",{\"1\":{\"32\":1}}],[\"representative\",{\"1\":{\"22\":1}}],[\"represent\",{\"1\":{\"22\":2,\"32\":1}}],[\"represents\",{\"1\":{\"22\":2,\"32\":2}}],[\"redundant\",{\"1\":{\"48\":1}}],[\"referred\",{\"1\":{\"41\":1}}],[\"references\",{\"1\":{\"22\":1}}],[\"remember\",{\"1\":{\"77\":1,\"78\":1}}],[\"remembering\",{\"1\":{\"21\":1}}],[\"remainder\",{\"0\":{\"67\":1},\"1\":{\"61\":1,\"67\":3}}],[\"removes\",{\"1\":{\"61\":1,\"96\":5,\"97\":1,\"98\":1}}],[\"removed\",{\"1\":{\"54\":1}}],[\"remove\",{\"1\":{\"32\":1,\"96\":1,\"97\":1,\"98\":1}}],[\"returns\",{\"1\":{\"74\":1,\"86\":1,\"87\":1,\"89\":3,\"90\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":1,\"95\":1,\"100\":1,\"101\":1}}],[\"return\",{\"1\":{\"31\":1,\"48\":1}}],[\"joined\",{\"1\":{\"102\":2}}],[\"joins\",{\"1\":{\"102\":1}}],[\"join\",{\"0\":{\"102\":1},\"1\":{\"102\":2}}],[\"journey\",{\"1\":{\"0\":1}}],[\"jiabao\",{\"1\":{\"73\":1}}],[\"jaden\",{\"1\":{\"32\":10}}],[\"january\",{\"1\":{\"21\":2}}],[\"juice\",{\"1\":{\"32\":10}}],[\"just\",{\"1\":{\"21\":1,\"48\":2}}],[\"yc\",{\"1\":{\"87\":1}}],[\"yewente\",{\"1\":{\"103\":1}}],[\"yet\",{\"1\":{\"73\":1}}],[\"yes\",{\"1\":{\"24\":1,\"48\":1}}],[\"yuechuang\",{\"1\":{\"73\":2}}],[\"y\",{\"1\":{\"32\":2,\"66\":6}}],[\"yield\",{\"1\":{\"31\":1}}],[\"yitong\",{\"1\":{\"21\":3}}],[\"your\",{\"1\":{\"48\":1,\"62\":3}}],[\"younger\",{\"1\":{\"32\":4}}],[\"you\",{\"1\":{\"21\":5,\"32\":6,\"48\":8,\"54\":5,\"62\":2,\"73\":4,\"80\":2}}],[\"🌰\",{\"0\":{\"21\":1}}],[\"量\",{\"1\":{\"20\":1}}],[\"变\",{\"1\":{\"20\":1}}],[\"wrong\",{\"1\":{\"73\":1}}],[\"write\",{\"1\":{\"62\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"73\":1}}],[\"warning\",{\"1\":{\"54\":1,\"80\":1}}],[\"warehouse\",{\"1\":{\"48\":17}}],[\"wasteful\",{\"1\":{\"48\":1}}],[\"want\",{\"1\":{\"48\":2,\"79\":1,\"103\":1}}],[\"wants\",{\"1\":{\"32\":4}}],[\"waved\",{\"1\":{\"22\":1}}],[\"word\",{\"1\":{\"85\":1,\"87\":1,\"88\":1,\"89\":4,\"90\":4}}],[\"words\",{\"1\":{\"31\":1}}],[\"work\",{\"1\":{\"54\":1}}],[\"world\",{\"1\":{\"32\":1}}],[\"would\",{\"1\":{\"21\":1}}],[\"welcome\",{\"1\":{\"103\":2}}],[\"week\",{\"1\":{\"48\":1}}],[\"we\",{\"1\":{\"21\":1,\"22\":1,\"24\":1,\"48\":5,\"54\":1,\"73\":3,\"79\":2,\"80\":1,\"103\":2}}],[\"web\",{\"2\":{\"12\":1,\"13\":1,\"17\":1,\"34\":1,\"58\":1,\"70\":1,\"105\":1}}],[\"who\",{\"1\":{\"73\":1}}],[\"whether\",{\"1\":{\"92\":1}}],[\"where\",{\"1\":{\"48\":1}}],[\"when\",{\"1\":{\"21\":1,\"48\":1}}],[\"whitespace\",{\"1\":{\"95\":2,\"96\":1,\"97\":1,\"98\":1}}],[\"while\",{\"1\":{\"31\":1}}],[\"which\",{\"1\":{\"22\":1,\"32\":5,\"48\":2}}],[\"why\",{\"1\":{\"21\":1,\"48\":4,\"54\":2}}],[\"what\",{\"1\":{\"21\":1,\"73\":1,\"80\":1}}],[\"willow\",{\"1\":{\"22\":1}}],[\"will\",{\"1\":{\"1\":1,\"22\":2,\"32\":2,\"48\":5,\"54\":2,\"60\":2,\"73\":1,\"80\":2}}],[\"within\",{\"1\":{\"73\":1}}],[\"with\",{\"1\":{\"1\":4,\"21\":1,\"24\":1,\"31\":2,\"32\":5,\"41\":1,\"44\":1,\"47\":1,\"86\":1,\"87\":1,\"99\":3,\"102\":1}}],[\"missing\",{\"1\":{\"73\":1,\"80\":1}}],[\"mixing\",{\"1\":{\"73\":1}}],[\"might\",{\"1\":{\"54\":1}}],[\"m\",{\"1\":{\"67\":8,\"73\":3,\"102\":1}}],[\"mutable\",{\"1\":{\"48\":2,\"54\":1}}],[\"mutability\",{\"1\":{\"44\":1,\"51\":1,\"54\":1}}],[\"must\",{\"1\":{\"32\":1}}],[\"multiplication\",{\"0\":{\"66\":1},\"1\":{\"61\":1}}],[\"multiple\",{\"0\":{\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"78\":1},\"1\":{\"24\":1,\"32\":1}}],[\"multi\",{\"1\":{\"32\":1}}],[\"multimedia\",{\"0\":{\"11\":1}}],[\"myvar\",{\"1\":{\"32\":1}}],[\"myvar2\",{\"1\":{\"32\":1}}],[\"my\",{\"1\":{\"32\":3}}],[\"most\",{\"1\":{\"103\":1}}],[\"modulus\",{\"1\":{\"61\":1}}],[\"modified\",{\"1\":{\"41\":1}}],[\"modifying\",{\"0\":{\"25\":1,\"26\":1},\"1\":{\"48\":1}}],[\"modify\",{\"1\":{\"24\":1,\"54\":1}}],[\"more\",{\"1\":{\"31\":1,\"48\":3,\"103\":1}}],[\"molded\",{\"1\":{\"22\":1}}],[\"money\",{\"1\":{\"103\":4}}],[\"month\",{\"1\":{\"21\":1}}],[\"monthly\",{\"1\":{\"21\":2}}],[\"monitor\",{\"1\":{\"21\":2}}],[\"method\",{\"1\":{\"103\":1}}],[\"methods\",{\"0\":{\"28\":1,\"81\":1},\"1\":{\"32\":1}}],[\"message\",{\"1\":{\"62\":1}}],[\"meaning\",{\"1\":{\"54\":2}}],[\"means\",{\"1\":{\"41\":1,\"48\":1}}],[\"members\",{\"1\":{\"22\":1}}],[\"memory\",{\"1\":{\"21\":1,\"48\":2}}],[\"mentoring\",{\"0\":{\"14\":1,\"106\":1,\"108\":1}}],[\"maxsplit\",{\"1\":{\"100\":2,\"101\":2}}],[\"markdown\",{\"1\":{\"67\":1,\"92\":1}}],[\"march\",{\"1\":{\"21\":2}}],[\"many\",{\"1\":{\"54\":1,\"78\":1,\"100\":1,\"101\":1}}],[\"manager\",{\"1\":{\"48\":7}}],[\"may\",{\"1\":{\"48\":2,\"51\":1,\"54\":1,\"73\":2,\"103\":1}}],[\"mathematical\",{\"1\":{\"22\":1}}],[\"majority\",{\"1\":{\"22\":1}}],[\"masses\",{\"1\":{\"22\":2}}],[\"ma\",{\"1\":{\"21\":1}}],[\"md\",{\"1\":{\"1\":1}}],[\"91\",{\"1\":{\"62\":2}}],[\"99\",{\"1\":{\"62\":1}}],[\"96\",{\"1\":{\"21\":1}}],[\"98\",{\"1\":{\"21\":1}}],[\"9\",{\"0\":{\"10\":1,\"90\":1},\"1\":{\"60\":4,\"61\":4,\"62\":2,\"80\":1}}],[\"81\",{\"1\":{\"62\":1,\"67\":1}}],[\"89\",{\"1\":{\"21\":1}}],[\"8\",{\"0\":{\"9\":1,\"89\":1},\"1\":{\"60\":4,\"61\":1,\"62\":2,\"65\":1}}],[\"7th\",{\"1\":{\"77\":1}}],[\"7\",{\"0\":{\"8\":1,\"55\":1,\"56\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"88\":1},\"1\":{\"60\":2}}],[\"500\",{\"1\":{\"54\":1}}],[\"5\",{\"0\":{\"6\":1,\"31\":1,\"49\":1,\"50\":1,\"51\":1,\"64\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1},\"1\":{\"32\":1,\"38\":2,\"60\":2,\"65\":1,\"66\":1,\"67\":1,\"68\":2,\"80\":1,\"92\":1}}],[\"40\",{\"1\":{\"103\":1}}],[\"4\",{\"0\":{\"5\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"63\":1,\"68\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"80\":1,\"85\":1},\"1\":{\"60\":4,\"61\":2,\"63\":2,\"68\":1}}],[\"3rd\",{\"1\":{\"76\":1,\"77\":1}}],[\"3\",{\"0\":{\"4\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"42\":1,\"43\":1,\"44\":1,\"48\":1,\"62\":1,\"65\":1,\"66\":1,\"67\":2,\"68\":1,\"74\":1,\"78\":1,\"84\":1},\"1\":{\"24\":2,\"25\":2,\"30\":2,\"32\":5,\"50\":2,\"51\":1,\"53\":2,\"54\":4,\"60\":4,\"61\":4,\"62\":1,\"63\":6,\"66\":1,\"78\":1,\"99\":1,\"100\":1,\"101\":1}}],[\"17\",{\"0\":{\"97\":1}}],[\"16\",{\"0\":{\"96\":1}}],[\"15\",{\"0\":{\"95\":1}}],[\"14\",{\"0\":{\"94\":1}}],[\"13\",{\"0\":{\"93\":1}}],[\"13579\",{\"1\":{\"78\":1,\"79\":1}}],[\"11\",{\"0\":{\"92\":1},\"1\":{\"80\":1}}],[\"1st\",{\"1\":{\"76\":1}}],[\"190\",{\"1\":{\"103\":4}}],[\"19\",{\"0\":{\"99\":1},\"1\":{\"62\":1}}],[\"1+1\",{\"1\":{\"60\":2}}],[\"18\",{\"0\":{\"98\":1},\"1\":{\"50\":2,\"62\":2,\"73\":1}}],[\"12\",{\"1\":{\"44\":2,\"47\":2,\"62\":2,\"66\":1,\"74\":1,\"89\":1,\"92\":1}}],[\"123\",{\"1\":{\"32\":1}}],[\"123abc\",{\"1\":{\"32\":1}}],[\"1~1~1\",{\"1\":{\"27\":1}}],[\"10`\",{\"1\":{\"64\":1}}],[\"10\",{\"0\":{\"11\":1,\"91\":1},\"1\":{\"60\":1,\"62\":5,\"64\":11,\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"1\",{\"0\":{\"2\":1,\"14\":1,\"15\":1,\"19\":1,\"20\":2,\"21\":1,\"24\":1,\"29\":1,\"37\":1,\"38\":2,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"56\":1,\"60\":1,\"65\":1,\"72\":1,\"76\":1,\"82\":1},\"1\":{\"24\":2,\"25\":2,\"27\":3,\"29\":4,\"30\":2,\"32\":5,\"38\":4,\"41\":1,\"43\":8,\"44\":4,\"46\":8,\"47\":4,\"48\":1,\"50\":10,\"53\":8,\"54\":12,\"60\":2,\"61\":6,\"62\":2,\"63\":6,\"64\":2,\"67\":1,\"76\":2,\"78\":2,\"79\":1,\"80\":12,\"89\":2,\"103\":1}}],[\"github\",{\"1\":{\"103\":1}}],[\"giving\",{\"1\":{\"22\":1}}],[\"give\",{\"1\":{\"21\":2}}],[\"going\",{\"1\":{\"80\":1}}],[\"greater\",{\"1\":{\"63\":2,\"68\":3}}],[\"g\",{\"1\":{\"62\":1}}],[\"global\",{\"1\":{\"31\":1,\"32\":3}}],[\"getting\",{\"0\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1}}],[\"get\",{\"1\":{\"31\":2,\"78\":3,\"79\":2,\"80\":1}}],[\"generate\",{\"1\":{\"1\":1,\"62\":1}}],[\"guide\",{\"0\":{\"1\":1}}],[\"idealists\",{\"1\":{\"73\":1}}],[\"identifier\",{\"1\":{\"1\":1}}],[\"imac\",{\"1\":{\"103\":1}}],[\"imagine\",{\"1\":{\"21\":1}}],[\"image\",{\"0\":{\"4\":1},\"1\":{\"1\":1,\"36\":1,\"44\":1,\"60\":1,\"72\":1,\"73\":1,\"80\":2}}],[\"implement\",{\"1\":{\"62\":1,\"73\":2}}],[\"impossible\",{\"1\":{\"54\":1}}],[\"import\",{\"1\":{\"31\":1,\"32\":1}}],[\"immutable\",{\"1\":{\"51\":1,\"54\":1}}],[\"immutability\",{\"1\":{\"41\":2,\"47\":1}}],[\"if\",{\"1\":{\"31\":1,\"48\":6,\"54\":1,\"60\":2,\"62\":1,\"63\":6,\"68\":2,\"79\":1,\"80\":3,\"86\":1,\"87\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":2,\"94\":2,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":1,\"101\":1}}],[\"i\",{\"1\":{\"22\":1,\"73\":3,\"88\":1,\"100\":5,\"101\":5,\"102\":3}}],[\"issue\",{\"1\":{\"103\":2}}],[\"issues\",{\"1\":{\"60\":2,\"103\":1}}],[\"isspace\",{\"0\":{\"95\":1},\"1\":{\"95\":2}}],[\"islower\",{\"0\":{\"94\":1},\"1\":{\"94\":1}}],[\"isupper\",{\"0\":{\"93\":1},\"1\":{\"93\":1}}],[\"isalnum\",{\"1\":{\"92\":3}}],[\"isalpha\",{\"0\":{\"92\":1},\"1\":{\"92\":2}}],[\"isdigit\",{\"0\":{\"91\":1},\"1\":{\"91\":2}}],[\"is\",{\"1\":{\"21\":1,\"22\":1,\"24\":1,\"31\":2,\"32\":11,\"38\":4,\"40\":2,\"41\":1,\"43\":2,\"44\":1,\"46\":2,\"47\":1,\"48\":21,\"50\":2,\"51\":1,\"53\":2,\"54\":6,\"60\":4,\"62\":7,\"63\":4,\"64\":2,\"68\":7,\"72\":1,\"73\":1,\"80\":2,\"89\":1,\"90\":1,\"91\":2,\"92\":3,\"96\":1,\"100\":3,\"103\":7}}],[\"items\",{\"1\":{\"48\":2}}],[\"it\",{\"1\":{\"1\":2,\"21\":6,\"22\":1,\"24\":1,\"32\":1,\"48\":7,\"51\":1,\"54\":3,\"80\":4,\"89\":1,\"90\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":1}}],[\"including\",{\"1\":{\"74\":1,\"77\":1}}],[\"include\",{\"1\":{\"44\":1}}],[\"involves\",{\"1\":{\"60\":2}}],[\"individual\",{\"1\":{\"62\":1}}],[\"indices\",{\"1\":{\"44\":1,\"47\":1}}],[\"indeterminacy\",{\"1\":{\"54\":1}}],[\"index\",{\"0\":{\"90\":1},\"1\":{\"41\":3,\"44\":2,\"47\":2,\"54\":2,\"80\":2,\"89\":3,\"90\":4}}],[\"initializing\",{\"1\":{\"22\":1}}],[\"initially\",{\"1\":{\"21\":1}}],[\"int\",{\"0\":{\"37\":1},\"1\":{\"38\":7,\"50\":2,\"103\":1}}],[\"integer\",{\"1\":{\"38\":1,\"62\":2}}],[\"integers\",{\"1\":{\"32\":1,\"62\":1}}],[\"interval\",{\"1\":{\"25\":3,\"77\":1,\"78\":1}}],[\"into\",{\"1\":{\"21\":1,\"67\":1}}],[\"introduced\",{\"1\":{\"103\":1}}],[\"introduction\",{\"0\":{\"15\":1}}],[\"intro\",{\"0\":{\"0\":1}}],[\"inappropriate\",{\"1\":{\"21\":1}}],[\"in\",{\"0\":{\"81\":1},\"1\":{\"21\":2,\"31\":3,\"32\":14,\"41\":1,\"44\":3,\"47\":3,\"48\":3,\"54\":2,\"60\":9,\"64\":1,\"67\":1,\"73\":3,\"74\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"103\":2}}],[\"information\",{\"0\":{\"6\":1}}],[\"inside\",{\"1\":{\"41\":1}}],[\"insert\",{\"1\":{\"1\":1}}],[\"instead\",{\"1\":{\"1\":1}}],[\"input\",{\"1\":{\"1\":1,\"54\":1,\"62\":4,\"68\":1}}],[\"6th\",{\"1\":{\"77\":1}}],[\"62\",{\"1\":{\"62\":1}}],[\"6+\",{\"1\":{\"51\":1}}],[\"6\",{\"0\":{\"7\":1,\"32\":1,\"52\":1,\"53\":1,\"54\":1,\"87\":1,\"103\":1},\"1\":{\"1\":1,\"54\":1,\"60\":2,\"61\":1,\"62\":1,\"77\":1}}],[\"22\",{\"0\":{\"102\":1}}],[\"22nd\",{\"0\":{\"15\":1}}],[\"20\",{\"0\":{\"100\":1}}],[\"20231222233037523\",{\"1\":{\"80\":1}}],[\"20231222233023698\",{\"1\":{\"80\":1}}],[\"20231222233001673\",{\"1\":{\"73\":1}}],[\"20231222232933858\",{\"1\":{\"72\":1}}],[\"20231222232833034\",{\"1\":{\"60\":1}}],[\"20231222204547540\",{\"1\":{\"44\":1}}],[\"20231222204535588\",{\"1\":{\"36\":1}}],[\"26\",{\"1\":{\"62\":2}}],[\"21\",{\"0\":{\"101\":1},\"1\":{\"62\":2}}],[\"2myvar\",{\"1\":{\"32\":1}}],[\"2\",{\"0\":{\"3\":1,\"21\":1,\"22\":1,\"25\":1,\"30\":1,\"39\":1,\"40\":1,\"41\":2,\"44\":1,\"47\":1,\"51\":1,\"54\":1,\"61\":1,\"66\":1,\"73\":1,\"77\":1,\"83\":1},\"1\":{\"1\":1,\"24\":2,\"25\":2,\"30\":2,\"32\":5,\"43\":2,\"46\":2,\"48\":1,\"50\":2,\"53\":4,\"54\":7,\"60\":8,\"61\":7,\"62\":1,\"63\":10,\"65\":1,\"76\":1,\"77\":1,\"78\":2,\"79\":2,\"88\":2,\"89\":1}}],[\"am\",{\"1\":{\"100\":5,\"101\":5,\"102\":1}}],[\"abcdefg0\",{\"1\":{\"92\":3,\"93\":1,\"94\":1,\"95\":1}}],[\"abcdefg\",{\"1\":{\"92\":1}}],[\"about\",{\"1\":{\"73\":2}}],[\"above\",{\"1\":{\"44\":1,\"47\":1,\"62\":1,\"63\":1}}],[\"appears\",{\"1\":{\"88\":1}}],[\"appropriate\",{\"1\":{\"48\":1}}],[\"afraid\",{\"1\":{\"73\":1}}],[\"after\",{\"1\":{\"32\":2,\"41\":1,\"48\":2,\"51\":1,\"54\":1}}],[\"aiyc\",{\"1\":{\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1}}],[\"ai\",{\"1\":{\"73\":2}}],[\"accept\",{\"1\":{\"73\":1}}],[\"accidentally\",{\"1\":{\"32\":2}}],[\"a1\",{\"1\":{\"62\":3}}],[\"a0\",{\"1\":{\"62\":3}}],[\"age\",{\"1\":{\"50\":2}}],[\"again\",{\"1\":{\"48\":1}}],[\"available\",{\"1\":{\"48\":1}}],[\"avoid\",{\"1\":{\"31\":1}}],[\"adventurers\",{\"1\":{\"73\":1}}],[\"advanced\",{\"0\":{\"28\":1}}],[\"address\",{\"1\":{\"103\":1}}],[\"addition\",{\"1\":{\"61\":1}}],[\"adding\",{\"1\":{\"48\":1}}],[\"add\",{\"1\":{\"48\":4,\"51\":1,\"54\":1}}],[\"added\",{\"1\":{\"41\":1,\"44\":1,\"47\":1}}],[\"austin$jaden$alex$cava\",{\"1\":{\"32\":1}}],[\"austin\",{\"1\":{\"32\":10}}],[\"automatically\",{\"1\":{\"1\":1,\"54\":1}}],[\"await\",{\"1\":{\"31\":1}}],[\"atomic\",{\"1\":{\"48\":4}}],[\"at\",{\"0\":{\"24\":1},\"1\":{\"32\":2,\"73\":1}}],[\"alphanumeric\",{\"1\":{\"92\":2}}],[\"alphabetical\",{\"1\":{\"92\":1}}],[\"always\",{\"1\":{\"48\":1,\"54\":1}}],[\"alexa\",{\"1\":{\"40\":2,\"43\":2,\"44\":2,\"46\":2,\"47\":2,\"50\":2,\"73\":5,\"74\":1,\"76\":1,\"77\":1}}],[\"alex\",{\"1\":{\"32\":1}}],[\"also\",{\"1\":{\"32\":2,\"48\":1,\"73\":2,\"96\":1}}],[\"allocates\",{\"1\":{\"21\":1}}],[\"all\",{\"1\":{\"21\":1,\"44\":1,\"48\":1,\"51\":1,\"93\":2,\"94\":2,\"96\":1,\"99\":1}}],[\"alignment\",{\"0\":{\"9\":1}}],[\"ask\",{\"1\":{\"48\":1}}],[\"asks\",{\"1\":{\"21\":1}}],[\"async\",{\"1\":{\"31\":1}}],[\"assumption\",{\"1\":{\"48\":3}}],[\"assert\",{\"1\":{\"31\":1,\"65\":2,\"66\":2,\"67\":2,\"68\":3}}],[\"assets\",{\"1\":{\"1\":1}}],[\"assigns\",{\"1\":{\"64\":1}}],[\"assigned\",{\"1\":{\"32\":3}}],[\"assigning\",{\"0\":{\"29\":1,\"30\":1}}],[\"assignment\",{\"0\":{\"22\":1,\"28\":1,\"64\":1},\"1\":{\"22\":2,\"32\":2}}],[\"assign\",{\"1\":{\"21\":1}}],[\"as\",{\"1\":{\"21\":2,\"31\":3,\"32\":1,\"41\":1,\"48\":2,\"51\":2,\"54\":1,\"68\":1,\"73\":1}}],[\"arithmetic\",{\"0\":{\"61\":1},\"1\":{\"61\":2}}],[\"are\",{\"1\":{\"21\":1,\"22\":1,\"31\":1,\"32\":1,\"44\":1,\"47\":1,\"48\":2,\"54\":2,\"63\":2,\"73\":5,\"93\":1,\"94\":1}}],[\"article\",{\"0\":{\"2\":1},\"1\":{\"1\":2}}],[\"another\",{\"1\":{\"103\":1}}],[\"anything\",{\"1\":{\"41\":1,\"73\":1}}],[\"any\",{\"1\":{\"31\":1,\"41\":2,\"44\":2,\"47\":2,\"51\":1,\"91\":1,\"92\":2}}],[\"answers\",{\"1\":{\"73\":2}}],[\"answer\",{\"1\":{\"24\":1}}],[\"an\",{\"0\":{\"21\":1},\"1\":{\"1\":2,\"21\":2,\"32\":1,\"41\":2,\"44\":1,\"47\":1,\"48\":1,\"54\":2,\"62\":2,\"90\":1}}],[\"and\",{\"0\":{\"5\":1,\"27\":1,\"65\":1,\"66\":1,\"67\":1},\"1\":{\"1\":3,\"21\":5,\"22\":1,\"31\":4,\"32\":14,\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"48\":9,\"50\":2,\"51\":2,\"53\":2,\"54\":5,\"61\":1,\"62\":7,\"63\":1,\"65\":3,\"66\":3,\"67\":3,\"68\":2,\"72\":1,\"73\":4,\"79\":1,\"80\":3,\"96\":4,\"100\":1}}],[\"a\",{\"0\":{\"51\":1,\"54\":1,\"62\":1,\"75\":1,\"76\":1,\"77\":1},\"1\":{\"1\":2,\"21\":5,\"22\":6,\"24\":3,\"25\":2,\"27\":2,\"29\":2,\"30\":2,\"31\":3,\"32\":13,\"41\":3,\"43\":2,\"44\":1,\"46\":2,\"47\":1,\"48\":25,\"51\":2,\"54\":6,\"60\":4,\"62\":4,\"64\":20,\"65\":8,\"66\":1,\"67\":1,\"68\":1,\"72\":2,\"73\":1,\"80\":2,\"85\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":2,\"96\":1,\"100\":2,\"101\":2,\"102\":3,\"103\":2}}],[\"blank\",{\"1\":{\"79\":1}}],[\"bis\",{\"1\":{\"64\":4}}],[\"bit\",{\"1\":{\"48\":1}}],[\"biàn\",{\"1\":{\"20\":1}}],[\"based\",{\"1\":{\"62\":1}}],[\"basics\",{\"1\":{\"51\":1}}],[\"basic\",{\"1\":{\"32\":1,\"44\":1}}],[\"backticks\",{\"1\":{\"1\":1}}],[\"bravest\",{\"1\":{\"73\":1}}],[\"branch\",{\"1\":{\"22\":1}}],[\"brothers\",{\"1\":{\"32\":4}}],[\"brother\",{\"1\":{\"32\":8}}],[\"break\",{\"1\":{\"31\":1}}],[\"built\",{\"0\":{\"81\":1},\"1\":{\"31\":1}}],[\"but\",{\"1\":{\"31\":1,\"48\":1,\"54\":1,\"73\":1}}],[\"b\",{\"1\":{\"24\":2,\"25\":2,\"27\":2,\"29\":2,\"30\":2,\"32\":4,\"43\":2,\"46\":2,\"62\":2,\"64\":8,\"65\":7,\"80\":1,\"86\":1,\"100\":4,\"101\":3,\"102\":1}}],[\"bornf\",{\"1\":{\"101\":1}}],[\"bornforthis\",{\"1\":{\"1\":1,\"77\":1,\"78\":1,\"80\":1,\"82\":2,\"83\":2,\"84\":2,\"85\":2,\"86\":2,\"87\":2,\"88\":4,\"89\":6,\"90\":2,\"96\":8,\"97\":2,\"98\":2,\"99\":4,\"100\":6,\"101\":6,\"102\":1,\"103\":2}}],[\"bo\",{\"1\":{\"86\":1,\"87\":1}}],[\"bool\",{\"0\":{\"55\":1},\"1\":{\"56\":1}}],[\"boolean\",{\"0\":{\"55\":1},\"1\":{\"54\":1,\"87\":1}}],[\"booleans\",{\"1\":{\"51\":1}}],[\"bomb\",{\"1\":{\"48\":2}}],[\"bombs\",{\"1\":{\"48\":2}}],[\"both\",{\"1\":{\"32\":2,\"96\":2}}],[\"bottom\",{\"1\":{\"22\":1}}],[\"box\",{\"0\":{\"6\":1}}],[\"by\",{\"1\":{\"1\":1,\"22\":2,\"24\":1,\"44\":1,\"51\":1,\"67\":1,\"96\":1,\"97\":1,\"98\":1}}],[\"been\",{\"1\":{\"48\":1}}],[\"because\",{\"1\":{\"48\":4}}],[\"become\",{\"1\":{\"41\":1}}],[\"before\",{\"1\":{\"32\":1}}],[\"beginning\",{\"1\":{\"79\":1}}],[\"begin\",{\"1\":{\"1\":1}}],[\"be\",{\"0\":{\"27\":1},\"1\":{\"1\":1,\"21\":2,\"24\":1,\"31\":2,\"32\":4,\"41\":4,\"44\":2,\"47\":2,\"48\":3,\"51\":2,\"54\":2,\"60\":2,\"73\":2,\"80\":3,\"103\":2}}],[\"o\",{\"1\":{\"100\":2,\"101\":2,\"102\":2}}],[\"old\",{\"1\":{\"99\":2}}],[\"occurrences\",{\"1\":{\"99\":1}}],[\"occurrence\",{\"1\":{\"89\":2,\"90\":1}}],[\"omitted\",{\"1\":{\"80\":1}}],[\"omit\",{\"1\":{\"79\":1,\"80\":1}}],[\"open\",{\"1\":{\"77\":1}}],[\"operations\",{\"0\":{\"68\":1}}],[\"operation\",{\"0\":{\"67\":1}}],[\"operator\",{\"1\":{\"61\":8,\"63\":1,\"64\":1}}],[\"operators\",{\"0\":{\"61\":1,\"63\":1,\"64\":1},\"1\":{\"61\":1}}],[\"operands\",{\"1\":{\"63\":2}}],[\"operand\",{\"1\":{\"63\":4}}],[\"optimization\",{\"0\":{\"79\":1}}],[\"optimize\",{\"1\":{\"73\":1}}],[\"options\",{\"1\":{\"73\":2}}],[\"oil\",{\"1\":{\"48\":1}}],[\"outside\",{\"1\":{\"73\":1}}],[\"out\",{\"1\":{\"48\":1,\"60\":7}}],[\"outputs\",{\"1\":{\"24\":1}}],[\"output\",{\"0\":{\"26\":1},\"1\":{\"24\":2,\"25\":1,\"27\":1,\"29\":1,\"30\":1,\"32\":2,\"38\":2,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"54\":3,\"56\":1,\"62\":5,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"74\":1,\"77\":1,\"80\":3,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"91\":2,\"92\":4,\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":3}}],[\"otherwise\",{\"1\":{\"48\":1,\"73\":2,\"93\":1,\"94\":1,\"95\":1}}],[\"other\",{\"1\":{\"32\":2}}],[\"owned\",{\"1\":{\"44\":1,\"51\":1}}],[\"own\",{\"1\":{\"32\":2}}],[\"obviously\",{\"1\":{\"24\":1,\"48\":1,\"54\":1}}],[\"overwritten\",{\"1\":{\"21\":1}}],[\"on\",{\"1\":{\"48\":1,\"62\":1,\"64\":2}}],[\"once\",{\"0\":{\"24\":1},\"1\":{\"32\":1}}],[\"only\",{\"1\":{\"21\":1,\"32\":3,\"44\":1,\"48\":2,\"51\":1,\"73\":1,\"92\":1,\"95\":1,\"96\":1,\"103\":1}}],[\"onto\",{\"1\":{\"21\":1}}],[\"ones\",{\"1\":{\"73\":2}}],[\"one\",{\"1\":{\"21\":1,\"32\":4,\"48\":2,\"54\":1,\"60\":2,\"74\":1,\"80\":2}}],[\"original\",{\"1\":{\"62\":3}}],[\"order\",{\"1\":{\"54\":4}}],[\"orderliness\",{\"1\":{\"41\":1,\"44\":1,\"47\":1}}],[\"ordered\",{\"0\":{\"5\":1},\"1\":{\"51\":1,\"54\":1}}],[\"or\",{\"1\":{\"1\":1,\"21\":1,\"22\":1,\"31\":1,\"32\":2,\"41\":1,\"48\":2,\"54\":1,\"62\":1,\"63\":2,\"73\":1,\"74\":1,\"79\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"103\":1}}],[\"ofts\",{\"1\":{\"78\":1}}],[\"of\",{\"0\":{\"25\":1,\"41\":1,\"44\":1,\"47\":1,\"51\":1,\"54\":1,\"60\":1,\"65\":1,\"66\":1,\"72\":1,\"77\":1},\"1\":{\"0\":1,\"1\":2,\"21\":4,\"22\":4,\"31\":2,\"32\":13,\"41\":3,\"44\":1,\"47\":1,\"48\":6,\"51\":3,\"54\":1,\"60\":2,\"62\":9,\"65\":1,\"67\":3,\"72\":1,\"73\":2,\"74\":1,\"80\":2,\"84\":1,\"85\":1,\"88\":1,\"89\":5,\"90\":4,\"92\":2,\"95\":1,\"99\":2,\"102\":1}}],[\"duplicates\",{\"1\":{\"54\":1}}],[\"during\",{\"1\":{\"41\":1,\"44\":1,\"47\":1}}],[\"d\",{\"1\":{\"50\":3,\"51\":1}}],[\"direction\",{\"1\":{\"80\":2}}],[\"directly\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"48\":3,\"50\":2,\"53\":2,\"80\":1,\"103\":1}}],[\"discontinuous\",{\"0\":{\"78\":1}}],[\"div\",{\"1\":{\"67\":2}}],[\"divided\",{\"1\":{\"67\":1}}],[\"division\",{\"0\":{\"66\":1},\"1\":{\"60\":2,\"61\":2,\"64\":1,\"66\":5}}],[\"difference\",{\"0\":{\"65\":1},\"1\":{\"65\":4}}],[\"different\",{\"0\":{\"30\":1},\"1\":{\"73\":1,\"96\":1,\"103\":1}}],[\"digits\",{\"1\":{\"62\":1}}],[\"digit\",{\"1\":{\"62\":1}}],[\"die\",{\"1\":{\"54\":2}}],[\"dict\",{\"0\":{\"49\":1},\"1\":{\"50\":2}}],[\"dictionary\",{\"0\":{\"49\":1,\"51\":1},\"1\":{\"51\":1}}],[\"drink\",{\"1\":{\"32\":4}}],[\"data\",{\"0\":{\"24\":1,\"35\":1,\"36\":1},\"1\":{\"21\":2,\"32\":1,\"38\":6,\"40\":2,\"43\":2,\"44\":4,\"46\":2,\"47\":2,\"48\":3,\"50\":2,\"51\":3,\"53\":2,\"54\":2,\"103\":1}}],[\"day\",{\"1\":{\"21\":1}}],[\"dashes\",{\"1\":{\"1\":1}}],[\"deep\",{\"1\":{\"73\":2}}],[\"determined\",{\"1\":{\"54\":1}}],[\"determinism\",{\"1\":{\"54\":1}}],[\"deterministic\",{\"1\":{\"54\":1}}],[\"deleted\",{\"1\":{\"41\":1,\"44\":1,\"47\":1}}],[\"delete\",{\"1\":{\"32\":1,\"51\":1,\"54\":2}}],[\"deleting\",{\"1\":{\"32\":1,\"48\":1}}],[\"del\",{\"1\":{\"31\":1,\"32\":1}}],[\"definition\",{\"0\":{\"72\":1}}],[\"definitely\",{\"1\":{\"48\":1}}],[\"def\",{\"1\":{\"31\":1,\"32\":1}}],[\"default\",{\"1\":{\"24\":2,\"80\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":2}}],[\"description\",{\"1\":{\"61\":1,\"63\":1,\"64\":1}}],[\"descendant\",{\"1\":{\"22\":1}}],[\"destroy\",{\"1\":{\"32\":1}}],[\"design\",{\"2\":{\"12\":1}}],[\"decimal\",{\"1\":{\"61\":1}}],[\"dec\",{\"0\":{\"15\":1}}],[\"demo1\",{\"1\":{\"103\":1}}],[\"demo\",{\"1\":{\"1\":1}}],[\"double\",{\"1\":{\"73\":2}}],[\"don\",{\"1\":{\"32\":3,\"48\":1}}],[\"dongmei\",{\"1\":{\"21\":1}}],[\"doesn\",{\"1\":{\"54\":1}}],[\"does\",{\"1\":{\"21\":4,\"48\":1,\"54\":1,\"80\":1}}],[\"do\",{\"1\":{\"1\":1,\"21\":2,\"32\":1,\"48\":3,\"73\":1}}],[\"llo\",{\"1\":{\"77\":1}}],[\"lst3\",{\"1\":{\"100\":2,\"101\":2}}],[\"lst2\",{\"1\":{\"100\":2,\"101\":2}}],[\"lst1\",{\"1\":{\"100\":2,\"101\":2}}],[\"lstrip\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"lst\",{\"1\":{\"43\":3,\"44\":1}}],[\"lower\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"lowercase\",{\"1\":{\"31\":1,\"83\":1,\"94\":2}}],[\"look\",{\"1\":{\"73\":1}}],[\"location\",{\"1\":{\"48\":1,\"103\":1}}],[\"longitude\",{\"1\":{\"48\":2}}],[\"logs\",{\"1\":{\"48\":1}}],[\"log\",{\"1\":{\"48\":1}}],[\"logic\",{\"1\":{\"22\":1}}],[\"love\",{\"1\":{\"27\":2}}],[\"large\",{\"1\":{\"48\":1}}],[\"latitude\",{\"1\":{\"48\":2}}],[\"lambda\",{\"1\":{\"31\":1}}],[\"last\",{\"1\":{\"21\":1,\"76\":2,\"80\":2,\"103\":1}}],[\"language\",{\"1\":{\"1\":1}}],[\"leading\",{\"1\":{\"96\":3,\"97\":2}}],[\"leader\",{\"1\":{\"48\":1}}],[\"leaving\",{\"1\":{\"79\":1}}],[\"len\",{\"1\":{\"74\":2,\"76\":1,\"78\":3,\"80\":2}}],[\"length\",{\"0\":{\"74\":1},\"1\":{\"74\":1}}],[\"leeks\",{\"1\":{\"73\":1}}],[\"letter\",{\"1\":{\"84\":1,\"85\":1,\"92\":1}}],[\"letters\",{\"1\":{\"31\":1,\"72\":1,\"93\":1,\"94\":1}}],[\"let\",{\"1\":{\"73\":1}}],[\"less\",{\"1\":{\"63\":2,\"68\":4}}],[\"left\",{\"1\":{\"22\":1,\"32\":2,\"41\":2,\"44\":6,\"47\":6,\"64\":1,\"77\":1,\"100\":1}}],[\"lei\",{\"1\":{\"21\":1}}],[\"level\",{\"1\":{\"1\":2}}],[\"little\",{\"0\":{\"62\":1}}],[\"literal\",{\"0\":{\"20\":1}}],[\"like\",{\"1\":{\"21\":1,\"32\":2,\"48\":1}}],[\"liu\",{\"1\":{\"21\":3}}],[\"li\",{\"1\":{\"21\":1}}],[\"liàng\",{\"1\":{\"20\":1}}],[\"life\",{\"0\":{\"19\":1},\"1\":{\"22\":2}}],[\"lists\",{\"0\":{\"42\":1,\"44\":1},\"1\":{\"44\":1,\"48\":1,\"54\":1}}],[\"listed\",{\"1\":{\"21\":1}}],[\"list\",{\"0\":{\"5\":1,\"42\":1,\"48\":1},\"1\":{\"31\":2,\"43\":2,\"44\":3,\"48\":5,\"54\":1,\"100\":1,\"101\":1}}],[\"link\",{\"1\":{\"1\":2}}],[\"links\",{\"0\":{\"7\":1},\"1\":{\"1\":1}}],[\"line\",{\"1\":{\"1\":1,\"103\":1}}],[\"lucem\",{\"1\":{\"0\":1}}],[\"n\",{\"1\":{\"67\":8,\"99\":1,\"100\":1,\"101\":1,\"102\":1}}],[\"negative\",{\"1\":{\"80\":1}}],[\"next\",{\"1\":{\"78\":1}}],[\"new\",{\"1\":{\"48\":2,\"62\":3,\"99\":2,\"103\":1}}],[\"needed\",{\"1\":{\"51\":1,\"54\":1}}],[\"needs\",{\"1\":{\"48\":1}}],[\"need\",{\"1\":{\"21\":1,\"48\":7,\"62\":1,\"73\":3,\"103\":1}}],[\"num\",{\"1\":{\"38\":10,\"62\":5}}],[\"numeric\",{\"0\":{\"37\":1,\"59\":1,\"60\":1,\"62\":1},\"1\":{\"91\":1}}],[\"number\",{\"1\":{\"31\":1,\"32\":1,\"54\":1,\"62\":9,\"73\":1,\"74\":1,\"78\":1,\"80\":1,\"88\":1,\"91\":1,\"99\":1}}],[\"numbers\",{\"0\":{\"65\":1,\"66\":1},\"1\":{\"31\":1,\"51\":1,\"60\":2,\"62\":4,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"72\":1}}],[\"nuwa\",{\"1\":{\"22\":4}}],[\"npc\",{\"1\":{\"22\":1}}],[\"naming\",{\"0\":{\"31\":1}}],[\"name\",{\"1\":{\"1\":1,\"22\":4,\"50\":2,\"73\":1,\"103\":1}}],[\"named\",{\"1\":{\"1\":1,\"32\":4}}],[\"names\",{\"1\":{\"1\":1,\"31\":4,\"32\":4}}],[\"national\",{\"1\":{\"22\":1}}],[\"non\",{\"1\":{\"92\":1}}],[\"nonlocal\",{\"1\":{\"31\":1}}],[\"none\",{\"1\":{\"31\":1,\"32\":1}}],[\"now\",{\"1\":{\"22\":1,\"24\":1,\"48\":2,\"51\":1}}],[\"no\",{\"1\":{\"22\":1,\"32\":1,\"48\":2,\"54\":2,\"80\":2}}],[\"note\",{\"1\":{\"41\":1,\"54\":1,\"61\":1}}],[\"not\",{\"1\":{\"1\":1,\"21\":4,\"31\":1,\"48\":3,\"51\":1,\"54\":4,\"63\":1,\"73\":2,\"77\":1,\"80\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"103\":1}}],[\"fastest\",{\"1\":{\"73\":1}}],[\"false\",{\"1\":{\"31\":1,\"32\":11,\"43\":2,\"46\":2,\"53\":2,\"54\":2,\"56\":1,\"63\":1,\"86\":2,\"87\":1,\"91\":2,\"92\":4,\"93\":2,\"94\":1,\"95\":2}}],[\"fully\",{\"1\":{\"73\":1}}],[\"functionality\",{\"1\":{\"48\":1}}],[\"function\",{\"1\":{\"31\":1,\"48\":1,\"73\":1}}],[\"f\",{\"1\":{\"68\":3,\"102\":1}}],[\"floor\",{\"1\":{\"61\":1,\"67\":2}}],[\"float\",{\"0\":{\"37\":1},\"1\":{\"38\":8,\"60\":6,\"64\":1}}],[\"flat\",{\"1\":{\"21\":1}}],[\"february\",{\"1\":{\"21\":2}}],[\"found\",{\"1\":{\"89\":1,\"90\":2}}],[\"following\",{\"1\":{\"32\":4,\"62\":1,\"73\":1}}],[\"followed\",{\"1\":{\"1\":1}}],[\"folder\",{\"1\":{\"1\":1}}],[\"form\",{\"1\":{\"62\":3}}],[\"formulas\",{\"0\":{\"10\":1}}],[\"formatting\",{\"0\":{\"103\":1}}],[\"formatted\",{\"1\":{\"1\":1}}],[\"format\",{\"1\":{\"1\":1,\"67\":1,\"85\":1,\"103\":1}}],[\"for\",{\"0\":{\"31\":1},\"1\":{\"1\":1,\"21\":4,\"31\":1,\"32\":1,\"44\":1,\"47\":1,\"48\":4,\"51\":2,\"54\":2,\"61\":1,\"73\":1,\"77\":1,\"78\":1,\"80\":1,\"88\":2,\"89\":5,\"90\":2,\"95\":1,\"103\":1}}],[\"finds\",{\"1\":{\"89\":1,\"90\":1}}],[\"find\",{\"0\":{\"89\":1},\"1\":{\"89\":4}}],[\"finally\",{\"1\":{\"22\":1,\"31\":1}}],[\"filled\",{\"1\":{\"32\":2}}],[\"file\",{\"1\":{\"1\":1,\"21\":1,\"103\":1}}],[\"figurine\",{\"1\":{\"22\":4}}],[\"first\",{\"1\":{\"1\":1,\"62\":1,\"63\":4,\"73\":1,\"84\":1,\"85\":1,\"89\":3,\"90\":2,\"99\":1}}],[\"from\",{\"0\":{\"19\":1,\"75\":1},\"1\":{\"0\":1,\"1\":1,\"22\":2,\"24\":1,\"31\":1,\"41\":5,\"44\":8,\"47\":8,\"65\":1,\"74\":1,\"79\":1,\"80\":2,\"96\":3,\"97\":1,\"98\":1,\"100\":1,\"101\":1}}],[\"creating\",{\"0\":{\"73\":1},\"1\":{\"85\":1}}],[\"creation\",{\"1\":{\"41\":1}}],[\"creates\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"created\",{\"1\":{\"48\":1}}],[\"create\",{\"0\":{\"22\":1},\"1\":{\"1\":1,\"32\":1,\"48\":3,\"103\":1}}],[\"cumbersome\",{\"1\":{\"103\":1}}],[\"cup\",{\"1\":{\"32\":8}}],[\"cups\",{\"1\":{\"32\":6}}],[\"cuea\",{\"0\":{\"14\":1}}],[\"c\",{\"1\":{\"24\":2,\"25\":2,\"27\":2,\"29\":2,\"30\":2,\"32\":4,\"62\":2}}],[\"closed\",{\"1\":{\"77\":1}}],[\"clay\",{\"1\":{\"22\":4}}],[\"class\",{\"1\":{\"21\":3,\"31\":1}}],[\"clearly\",{\"1\":{\"21\":1,\"73\":1}}],[\"capitalizes\",{\"1\":{\"84\":1,\"85\":1}}],[\"capitalize\",{\"0\":{\"84\":1},\"1\":{\"84\":1}}],[\"calculates\",{\"1\":{\"61\":2,\"65\":1,\"66\":1,\"67\":1}}],[\"calculations\",{\"1\":{\"61\":1}}],[\"call\",{\"1\":{\"22\":1,\"103\":1}}],[\"cause\",{\"1\":{\"54\":1}}],[\"cava\",{\"1\":{\"32\":1}}],[\"case\",{\"1\":{\"31\":1,\"32\":1,\"48\":1,\"88\":1}}],[\"cannot\",{\"1\":{\"31\":3,\"32\":1,\"41\":2,\"47\":1,\"54\":2,\"73\":1,\"103\":1}}],[\"can\",{\"0\":{\"27\":1},\"1\":{\"21\":2,\"22\":1,\"24\":2,\"31\":1,\"32\":5,\"41\":2,\"44\":2,\"47\":1,\"48\":5,\"51\":2,\"54\":2,\"73\":2,\"79\":1,\"96\":1,\"97\":1,\"98\":1,\"103\":1}}],[\"cambridge\",{\"1\":{\"0\":1}}],[\"counts\",{\"1\":{\"88\":1}}],[\"count\",{\"0\":{\"88\":1},\"1\":{\"88\":2,\"99\":2}}],[\"counted\",{\"1\":{\"44\":1,\"47\":1}}],[\"correct\",{\"1\":{\"73\":1}}],[\"corresponding\",{\"1\":{\"51\":1,\"68\":1}}],[\"coke\",{\"1\":{\"32\":1}}],[\"cola\",{\"1\":{\"32\":6}}],[\"colons\",{\"1\":{\"1\":1}}],[\"comments\",{\"1\":{\"73\":1}}],[\"complex\",{\"1\":{\"103\":1}}],[\"compares\",{\"1\":{\"68\":1}}],[\"comparing\",{\"0\":{\"63\":1}}],[\"comparisons\",{\"1\":{\"67\":1}}],[\"comparison\",{\"0\":{\"63\":1,\"68\":1}}],[\"composed\",{\"1\":{\"51\":1,\"72\":1}}],[\"composition\",{\"1\":{\"51\":1}}],[\"computer\",{\"1\":{\"21\":1}}],[\"combination\",{\"1\":{\"31\":1}}],[\"converted\",{\"1\":{\"103\":1}}],[\"converts\",{\"1\":{\"82\":1,\"83\":1}}],[\"concatenate\",{\"1\":{\"103\":1}}],[\"concatenated\",{\"1\":{\"103\":1}}],[\"concatenation\",{\"1\":{\"103\":1}}],[\"condition\",{\"1\":{\"56\":3}}],[\"consecutive\",{\"1\":{\"96\":1}}],[\"consists\",{\"1\":{\"92\":1,\"95\":1}}],[\"considered\",{\"1\":{\"41\":1}}],[\"constant\",{\"1\":{\"48\":1}}],[\"control\",{\"1\":{\"80\":1}}],[\"controls\",{\"1\":{\"80\":2,\"99\":1,\"100\":1,\"101\":1}}],[\"content\",{\"1\":{\"32\":2,\"73\":1,\"86\":1,\"92\":1}}],[\"continue\",{\"1\":{\"31\":1}}],[\"contains\",{\"1\":{\"92\":1}}],[\"contain\",{\"1\":{\"31\":1}}],[\"container\",{\"0\":{\"6\":1}}],[\"congress\",{\"1\":{\"22\":1}}],[\"copy\",{\"1\":{\"1\":1,\"21\":1}}],[\"code\",{\"0\":{\"3\":1,\"38\":1,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"56\":1},\"1\":{\"1\":1,\"41\":1,\"62\":4,\"65\":2,\"66\":2,\"67\":3,\"68\":2,\"73\":2}}],[\"choose\",{\"1\":{\"48\":1}}],[\"checks\",{\"1\":{\"63\":6,\"86\":1,\"87\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":1,\"95\":1}}],[\"check\",{\"1\":{\"38\":6,\"40\":2,\"43\":2,\"46\":2,\"50\":2,\"53\":2}}],[\"children\",{\"1\":{\"32\":2}}],[\"chinese\",{\"1\":{\"1\":1}}],[\"chaotic\",{\"1\":{\"73\":1}}],[\"changing\",{\"1\":{\"32\":2}}],[\"changed\",{\"1\":{\"32\":1,\"41\":1,\"44\":1,\"47\":1}}],[\"changes\",{\"0\":{\"26\":1}}],[\"change\",{\"1\":{\"20\":1,\"21\":1,\"32\":2,\"48\":2,\"51\":1,\"54\":2,\"80\":1,\"103\":1}}],[\"character\",{\"0\":{\"76\":1},\"1\":{\"41\":2,\"76\":4,\"77\":1,\"80\":1,\"87\":1,\"88\":1,\"89\":3,\"90\":3,\"91\":1,\"92\":1,\"96\":1,\"99\":2,\"100\":2,\"101\":1}}],[\"characteristics\",{\"0\":{\"41\":1,\"44\":1,\"47\":1,\"51\":1,\"54\":1,\"60\":1},\"1\":{\"21\":1}}],[\"characters\",{\"0\":{\"75\":1,\"77\":1,\"78\":1},\"1\":{\"1\":1,\"41\":1,\"72\":1,\"74\":1,\"78\":3,\"79\":3,\"92\":1,\"95\":1,\"96\":2,\"97\":2,\"98\":2,\"102\":1}}],[\"upper\",{\"0\":{\"82\":1},\"1\":{\"82\":1}}],[\"uppercase\",{\"1\":{\"31\":1,\"82\":1,\"93\":2}}],[\"up\",{\"1\":{\"48\":1}}],[\"unless\",{\"1\":{\"103\":1}}],[\"until\",{\"1\":{\"96\":1}}],[\"uniqueness\",{\"1\":{\"54\":1}}],[\"university\",{\"1\":{\"0\":1}}],[\"unnecessary\",{\"1\":{\"48\":1}}],[\"understood\",{\"1\":{\"73\":1}}],[\"understand\",{\"1\":{\"51\":1}}],[\"understanding\",{\"0\":{\"19\":1,\"20\":1}}],[\"underscores\",{\"1\":{\"31\":1}}],[\"underline\",{\"0\":{\"8\":1}}],[\"unordered\",{\"0\":{\"5\":1},\"1\":{\"51\":2,\"54\":1}}],[\"using\",{\"1\":{\"1\":1,\"22\":1,\"31\":1,\"32\":1,\"48\":1,\"73\":1,\"100\":2,\"101\":1,\"103\":1}}],[\"users\",{\"1\":{\"103\":1}}],[\"user\",{\"1\":{\"48\":3}}],[\"used\",{\"0\":{\"27\":1},\"1\":{\"31\":2,\"48\":1,\"51\":1,\"61\":1,\"73\":1}}],[\"use\",{\"1\":{\"1\":3,\"24\":1,\"32\":3,\"74\":1,\"77\":1,\"78\":1,\"80\":2}}],[\"target\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"96\":1}}],[\"takes\",{\"1\":{\"68\":1}}],[\"task\",{\"0\":{\"5\":1}}],[\"text\",{\"1\":{\"67\":1,\"73\":1}}],[\"test\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"template\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"tell\",{\"1\":{\"48\":1}}],[\"teacher\",{\"1\":{\"21\":3}}],[\"tup\",{\"1\":{\"46\":3,\"47\":1,\"50\":2}}],[\"tuple\",{\"0\":{\"45\":1,\"48\":1},\"1\":{\"46\":2,\"47\":3,\"48\":5,\"54\":1}}],[\"tuples\",{\"0\":{\"45\":1,\"47\":1},\"1\":{\"47\":1,\"51\":1}}],[\"typeerror\",{\"1\":{\"103\":1}}],[\"types\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"60\":1},\"1\":{\"32\":1,\"44\":2,\"51\":2,\"54\":1,\"73\":1,\"103\":1}}],[\"type\",{\"0\":{\"59\":1},\"1\":{\"32\":2,\"38\":12,\"40\":5,\"41\":1,\"43\":5,\"44\":2,\"46\":5,\"47\":2,\"50\":5,\"51\":1,\"53\":5,\"56\":1,\"60\":1}}],[\"typora\",{\"0\":{\"1\":1},\"2\":{\"13\":1,\"17\":1,\"34\":1,\"58\":1,\"70\":1,\"105\":1}}],[\"t\",{\"1\":{\"21\":1,\"32\":3,\"38\":6,\"40\":3,\"43\":3,\"46\":3,\"48\":1,\"50\":3,\"53\":3,\"54\":1,\"73\":2,\"102\":1}}],[\"traceback\",{\"1\":{\"103\":1}}],[\"tracks\",{\"1\":{\"48\":1}}],[\"track\",{\"1\":{\"21\":1,\"48\":4}}],[\"trailing\",{\"1\":{\"96\":3,\"98\":2}}],[\"translation\",{\"1\":{\"67\":1,\"92\":1}}],[\"transformation\",{\"0\":{\"62\":1}}],[\"try\",{\"1\":{\"31\":1,\"63\":1}}],[\"true\",{\"1\":{\"31\":1,\"32\":11,\"43\":2,\"46\":2,\"56\":2,\"63\":5,\"86\":2,\"87\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":2,\"95\":2}}],[\"triple\",{\"1\":{\"1\":1,\"73\":3}}],[\"times\",{\"1\":{\"54\":3,\"88\":1}}],[\"time\",{\"1\":{\"48\":2,\"103\":1}}],[\"tip\",{\"0\":{\"6\":1}}],[\"title\",{\"0\":{\"2\":1,\"85\":1},\"1\":{\"1\":1,\"85\":2}}],[\"toa\",{\"1\":{\"64\":4}}],[\"top\",{\"1\":{\"22\":1}}],[\"to\",{\"0\":{\"22\":1,\"29\":1,\"30\":1},\"1\":{\"1\":3,\"21\":4,\"22\":4,\"31\":2,\"32\":6,\"41\":3,\"44\":6,\"47\":6,\"48\":15,\"51\":1,\"54\":2,\"62\":2,\"63\":2,\"64\":3,\"67\":1,\"68\":3,\"73\":3,\"77\":2,\"78\":2,\"79\":2,\"80\":4,\"82\":1,\"83\":1,\"85\":2,\"86\":2,\"87\":2,\"88\":1,\"92\":1,\"100\":2,\"101\":1,\"103\":7}}],[\"two\",{\"1\":{\"1\":1,\"32\":2,\"44\":1,\"47\":1,\"48\":1,\"62\":6,\"63\":2,\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"than\",{\"1\":{\"63\":4,\"68\":7}}],[\"that\",{\"1\":{\"21\":2,\"24\":1,\"41\":2,\"48\":3,\"54\":2,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"100\":1,\"103\":2}}],[\"third\",{\"1\":{\"80\":1}}],[\"think\",{\"1\":{\"73\":1}}],[\"things\",{\"1\":{\"21\":1}}],[\"this\",{\"1\":{\"22\":1,\"24\":1,\"48\":1,\"73\":1}}],[\"throwing\",{\"1\":{\"54\":1}}],[\"throw\",{\"1\":{\"54\":1}}],[\"through\",{\"1\":{\"22\":1}}],[\"three\",{\"0\":{\"41\":1,\"44\":1,\"47\":1},\"1\":{\"1\":3,\"99\":1}}],[\"these\",{\"1\":{\"103\":1}}],[\"them\",{\"1\":{\"79\":1}}],[\"their\",{\"1\":{\"32\":2,\"65\":1,\"66\":1,\"68\":1}}],[\"they\",{\"1\":{\"22\":2}}],[\"then\",{\"1\":{\"21\":1,\"22\":1,\"48\":2,\"62\":3,\"73\":1}}],[\"there\",{\"1\":{\"21\":1,\"32\":2,\"44\":1,\"47\":1,\"48\":9,\"54\":1}}],[\"the\",{\"0\":{\"25\":1,\"26\":1,\"29\":1,\"63\":1},\"1\":{\"0\":1,\"1\":5,\"21\":12,\"22\":11,\"24\":2,\"31\":1,\"32\":22,\"41\":5,\"44\":3,\"47\":3,\"48\":23,\"54\":9,\"60\":6,\"62\":14,\"63\":12,\"64\":4,\"65\":1,\"67\":4,\"68\":1,\"73\":11,\"74\":2,\"76\":4,\"77\":3,\"78\":1,\"79\":3,\"80\":7,\"82\":1,\"83\":1,\"84\":2,\"85\":1,\"86\":1,\"87\":1,\"88\":2,\"89\":9,\"90\":7,\"91\":2,\"92\":6,\"93\":2,\"94\":2,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":5,\"100\":4,\"101\":3,\"102\":1,\"103\":2}}],[\"h\",{\"1\":{\"102\":1}}],[\"huangjiabao\",{\"1\":{\"103\":1}}],[\"huang\",{\"1\":{\"73\":1}}],[\"home\",{\"1\":{\"32\":2}}],[\"how\",{\"0\":{\"22\":1},\"1\":{\"32\":2,\"73\":1,\"78\":1,\"100\":1,\"101\":1}}],[\"hi\",{\"1\":{\"103\":2}}],[\"highest\",{\"1\":{\"60\":2}}],[\"hire\",{\"1\":{\"48\":1}}],[\"hidden\",{\"1\":{\"32\":1}}],[\"hinc\",{\"1\":{\"0\":1}}],[\"hahaha\",{\"1\":{\"48\":1}}],[\"has\",{\"1\":{\"48\":1,\"80\":1}}],[\"hash\",{\"1\":{\"1\":1}}],[\"having\",{\"1\":{\"48\":1}}],[\"haven\",{\"1\":{\"73\":1}}],[\"have\",{\"1\":{\"21\":1,\"32\":4,\"48\":2,\"54\":2,\"62\":1,\"73\":1}}],[\"had\",{\"1\":{\"22\":1}}],[\"help\",{\"1\":{\"31\":2}}],[\"hello\",{\"1\":{\"1\":1,\"32\":2,\"40\":2,\"43\":2,\"46\":2,\"53\":2,\"54\":2,\"73\":2,\"74\":1,\"76\":1,\"77\":1}}],[\"headings\",{\"0\":{\"5\":1},\"1\":{\"1\":2}}],[\"here\",{\"1\":{\"0\":1,\"31\":1,\"67\":1,\"92\":1}}],[\"hyphens\",{\"1\":{\"1\":1,\"96\":3,\"99\":1}}],[\"slicing\",{\"1\":{\"77\":1,\"78\":1}}],[\"scammers\",{\"1\":{\"73\":1}}],[\"scores\",{\"1\":{\"21\":4}}],[\"snippet\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"swap\",{\"1\":{\"32\":2,\"80\":1}}],[\"success\",{\"1\":{\"73\":1}}],[\"such\",{\"1\":{\"21\":1,\"32\":1,\"48\":2}}],[\"sure\",{\"1\":{\"67\":1,\"92\":1}}],[\"sum\",{\"0\":{\"65\":1},\"1\":{\"62\":4,\"65\":5}}],[\"substring\",{\"1\":{\"90\":1}}],[\"subtracting\",{\"1\":{\"65\":1}}],[\"subtraction\",{\"1\":{\"61\":1}}],[\"subcharacter\",{\"1\":{\"41\":1}}],[\"suitable\",{\"1\":{\"48\":3}}],[\"suppose\",{\"1\":{\"32\":2,\"62\":4}}],[\"splits\",{\"1\":{\"100\":3,\"101\":2}}],[\"split\",{\"0\":{\"100\":1},\"1\":{\"100\":5}}],[\"specified\",{\"1\":{\"96\":2,\"97\":2,\"98\":2}}],[\"specific\",{\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"100\":1,\"101\":1,\"102\":1}}],[\"specify\",{\"1\":{\"54\":1}}],[\"special\",{\"1\":{\"32\":1,\"48\":1,\"72\":1}}],[\"space\",{\"1\":{\"1\":1,\"21\":1,\"22\":1,\"24\":2,\"48\":6,\"100\":1}}],[\"spaces\",{\"1\":{\"1\":1,\"31\":1,\"74\":1,\"96\":2,\"99\":1}}],[\"syntax\",{\"1\":{\"77\":1,\"78\":1}}],[\"system\",{\"1\":{\"31\":1,\"48\":1}}],[\"symbols\",{\"1\":{\"1\":1}}],[\"sihtrofnro\",{\"1\":{\"80\":1}}],[\"sihtrofnrob\",{\"1\":{\"80\":1}}],[\"single\",{\"0\":{\"76\":1},\"1\":{\"73\":2}}],[\"simultaneously\",{\"0\":{\"25\":1,\"27\":1,\"29\":1,\"30\":1},\"1\":{\"24\":1,\"32\":1,\"96\":1}}],[\"similar\",{\"1\":{\"22\":1,\"48\":1}}],[\"sizes\",{\"1\":{\"68\":1}}],[\"size\",{\"1\":{\"20\":1,\"21\":1,\"80\":2}}],[\"satisfied\",{\"1\":{\"80\":1}}],[\"same\",{\"0\":{\"29\":1},\"1\":{\"32\":1,\"54\":1}}],[\"say\",{\"1\":{\"22\":1,\"54\":2,\"73\":1}}],[\"sacra\",{\"1\":{\"0\":1}}],[\"something\",{\"1\":{\"73\":1}}],[\"sometimes\",{\"1\":{\"73\":1}}],[\"some\",{\"1\":{\"51\":1}}],[\"software\",{\"1\":{\"48\":1}}],[\"social\",{\"1\":{\"48\":1}}],[\"so\",{\"1\":{\"21\":2,\"22\":1,\"48\":4,\"60\":2,\"73\":1,\"80\":1}}],[\"shallow\",{\"1\":{\"73\":2}}],[\"sheets\",{\"1\":{\"21\":1}}],[\"sheet\",{\"1\":{\"21\":2}}],[\"should\",{\"1\":{\"1\":1,\"21\":1,\"62\":3,\"80\":1}}],[\"s\",{\"1\":{\"21\":4,\"22\":2,\"31\":1,\"32\":6,\"44\":1,\"47\":1,\"48\":1,\"67\":1,\"73\":1,\"102\":1}}],[\"searching\",{\"1\":{\"89\":1,\"90\":1}}],[\"select\",{\"1\":{\"77\":1,\"78\":7,\"79\":4,\"80\":10}}],[\"selecting\",{\"1\":{\"76\":4,\"77\":1}}],[\"sequence\",{\"1\":{\"72\":1}}],[\"series\",{\"1\":{\"51\":1}}],[\"set2\",{\"1\":{\"54\":2}}],[\"sets\",{\"1\":{\"54\":1}}],[\"set1\",{\"1\":{\"53\":3,\"54\":2}}],[\"set\",{\"0\":{\"52\":2,\"54\":1},\"1\":{\"48\":1,\"53\":2,\"54\":4}}],[\"second\",{\"1\":{\"62\":1,\"63\":4}}],[\"secret\",{\"1\":{\"32\":1}}],[\"section\",{\"1\":{\"1\":1}}],[\"sensitive\",{\"1\":{\"31\":1,\"32\":1,\"88\":1}}],[\"sep=\",{\"1\":{\"25\":1,\"27\":1,\"78\":1,\"99\":1,\"100\":1,\"101\":1}}],[\"separator\",{\"1\":{\"102\":1}}],[\"separation\",{\"0\":{\"25\":1}}],[\"separated\",{\"1\":{\"24\":1}}],[\"separate\",{\"1\":{\"21\":1,\"31\":1}}],[\"sep\",{\"0\":{\"27\":1},\"1\":{\"24\":1,\"78\":2,\"100\":2,\"101\":1,\"102\":1}}],[\"seen\",{\"1\":{\"24\":1}}],[\"see\",{\"1\":{\"21\":1,\"63\":1,\"73\":2}}],[\"session\",{\"0\":{\"14\":1,\"15\":1}}],[\"step\",{\"1\":{\"80\":1}}],[\"steps\",{\"1\":{\"78\":1}}],[\"still\",{\"1\":{\"54\":1}}],[\"strip\",{\"0\":{\"96\":1},\"1\":{\"96\":4}}],[\"string2\",{\"1\":{\"99\":2}}],[\"string1\",{\"1\":{\"99\":2}}],[\"string\",{\"0\":{\"74\":1,\"75\":1,\"80\":1,\"81\":1,\"103\":1},\"1\":{\"40\":5,\"41\":3,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"54\":1,\"62\":1,\"72\":1,\"73\":4,\"74\":1,\"77\":3,\"78\":11,\"79\":3,\"80\":9,\"82\":3,\"83\":3,\"84\":3,\"85\":2,\"86\":5,\"87\":5,\"88\":5,\"89\":7,\"90\":3,\"91\":7,\"92\":13,\"93\":3,\"94\":3,\"95\":5,\"96\":9,\"97\":3,\"98\":3,\"99\":4,\"100\":6,\"101\":6,\"102\":6,\"103\":9}}],[\"strings\",{\"0\":{\"39\":1,\"41\":1,\"71\":1,\"72\":1,\"73\":1},\"1\":{\"32\":1,\"41\":2,\"51\":1,\"103\":2}}],[\"str\",{\"0\":{\"39\":1},\"1\":{\"40\":2,\"103\":3}}],[\"style\",{\"0\":{\"26\":1}}],[\"status\",{\"1\":{\"48\":3}}],[\"static\",{\"1\":{\"32\":1}}],[\"statement\",{\"1\":{\"22\":1}}],[\"statements\",{\"0\":{\"22\":1}}],[\"starting\",{\"1\":{\"74\":1,\"80\":1}}],[\"start\",{\"1\":{\"1\":1,\"31\":1,\"32\":1,\"77\":2,\"78\":2,\"79\":1}}],[\"startswith\",{\"0\":{\"86\":1},\"1\":{\"86\":2}}],[\"starts\",{\"1\":{\"0\":1,\"21\":1,\"41\":2,\"44\":2,\"47\":2,\"86\":1}}],[\"stored\",{\"1\":{\"48\":3}}],[\"store\",{\"1\":{\"21\":1,\"32\":1,\"48\":2,\"73\":1}}],[\"studentcoder\",{\"1\":{\"103\":1}}],[\"student\",{\"1\":{\"0\":1,\"21\":3}}],[\"py\",{\"1\":{\"103\":1}}],[\"pycharm\",{\"1\":{\"103\":1}}],[\"python\",{\"0\":{\"107\":1,\"109\":1},\"1\":{\"27\":2,\"31\":3,\"32\":13,\"44\":2,\"47\":1,\"51\":2,\"62\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"73\":2,\"103\":1},\"2\":{\"16\":1,\"33\":1,\"57\":1,\"69\":1,\"104\":1}}],[\"pure\",{\"1\":{\"91\":1,\"92\":1,\"95\":1}}],[\"put\",{\"1\":{\"21\":1}}],[\"ps\",{\"1\":{\"77\":1,\"78\":1}}],[\"p\",{\"1\":{\"68\":13}}],[\"perform\",{\"1\":{\"100\":1,\"101\":1}}],[\"person\",{\"1\":{\"48\":3}}],[\"people\",{\"1\":{\"22\":3}}],[\"platform\",{\"1\":{\"48\":1}}],[\"placed\",{\"1\":{\"41\":1}}],[\"problem\",{\"1\":{\"103\":1}}],[\"provided\",{\"1\":{\"67\":1,\"92\":1,\"100\":1,\"101\":1}}],[\"product\",{\"1\":{\"66\":5}}],[\"program\",{\"1\":{\"22\":1,\"44\":1,\"47\":1}}],[\"practice\",{\"0\":{\"62\":1}}],[\"precision\",{\"1\":{\"60\":2}}],[\"priority\",{\"1\":{\"60\":2}}],[\"prints\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"printed\",{\"0\":{\"25\":1}}],[\"printing\",{\"0\":{\"24\":1}}],[\"print\",{\"0\":{\"23\":1},\"1\":{\"1\":1,\"24\":2,\"25\":1,\"27\":1,\"29\":1,\"30\":1,\"32\":4,\"38\":10,\"40\":5,\"43\":5,\"46\":5,\"50\":5,\"53\":5,\"54\":2,\"56\":2,\"62\":1,\"63\":12,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":6,\"74\":1,\"76\":4,\"77\":1,\"78\":3,\"79\":2,\"80\":5,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"91\":2,\"92\":4,\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":3}}],[\"positive\",{\"1\":{\"80\":4}}],[\"positions\",{\"1\":{\"80\":1}}],[\"position\",{\"1\":{\"80\":1}}],[\"posts\",{\"1\":{\"48\":2}}],[\"power\",{\"0\":{\"67\":1},\"1\":{\"67\":5}}],[\"points\",{\"1\":{\"21\":3}}],[\"pocula\",{\"1\":{\"0\":1}}],[\"parameter\",{\"1\":{\"99\":1,\"100\":2,\"101\":1}}],[\"para\",{\"1\":{\"73\":1,\"74\":2,\"76\":6,\"77\":2}}],[\"paragraph\",{\"1\":{\"73\":1}}],[\"part\",{\"1\":{\"61\":1}}],[\"patterns\",{\"1\":{\"60\":1}}],[\"pass\",{\"1\":{\"31\":1,\"48\":1}}],[\"paste\",{\"1\":{\"1\":1}}],[\"paper\",{\"1\":{\"21\":2}}],[\"page\",{\"0\":{\"0\":1}}],[\"especially\",{\"1\":{\"103\":1}}],[\"equivalent\",{\"1\":{\"64\":6}}],[\"equal\",{\"1\":{\"63\":4,\"68\":3}}],[\"e\",{\"1\":{\"62\":1}}],[\"error\",{\"1\":{\"54\":1,\"62\":1,\"90\":1}}],[\"event\",{\"1\":{\"54\":1}}],[\"everything\",{\"1\":{\"73\":2}}],[\"every\",{\"1\":{\"48\":1,\"54\":1}}],[\"earliest\",{\"1\":{\"73\":1}}],[\"early\",{\"1\":{\"51\":1}}],[\"each\",{\"1\":{\"21\":4,\"24\":1,\"32\":2,\"41\":1,\"44\":1,\"47\":1,\"85\":1,\"103\":1}}],[\"empty\",{\"1\":{\"32\":1}}],[\"ellipsis\",{\"1\":{\"80\":1}}],[\"elements\",{\"1\":{\"44\":1,\"47\":1,\"92\":1}}],[\"element\",{\"1\":{\"41\":2,\"44\":2,\"47\":2,\"54\":1}}],[\"elected\",{\"1\":{\"22\":1}}],[\"elder\",{\"1\":{\"32\":4}}],[\"else\",{\"1\":{\"31\":1,\"68\":2}}],[\"elif\",{\"1\":{\"31\":1,\"68\":2}}],[\"extraction\",{\"1\":{\"80\":1}}],[\"extract\",{\"1\":{\"79\":1}}],[\"extra\",{\"1\":{\"48\":1}}],[\"extended\",{\"1\":{\"1\":1}}],[\"exercise\",{\"1\":{\"67\":1}}],[\"exercises\",{\"0\":{\"32\":1}}],[\"execution\",{\"1\":{\"41\":1,\"44\":1,\"47\":1}}],[\"exclusive\",{\"1\":{\"32\":2}}],[\"excluding\",{\"1\":{\"1\":1}}],[\"exchange\",{\"1\":{\"32\":1}}],[\"except\",{\"1\":{\"31\":1}}],[\"explicitly\",{\"1\":{\"103\":1}}],[\"exploring\",{\"0\":{\"23\":1}}],[\"exponentiation\",{\"1\":{\"61\":1}}],[\"expression\",{\"1\":{\"22\":3}}],[\"expand\",{\"1\":{\"21\":1}}],[\"exam\",{\"1\":{\"21\":2}}],[\"example\",{\"0\":{\"21\":1,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"56\":1},\"1\":{\"44\":1,\"47\":1,\"51\":1,\"54\":2,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"examples\",{\"0\":{\"19\":1,\"38\":1},\"1\":{\"63\":1}}],[\"encountered\",{\"1\":{\"96\":1}}],[\"encapsulate\",{\"1\":{\"73\":1}}],[\"entire\",{\"1\":{\"82\":1,\"83\":1}}],[\"entered\",{\"1\":{\"41\":1,\"73\":1}}],[\"enter\",{\"1\":{\"31\":1}}],[\"enough\",{\"1\":{\"48\":2}}],[\"en\",{\"1\":{\"32\":1}}],[\"english\",{\"1\":{\"31\":1,\"67\":1,\"92\":1}}],[\"engineering\",{\"0\":{\"106\":1,\"108\":1},\"1\":{\"0\":1}}],[\"envelope\",{\"1\":{\"21\":3}}],[\"ends\",{\"1\":{\"87\":1,\"96\":2}}],[\"endswith\",{\"0\":{\"87\":1},\"1\":{\"87\":2}}],[\"end=\",{\"1\":{\"27\":1}}],[\"ending\",{\"0\":{\"26\":1}}],[\"end\",{\"0\":{\"26\":1,\"27\":1},\"1\":{\"1\":1,\"77\":3,\"78\":3,\"79\":2}}],[\"et\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2},\"/zh/\":{\"documentCount\":110,\"nextId\":110,\"documentIds\":{\"0\":\"v-858cfdd6\",\"1\":\"v-1844fccf\",\"2\":\"v-1844fccf#_1-文章标题\",\"3\":\"v-1844fccf#_2-代码\",\"4\":\"v-1844fccf#_3-图片\",\"5\":\"v-1844fccf#_4-有序标题和无序标题-任务列表\",\"6\":\"v-1844fccf#_5-信息框-提示容器\",\"7\":\"v-1844fccf#_6-链接\",\"8\":\"v-1844fccf#_7-下划线\",\"9\":\"v-1844fccf#_8-对齐\",\"10\":\"v-1844fccf#_9-公式\",\"11\":\"v-1844fccf#_10-多媒体\",\"12\":\"v-1844fccf@0\",\"13\":\"v-1844fccf@1\",\"14\":\"v-971efe90\",\"15\":\"v-971efe90@0\",\"16\":\"v-971efe90@1\",\"17\":\"v-0ca6d0c8\",\"18\":\"v-0ca6d0c8#_1-理解变量——生活中的例子\",\"19\":\"v-0ca6d0c8#_1-1-从字面意思去理解\",\"20\":\"v-0ca6d0c8#_1-2-举个例子🌰\",\"21\":\"v-0ca6d0c8#_2-如何创建变量——赋值语句\",\"22\":\"v-0ca6d0c8#_3-探究-print\",\"23\":\"v-0ca6d0c8#_3-1-同时输出多个数据\",\"24\":\"v-0ca6d0c8#_3-2-sep-修改多个变量同时输出的间隔\",\"25\":\"v-0ca6d0c8#_3-3-end-修改-print-输出结尾方式\",\"26\":\"v-0ca6d0c8#_3-4-end-和-sep-可以同时使用\",\"27\":\"v-0ca6d0c8#_4-进阶的赋值方法\",\"28\":\"v-0ca6d0c8#_4-1-多个变量同时赋予相同的值\",\"29\":\"v-0ca6d0c8#_4-2-多个变量同时赋予不同的值\",\"30\":\"v-0ca6d0c8#_5-变量的命名规则\",\"31\":\"v-0ca6d0c8#_6-练习\",\"32\":\"v-0ca6d0c8@0\",\"33\":\"v-0ca6d0c8@1\",\"34\":\"v-3fb79b75\",\"35\":\"v-3fb79b75#数据类型\",\"36\":\"v-3fb79b75#_1-数字型-int-float\",\"37\":\"v-3fb79b75#_1-1-代码示例\",\"38\":\"v-3fb79b75#_2-字符串-str\",\"39\":\"v-3fb79b75#_2-1-代码示例\",\"40\":\"v-3fb79b75#_2-2-字符串的三大特性\",\"41\":\"v-3fb79b75#_3-列表-list\",\"42\":\"v-3fb79b75#_3-1-代码示例\",\"43\":\"v-3fb79b75#_3-2-列表的三大特性\",\"44\":\"v-3fb79b75#_4-元组-tuple\",\"45\":\"v-3fb79b75#_4-1-代码示例\",\"46\":\"v-3fb79b75#_4-2-元组的三大特性\",\"47\":\"v-3fb79b75#_4-3-元组vs列表\",\"48\":\"v-3fb79b75#_5-字典-dict\",\"49\":\"v-3fb79b75#_5-1-代码示例\",\"50\":\"v-3fb79b75#_5-2-字典的特性\",\"51\":\"v-3fb79b75#_6-集合-set\",\"52\":\"v-3fb79b75#_6-1-代码示例\",\"53\":\"v-3fb79b75#_6-2-集合的特性\",\"54\":\"v-3fb79b75#_7-布尔型-bool\",\"55\":\"v-3fb79b75#_7-1-代码示例\",\"56\":\"v-3fb79b75@0\",\"57\":\"v-3fb79b75@1\",\"58\":\"v-151f8240\",\"59\":\"v-151f8240#_1-数字型的特点\",\"60\":\"v-151f8240#_2-算术运算符\",\"61\":\"v-151f8240#_3-小试牛刀-数字变换\",\"62\":\"v-151f8240#_4-比较运算符-比较值的大小\",\"63\":\"v-151f8240#_5-赋值运算符\",\"64\":\"v-151f8240#_7-练习\",\"65\":\"v-151f8240#_7-1-选择题\",\"66\":\"v-151f8240#_7-2-填空\",\"67\":\"v-151f8240#_7-3-编程题\",\"68\":\"v-151f8240#_7-3-1-数字和与差\",\"69\":\"v-151f8240#_7-3-2-数字的乘法和除法\",\"70\":\"v-151f8240#_7-3-3-求余和幂运算\",\"71\":\"v-151f8240#_7-3-4-比较运算\",\"72\":\"v-151f8240@0\",\"73\":\"v-151f8240@1\",\"74\":\"v-2d71366a\",\"75\":\"v-2d71366a#_1-字符串的定义\",\"76\":\"v-2d71366a#_2-创建字符串\",\"77\":\"v-2d71366a#_3-字符串长度\",\"78\":\"v-2d71366a#_4-字符串中的字符获取\",\"79\":\"v-2d71366a#_4-1-获取单个字符\",\"80\":\"v-2d71366a#_4-2-获取一串连续字符\",\"81\":\"v-2d71366a#_4-3-获取多个不连续字符\",\"82\":\"v-2d71366a#_4-4-优化\",\"83\":\"v-2d71366a#_4-5-字符串倒序\",\"84\":\"v-2d71366a#_5-字符串的内置方法\",\"85\":\"v-2d71366a#_5-1-upper\",\"86\":\"v-2d71366a#_5-2-lower\",\"87\":\"v-2d71366a#_5-3-capitalize\",\"88\":\"v-2d71366a#_5-4-title\",\"89\":\"v-2d71366a#_5-5-startswith\",\"90\":\"v-2d71366a#_5-6-endswith\",\"91\":\"v-2d71366a#_5-7-count\",\"92\":\"v-2d71366a#_5-8-find\",\"93\":\"v-2d71366a#_5-9-index\",\"94\":\"v-2d71366a#_5-10-isdigit\",\"95\":\"v-2d71366a#_5-11-isalpha\",\"96\":\"v-2d71366a#_5-12-isalnum\",\"97\":\"v-2d71366a#_5-13-isupper\",\"98\":\"v-2d71366a#_5-14-islower\",\"99\":\"v-2d71366a#_5-15-isspace\",\"100\":\"v-2d71366a#_5-16-strip\",\"101\":\"v-2d71366a#_5-17-lstrip\",\"102\":\"v-2d71366a#_5-18-rstrip\",\"103\":\"v-2d71366a#_5-19-replace\",\"104\":\"v-2d71366a#_5-20-split\",\"105\":\"v-2d71366a#_5-21-rsplit\",\"106\":\"v-2d71366a#_5-22-join\",\"107\":\"v-2d71366a#_6-字符串格式化\",\"108\":\"v-2d71366a@0\",\"109\":\"v-2d71366a@1\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,7],\"1\":[2,25],\"2\":[2],\"3\":[2],\"4\":[2],\"5\":[3],\"6\":[3],\"7\":[2],\"8\":[2],\"9\":[2],\"10\":[2],\"11\":[2],\"12\":[null,null,2],\"13\":[null,null,2],\"14\":[4],\"15\":[null,null,1],\"16\":[null,null,2],\"17\":[1],\"18\":[3],\"19\":[2,4],\"20\":[3,48],\"21\":[3,31],\"22\":[3],\"23\":[3,18],\"24\":[4,12],\"25\":[5],\"26\":[6,14],\"27\":[2],\"28\":[3,8],\"29\":[3,10],\"30\":[2,61],\"31\":[2,137],\"32\":[null,null,1],\"33\":[null,null,2],\"34\":[1],\"35\":[1,2],\"36\":[5],\"37\":[2,21],\"38\":[4],\"39\":[3,16],\"40\":[2,23],\"41\":[4],\"42\":[3,24],\"43\":[3,29],\"44\":[4],\"45\":[3,24],\"46\":[3,25],\"47\":[3,80],\"48\":[4],\"49\":[3,24],\"50\":[3,32],\"51\":[4],\"52\":[3,20],\"53\":[3,48],\"54\":[4],\"55\":[3,11],\"56\":[null,null,1],\"57\":[null,null,2],\"58\":[1],\"59\":[2,26],\"60\":[2,25],\"61\":[3,50],\"62\":[3,26],\"63\":[2,22],\"64\":[2],\"65\":[3,49],\"66\":[3,34],\"67\":[3,6],\"68\":[5,28],\"69\":[4,25],\"70\":[3,30],\"71\":[4,33],\"72\":[null,null,1],\"73\":[null,null,2],\"74\":[1],\"75\":[2,5],\"76\":[2,48],\"77\":[2,13],\"78\":[2],\"79\":[3,16],\"80\":[3,30],\"81\":[3,32],\"82\":[2,15],\"83\":[3,41],\"84\":[2],\"85\":[4,9],\"86\":[4,9],\"87\":[4,9],\"88\":[4,15],\"89\":[3,15],\"90\":[4,15],\"91\":[4,15],\"92\":[4,24],\"93\":[4,23],\"94\":[4,13],\"95\":[4,13],\"96\":[4,14],\"97\":[4,12],\"98\":[4,12],\"99\":[4,13],\"100\":[4,15],\"101\":[4,11],\"102\":[4,11],\"103\":[4,21],\"104\":[4,29],\"105\":[4,27],\"106\":[4,22],\"107\":[2,69],\"108\":[null,null,1],\"109\":[null,null,2]},\"averageFieldLength\":[2.9713449362405275,22.987629860776586,0.5699074512461938],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"剑桥大学工程系\",\"“Hinc lucem et pocula sacra.”\",\"纪录由此开始\"]},\"1\":{\"h\":\"Typora guide\",\"t\":[\"文件名不要使用中文\",\"用减号代替空格\",\"文章内开始第一行要打三个- - -\",\"标题 两个井号空格 或者三个井号空格 一共有2-6号标题 除去文章title\",\"三个冒号+md-demo 拓展开始 三个冒号结束\",\"输入代码 ```python 再开始打\",\"插入图片 复制粘贴 会自动生成文件夹 assests\",\"生成链接 [链接名]+(链接)\"]},\"2\":{\"h\":\"1. 文章标题\"},\"3\":{\"h\":\"2. 代码\"},\"4\":{\"h\":\"3. 图片\"},\"5\":{\"h\":\"4. 有序标题和无序标题, 任务列表\"},\"6\":{\"h\":\"5. 信息框/提示容器\"},\"7\":{\"h\":\"6. 链接\"},\"8\":{\"h\":\"7. 下划线\"},\"9\":{\"h\":\"8. 对齐\"},\"10\":{\"h\":\"9. 公式\"},\"11\":{\"h\":\"10. 多媒体\"},\"12\":{\"c\":[\"Web design\"]},\"13\":{\"c\":[\"web\",\"typora\"]},\"14\":{\"h\":\"CUEA mentoring session 1\"},\"15\":{\"c\":[\"Python\"]},\"16\":{\"c\":[\"web\",\"typora\"]},\"17\":{\"h\":\"变量\"},\"18\":{\"h\":\"1. 理解变量——生活中的例子\"},\"19\":{\"h\":\"1.1 从字面意思去理解\",\"t\":[\"变：变化\",\"量：大小\"]},\"20\":{\"h\":\"1.2 举个例子🌰\",\"t\":[\"假如，你是班级当中的课代表，每个月需要统计班级中每个学生的月考成绩。月考成绩会每个月一张纸，每张纸上都会依次记录每个学生的成绩越到成绩，例如：\",\"李雷 98分\",\"马冬梅 89分\",\"刘奕彤 96分\",\"......\",\"某一天，老师要看刘奕彤 1月、2月、3月的成绩，这个时候作为课代表的你需要怎么办。——总不能直接把每个月的月考成绩单直接给老师，显然是不合适的。\",\"我们应该把刘奕彤 1月、2月、3月的成绩抄写到单独的一张纸上，接着给老师。\",\"那么，我们为什么不一开始直接为每一个学生分配一个信封呢？（也可以是档案袋）信封在一开始是扁的，当我们放东西（数据）进去之后，是不是鼓起来了？——是不是变化了？是不是有大小了呢？显然是的。\",\"那么信封，是不是在我们当前所处的空间当中开辟空间，来存放数据并且说这是信封。\",\"类似的有：冰箱，不也是在我们当前所处的空间中，开辟空间。\",\"——所以，变量不就是在计算机的内存当中开辟空间，来存储数据。\",\"特点： 变量的值会被覆盖，只会记着最后一个值。\"]},\"21\":{\"h\":\"2. 如何创建变量——赋值语句\",\"t\":[\"变量：通过变量名代表或引用某个值。\",\"女娲捏了泥人，泥人没有生命，女娲挥了挥手柳条，赋予给泥人生命。此时，泥人可以代表说是女娲的后人。「变量：泥人，值：女娲」\",\"全国人民代表大会，中的人大代表，是由广大人民群众投票选举出来的。他们的权利不是自己获取的，所以他们可以说：我代表的是广大人民群众的意志。「变量：人大代表，值：人民群众」\",\"初始化赋值语句: 变量名 = 表达式\",\"变量名：就是这个空间，我们叫它什么名字；\",\"表达式：类似数学表达；\",\"程序的运行逻辑：从上到下，从右到左，最后才是赋值。\"]},\"22\":{\"h\":\"3. 探究 print\"},\"23\":{\"h\":\"3.1 同时输出多个数据\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c) # ---output--- 1 2 3 \",\"从输出的结果可以看出，print 同时输出多个变量，每个值之间默认以空格间隔。\",\"那么，我们可以修改这个默认空格间隔么？——答案显然是可以的。\",\"使用 sep。\"]},\"24\":{\"h\":\"3.2 sep 修改多个变量同时输出的间隔\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c, sep=' 间隔 ') # ---output--- 1 间隔 2 间隔 3 \"]},\"25\":{\"h\":\"3.3 end 修改 print 输出结尾方式\"},\"26\":{\"h\":\"3.4 end 和 sep 可以同时使用\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep=\\\"~\\\", end=\\\" love Python\\\") # ---output--- 1~1~1 love Python \"]},\"27\":{\"h\":\"4. 进阶的赋值方法\"},\"28\":{\"h\":\"4.1 多个变量同时赋予相同的值\",\"t\":[\"a = b = c = 1 print(a, b, c) # ---output--- 1 1 1 \"]},\"29\":{\"h\":\"4.2 多个变量同时赋予不同的值\",\"t\":[\"a, b, c = 1, 2, 3 print(a, b, c) # ---output--- 1 2 3 \"]},\"30\":{\"h\":\"5. 变量的命名规则\",\"t\":[\"大小写英文、数字和 _ 的结合，且不能用数字开头；\",\"系统关键词不能做变量名使用「获取关键词列表：help('keywords')\",\"Python 中的变量名区分大小写；\",\"变量名不能包含空格，但是可以使用下划线来分隔其中的单词；\",\"不要使用 Python 的内置函数名称做变量；\",\"Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not \"]},\"31\":{\"h\":\"6. 练习\",\"t\":[\"在 Python 中，变量名可以以数字开始。\",\"[ ] 对\",\"[x] 错\",\"在 Python 中，以下哪个变量名是有效的？\",\"[ ] 2myVar\",\"[x] myVar2\",\"[ ] my-var\",\"[ ] my var\",\"在Python中，变量名区分大小写。\",\"[x] 对\",\"[ ] 错\",\"在Python中，my_var 和 myVar 是同一个变量。\",\"[ ] 对\",\"[x] 错\",\"变量名可以是 Python 中的关键字。\",\"[ ] 对\",\"[x] 错\",\"None 是Python中的特殊类型，表示没有值或空值。\",\"[x] 对\",\"[ ] 错\",\"在Python中，以下哪个是有效的变量赋值？\",\"[ ] 123abc = \\\"hello\\\"\",\"[ ] for = \\\"world\\\"\",\"[x] _hidden = \\\"secret\\\"\",\"[ ] import = 123\",\"在Python中，一个变量可以同时被赋予多个值。\",\"[ ] 对\",\"[x] 错\",\"在Python中，以下哪个是多变量赋值？\",\"[x] a, b, c = 1, 2, 3\",\"[ ] a = 1, b = 2, c = 3\",\"[ ] a; b; c = 1; 2; 3\",\"[ ] a = 1; b = 2; c = 3;\",\"变量在使用之前必须被赋值。\",\"[x] 对\",\"[ ] 错\",\"Python中变量的类型是静态的，一旦赋值就不能改变。\",\"[ ] 对\",\"[x] 错\",\"在Python中，以下哪个表示全局变量？\",\"[ ] var = \\\"hello\\\"\",\"[ ] global var ✅\",\"[x] var(global) ❌\",\"[ ] def var():\",\"以下哪个表示删除变量？\",\"[ ] delete x\",\"[ ] del x ✅\",\"[x] remove x ❌\",\"[ ] destroy x\",\"x = 5 之后 y = x，现在改变 y 的值，x 的值也会改变。\",\"[ ] 对\",\"[x] 错\",\"x = [1, 2, 3] 之后 y = x，现在改变 y 的列表内容，x 的内容也会改变。\",\"[ ] 对 ✅\",\"[x] 错 ❌\",\"在Python中，变量只能存储基本数据类型的值，如整数或字符串。\",\"[ ] 对\",\"[x] 错\",\"交换果汁\",\"假如你有两个小孩，哥哥叫：Austin，弟弟叫：Jaden。\",\"Austin 想喝果汁，Jaden 想喝可乐。哥哥和弟弟都有专属的杯子，不喜欢用对方的杯子。\",\"家中仅剩一杯果汁、一杯可乐，你不小心把哥哥的杯子装了可乐，弟弟的杯子装了果汁。\",\"问：如何交换哥哥与弟弟杯中的果汁？\",\"zh\",\"Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don't like to use each other's cups. There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother's cup with cola and the younger brother's cup with juice. How can you swap the juice in the brothers' cups?\",\"警告！！！\",\"不要出现如下方法！！！\",\"Austin = \\\"Coke\\\" Jaden = \\\"juice\\\" print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) # 待补充代码 print(\\\"Austin\\\", Jaden) print(\\\"Jaden\\\", Austin) \",\"创建变量并输出\",\"输出效果：\",\"Austin Jaden Alex Cava \",\"输出效果如下：\",\"Austin$Jaden$Alex$Cava% \"]},\"32\":{\"c\":[\"Python\"]},\"33\":{\"c\":[\"web\",\"typora\"]},\"34\":{\"h\":\"数据类型\"},\"35\":{\"h\":\"数据类型\",\"t\":[\"image-20231217084933264\"]},\"36\":{\"h\":\"1. 数字型 [int, float]\"},\"37\":{\"h\":\"1.1 代码示例\",\"t\":[\"整型\",\"int_num = 1 t = type(int_num) # check data type print(int_num) print(\\\"int num type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output 1 int num type is:>>> <class 'int'> 直接检测数据类型，并输出:>>> <class 'int'> \",\"浮点数\",\"float_num = 1.5 t = type(float_num) # check data type print(float_num) print(\\\"float num type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output 1.5 float num type is:>>> <class 'float'> 直接检测数据类型，并输出:>>> <class 'float'> \"]},\"38\":{\"h\":\"2. 字符串 [str]\"},\"39\":{\"h\":\"2.1 代码示例\",\"t\":[\"string = \\\"Hello Alexa\\\" t = type(string) print(string) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output Hello Alexa string type is:>>> <class 'str'> 直接检测数据类型，并输出:>>> <class 'str'> \"]},\"40\":{\"h\":\"2.2 字符串的三大特性\",\"t\":[\"有序性 \",\"从左到右，下标从0开始\",\"从右到左，下标从-1开始\",\"引号里面出现的都算一个下标\",\"不可变性 \",\"字符串被创建出来之后就不能改变\",\"注意⚠️：我们说的不可变，是在代码运行的过程当中，不能对字符串修改，添加，删除\",\"任意字符 \",\"键盘上可以输入的字符，都可以是字符串的元素\",\"字符放到字符串中，都将成为字符串的类型，也就是里面的每一个元素都可以被称为「子字符」\"]},\"41\":{\"h\":\"3. 列表 [list]\"},\"42\":{\"h\":\"3.1 代码示例\",\"t\":[\"lst = [\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False] t = type(lst) print(lst) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output ['Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False] string type is:>>> <class 'list'> 直接检测数据类型，并输出:>>> <class 'list'> \"]},\"43\":{\"h\":\"3.2 列表的三大特性\",\"t\":[\"有序性 \",\"从左到右，下标从0开始\",\"从右到左，下标从-1开始\",\"列表里面每个元素算一个 \",\"比如: lst = [“alexa”, 12]\",\"上面lst有两个元素，下标分别是： \",\"“alexa”, 从左到右0，从右到左-1\",\"12, 从左到右1，从右到左-1\",\"可变性：在程序运行的过程当中，列表可以「添加，改变，删除」\",\"任意数据类型：python拥有的所有数据类型都可以作为元素之一\",\"Python所拥有的所有数据类型「仅包含基础数据类型」\",\"image-20231217084933264\"]},\"44\":{\"h\":\"4. 元组 [tuple]\"},\"45\":{\"h\":\"4.1 代码示例\",\"t\":[\"tup = (\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False) t = type(tup) print(tup) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output ('Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False) string type is:>>> <class 'tuple'> 直接检测数据类型，并输出:>>> <class 'tuple'> \"]},\"46\":{\"h\":\"4.2 元组的三大特性\",\"t\":[\"有序性 \",\"从左到右，下标从0开始\",\"从右到左，下标从-1开始\",\"元组里面每个元素算一个 \",\"比如: tup = (“alexa”, 12)\",\"上面tup有两个元素，下标分别是： \",\"“alexa”, 从左到右0，从右到左-1\",\"12, 从左到右1，从右到左-1\",\"不可变性：在程序运行的过程当中，元组不可以「添加，改变，删除」\",\"任意数据类型：python拥有的所有数据类型都可以作为元素之一\"]},\"47\":{\"h\":\"4.3 元组VS列表\",\"t\":[\"为什么🧐有列表后，还需要元组\",\"列表和元组到底用哪一个呢？\",\"如果存储的数据或数量是可变的，比如社交平台上的一个日志功能，是统计一个用户在一周之内看了哪些用户的帖子——那么则用列表更合适。\",\"如果存储的数据和数量不变，比如你有一个系统（软件），需要返回的是一个地点的经纬度，然后直接传给用户查看——那么肯定选用元组更合适。\",\"假设\",\"假设1：现在有一个仓库，你要向仓库添加物品。仓库很大，现有的物品也很多，你不知道还有没有位置可以存放。此时我们是不是需要聘请一个仓库管理员，这样我们就可以直接问仓库管理员：里面还有哪个位置（是否有位置？）仓库管理员会告诉你，并且你可以直接把你的物品，添加进去。\",\"问题来了，仓库管理员为什么知道仓库是否有位置？——因为仓库管理员会一直跟踪这个仓库的状态；\",\"假设2：现在有一个原子弹的仓库，仓库创建之后，只能存放一个原子弹。那么，我们需要设立一个专门的人员跟踪：原子弹仓库的状态吗？——不需要，此时在聘请一个就显得浪费了。（不然，领导没油水了～hhhhh）\",\"Why？\",\"用户日志📔，是不是会一直变动（记录📝看了哪些帖子），我们是不是需要有一个类似仓库管理员的“人”，来跟踪并且知道：是否有位置（是否有空间/内存），还需要知道在哪里添加。——列表更合适，因为列表可变。「可变意味着：添加、删除、修改」 \",\"元组为什么不合适？——因为，你每当需要添加数据的时候，就得重新创建一个新的元组。（就类似于：你创建原子弹的仓库，肯定是刚刚好可以存放一个，那么你想存放两个的时候，只能重新再创建一个仓库。）\",\"经纬度会改变吗？显然是不会的，那么就不需要一个多余的“人”去跟踪状态。——用列表可以吗？可以！但是没必要。「因为我们不需要仓库管理员」用列表有点浪费资源了。元组的功能刚刚好够用。\",\"我们讲究：不浪费，合适就好。\"]},\"48\":{\"h\":\"5. 字典 [dict]\"},\"49\":{\"h\":\"5.1 代码示例\",\"t\":[\"d = {\\\"name\\\": \\\"alexa\\\", \\\"age\\\": 18, 1: \\\"int\\\", 1.1: 1, \\\"tup\\\": (1, 2, 3)} t = type(d) print(d) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output {'name': 'alexa', 'age': 18, 1: 'int', 1.1: 1, 'tup': (1, 2, 3)} string type is:>>> <class 'dict'> 直接检测数据类型，并输出:>>> <class 'dict'> \"]},\"50\":{\"h\":\"5.2 字典的特性\",\"t\":[\"无序性 「python 3.6+ 之后右序」 \",\"先以无序理解即可\",\"有些前期基本用不到\",\"字典的组成：是由一系列的 key 和 value 组成 d = {\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\",\"Key: \",\"不可变的数据类型才可以当做数据的 key\",\"比如：字符串，数字，布尔，元组\",\"value：任意数据类型，python 所拥有的所有数据类型\",\"可变性：可以添加，删改 key 对应的 value\"]},\"51\":{\"h\":\"6. 集合 [set]\"},\"52\":{\"h\":\"6.1 代码示例\",\"t\":[\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} t = type(set1) print(set1) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} string type is:>>> <class 'set'> 直接检测数据类型，并输出:>>> <class 'set'> \"]},\"53\":{\"h\":\"6.2 集合的特性\",\"t\":[\"无序性：集合是没有顺序的，也就是没有下标\",\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} print(set1) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} \",\"运行之后顺序可能和输入的顺序不一样\",\"注意\",\"如果你运行集合很多次，或者其中某一次，集合顺序没有改变，我们也不能说集合是有序的。\",\"Why？你掷骰子，500次都是 6 点，你能说掷骰子是确定性事件吗？——显然是不行的🙅。\",\"确定性：\",\"集合的每一个值都是确定的，也就是「需要不可变的数据类型」\",\"比如：布尔型，数字，元组，字符串\",\"举个例子：为什么列表不行 — 列表可变，具有不确定性\",\"互异性：出现重复的不会报错，会自动去掉重复的\",\"set2 = {1, 1, 1, 2, 2, 3} print(set2) # output {1, 2, 3} \",\"可变性：可以对集合添加，删除数据，但是不能修改输出 「注意：删除是无法指定下标的删除元素」\"]},\"54\":{\"h\":\"7. 布尔型 [bool]\"},\"55\":{\"h\":\"7.1 代码示例\",\"t\":[\"condition = True # False print(condition) print(type(condition)) # output True <class 'bool'> \"]},\"56\":{\"c\":[\"Python\"]},\"57\":{\"c\":[\"web\",\"typora\"]},\"58\":{\"h\":\"数字型\"},\"59\":{\"h\":\"1. 数字型的特点\",\"t\":[\"image-20231218084943233\",\"In [2]: 1+1 Out[2]: 2 In [3]: 1+1.0 Out[3]: 2.0 In [4]: 9-1 Out[4]: 8 In [5]: 9-1.0 Out[5]: 8.0 In [6]: 2*2 Out[6]: 4 In [7]: 2*2.0 Out[7]: 4.0 In [8]: 9/3 Out[8]: 3.0 In [9]: # 如果输入中有一个数是float 最后的结果就是float 「优先级最高」 In [10]: # 除法涉及精度问题，所以最后得到浮点数 \",\"规律\",\"如果其中有一个浮点数，结果就会得到浮点数「优先级最高」\",\"除法涉及精度问题，所以最后的结果类型：就是浮点数\"]},\"60\":{\"h\":\"2. 算术运算符\",\"t\":[\"算术运算符： 用于算术计算。\",\"运算符\",\"描述\",\"例子\",\"+\",\"加法运算符\",\"1 + 1 = 2\",\"-\",\"减法运算符\",\"2 - 1 = 1\",\"*\",\"乘法运算符\",\"2 * 3 = 6\",\"/\",\"除法运算符\",\"9 / 3 = 3.0\",\"**\",\"指数运算符\",\"2 ** 3 = 8\",\"%\",\"取余运算符，计算余数\",\"9 % 2 = 1\",\"//\",\"除法取整运算符，计算商并去除其小数部分\",\"9 // 2 = 4\",\"tips: 9 / 2 = 4......1\"]},\"61\":{\"h\":\"3. 小试牛刀：数字变换\",\"t\":[\"假设你有一个两位的整数，我们需要通过以下规则产生两个新的数字：\",\"第一个新数字是原数字的两位数中的各个数字的和；\",\"第二个新数字是原数字的反转（如原数字为 21，反转后的数字为 12）。\",\"请你编写 Python 代码，实现以上要求。\",\"a = 12 a0 = a // 10 a1 = a % 10 b = a0 + a1 c = 10 * a1 + a0 print(b, c) # output 3 21 \",\"输入：\",\"一个整数 num （10 ≤ num ≤ 99）\",\"输出：\",\"两个整数，或者一个错误信息字符串。\",\"示例：\",\"假设输入的数字 num 为 91，那么你的代码应当输出两个数字：10（9和1的和）和19（91的反转）。\",\"假设输入的数字 num 为 26，那么你的代码应当输出两个数字：8（2和6的和）和62（26的反转）。\",\"假设输入的数字 num 为 18，那么你的代码应当输出两个数字：9（1和8的和）和81（18的反转）。\"]},\"62\":{\"h\":\"4. 比较运算符：比较值的大小\",\"t\":[\"运算符\",\"描述\",\"例子\",\">\",\"判断第一个运算对象是否大于第二个运算对象\",\"print(1 > 2)\",\"<\",\"判断第一个运算对象是否小于第二个运算对象\",\"print(1 < 2)\",\">=\",\"判断第一个运算对象是否大于或等于第二个运算对象\",\"print(3 >= 3)\",\"<=\",\"判断第一个运算对象是否小于或等于第二个运算对象\",\"print(3 <= 4)\",\"==\",\"判断两个运算对象是否相同\",\"print(2 == 2)\",\"!=\",\"判断两个运算对象是否不相同\",\"print(2 != 1)\",\"试一试上面的例子，看看会输出上面结果？\",\"print(1 > 2) print(1 < 2) print(3 >= 3) print(3 <= 4) print(2 == 2) print(2 != 1) # output False True True True True True \"]},\"63\":{\"h\":\"5. 赋值运算符\",\"t\":[\"运算符\",\"描述\",\"例子\",\"=\",\"把右侧的运算对象赋值给左侧的运算对象\",\"a = 1\",\"+=\",\"a += b 等同于 a = a + b\",\"a += 10\",\"-=\",\"a -= b 等同于 a = a - b\",\"a -= 10\",\"*=\",\"a *= b 等同于 a = a * b\",\"a *= 10\",\"/=\",\"a /= b 等同于 a = a / b\",\"a /= 10\",\"**=\",\"a **= b 等同于 a = a ** b\",\"a **= 10\",\"//=\",\"a //= b 等同于 a = a // b\",\"a //= 10\",\"a = 1 a += 10 a -= 10 a *= 10 a /= 10 a **= 10 a //= 10 print(a) # output 0.0 #除法最后是小数 \",\"a = 4 // 2 #结果整数 b = 4.5 // 2 #结果小数 print(a, b) # output 2, 2.0 \"]},\"64\":{\"h\":\"7. 练习\"},\"65\":{\"h\":\"7.1 选择题\",\"t\":[\"在 Python 中，执行 3.5 + 4 的结果是什么类型？\",\"A. 整数\",\"B. 浮点数 ✅\",\"C. 字符串\",\"D. 布尔值\",\"以下哪个运算符用于取余？\",\"A. +\",\"B. -\",\"C. *\",\"D. % ✅\",\"在 Python 中，执行 9 // 2 的结果是多少？\",\"A. 4.5\",\"B. 4 ✅\",\"C. 5\",\"D. 4.0\",\"1.0 == 1 在 Python 中的结果是什么？\",\"A. True 🙆✅\",\"B. False ✅ ❌\",\"C. 报错\",\"D. 无法确定\",\"2 + 3 * 4 的结果是多少？\",\"A. 20\",\"B. 14 ✅\",\"C. 24\",\"D. 12\",\"在 Python 中，10 / 3 的结果是什么？\",\"A. 3\",\"B. 3.3333 🙆✅\",\"C. 4\",\"D. 3.3 ✅❌\",\"执行 7 // 2 的结果是多少？\",\"A. 3 ✅\",\"B. 3.5\",\"C. 4\",\"D. 2\",\"在 Python 中，以下哪个操作会返回浮点数？\",\"A. 2 * 3\",\"B. 4 + 2\",\"C. 9 / 2 ✅\",\"D. 5 // 2\",\"4 ** 0.5 的结果是多少？\",\"A. 2\",\"B. 4\",\"C. 16\",\"D. 0.5\",\"E. 2.0 ✅\",\"执行 3 >= 3 的结果是什么？\",\"A. True ✅\",\"B. False\",\"C. 报错\",\"D. 无法确定\",\"执行 4 != 4 的结果是什么？\",\"A. True\",\"B. False ✅\",\"C. 报错\",\"D. 无法确定\",\"在 Python 中，5 + 2 * 3 的结果是什么？\",\"A. 21\",\"B. 11 ✅\",\"C. 14\",\"D. 7\",\"执行 6 / 2 的结果是什么类型？\",\"A. 整数\",\"B. 浮点数 ✅\",\"C. 字符串\",\"D. 布尔值\"]},\"66\":{\"h\":\"7.2 填空\",\"t\":[\"在 Python 中，执行 2 ** 3 的结果是 ___8___。\",\"执行表达式 9 % 4 会得到 ___1___ 作为结果。\",\"如果 a = 5，那么执行 a *= 2 之后，a 的值是 ___10___。\",\"在 Python 中，3 == 2.9999 的结果是 ___False___。\",\"执行 5 <= 5 的结果是 ___True___。\",\"如果 b = 3，执行 b /= 2 后，b 的值是 ___1.5___。\",\"执行 4 % 3 的结果是 ___1___。\",\"如果 c = 10，执行 c //= 3 后，c 的值是 ___3___。\",\"在 Python 中，7 == 7.0 的结果是 ___False___。❌True\",\"执行 8 / 2 的结果是 ___4.0___。\"]},\"67\":{\"h\":\"7.3 编程题\",\"t\":[\"提示\",\"测试部分代码，没有任何输出没有报错，则视为作答正确。\",\"但是要编写符合题目要求的输出。\"]},\"68\":{\"h\":\"7.3.1 数字和与差：\",\"t\":[\"编写一段 Python 代码，创建两个数字 a 和 b，计算并打印出它们的和以及 a 减去 b 的结果。\",\"代码模版\",\"a = 10 b = 5 Sum = a + b Difference = a - b print(Sum, Difference) # 测试 assert sum_result == a + b assert difference == a - b \",\"输出示例：\",\"Sum: 8 Difference: 2 \"]},\"69\":{\"h\":\"7.3.2 数字的乘法和除法\",\"t\":[\"编写一段 Python 代码，创建两个数字 x 和 y，计算并打印出它们的乘积和除法结果。\",\"代码模版\",\"x = 10 y = 5 product = x * y division = x / y print(product, division) # 测试 assert product == x * y assert division == x / y \",\"输出示例：\",\"Product: 12 Division: 3.0 \"]},\"70\":{\"h\":\"7.3.3 求余和幂运算\",\"t\":[\"编写一段 Python 代码，创建两个数字 m 和 n，计算并打印出 m 对 n 取余的结果和 m 的 n 次幂。\",\"代码模版\",\"m = 10 n = 5 floor_div = m // n power = m ** n print(floor_div, power) # 测试 assert remainder == m % n assert power == m ** n \",\"输出示例：\",\"Remainder: 1 Power: 81 \"]},\"71\":{\"h\":\"7.3.4 比较运算\",\"t\":[\"编写一段 Python 代码，输入两个数字 p 和 q，比较它们的大小并打印出相应的比较结果（大于、小于、等于）。\",\"代码模版\",\"p = 10 q = 5 if p > q: print(p, \\\" is greater than \\\", q) elif p < q: print(p, \\\" is less than \\\", q) else: print(p, \\\" is equal to \\\", q) if ______: print(f\\\"{p} is greater than {q}\\\") assert p > q elif ______: print(f\\\"{p} is less than {q}\\\") assert p < q else: print(f\\\"{p} is equal to {q}\\\") assert p == q \",\"输出示例：\",\"4 is less than 5 \"]},\"72\":{\"c\":[\"Python\"]},\"73\":{\"c\":[\"web\",\"typora\"]},\"74\":{\"h\":\"字符串\"},\"75\":{\"h\":\"1. 字符串的定义\",\"t\":[\"字符串是由字母，数字，特殊字符来组成的一个序列\",\"image-20231218093224921\"]},\"76\":{\"h\":\"2. 创建字符串\",\"t\":[\"——使用 单引号、双引号或者三引号。\",\"name = \\\"alexa\\\" number = '18' paragraph = '''Hello, I'm Alexa ''' para = \\\"\\\"\\\"Hello Alexa \\\"\\\"\\\" \",\"单双引号混用 所以会需要接受不同类型的引号, 否则不能完全包裹字符串内容\",\"string = 'I'm Alexa # wrong string = \\\"I'm Alexa\\\" # correct \",\"那么三引号呢？\",\"假设我们现在需要存储如下文本：\",\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。 先实现功能，再去优化，否则一切会很乱。——AI悦创 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西 \",\"放入字符串，我们如何在 Python 代码实现呢？\",\"三引号还可以用来注释\",\"image-20231218095008709\"]},\"77\":{\"h\":\"3. 字符串长度\",\"t\":[\"使用len(): 返回字符串中字符长度或字符数，从一开始数, 包括空格\",\"para = \\\"Hello, alexa\\\" print(len(para)) # output 12 \"]},\"78\":{\"h\":\"4. 字符串中的字符获取\"},\"79\":{\"h\":\"4.1 获取单个字符\",\"t\":[\"para = \\\"Hello, alexa\\\" print(para[2]) # selecting the 3rd character print(para[0]) # selecting the 1st character print(para[-1]) # selecting the last character print(para[len(para)-1]) # selecting the last character \"]},\"80\":{\"h\":\"4.2 获取一串连续字符\",\"t\":[\"使用slicing区间 （左闭右开）string[start: end]\",\"\\\"\\\"\\\"语法: string = \\\"bornforthis\\\" select = string[start: end] PS: end 记得 +1\\\"\\\"\\\" para = \\\"Hello, alexa\\\" print(para[2:6]) # selecting the 3rd to the 6th character (not including the 7th) # output llo, \"]},\"81\":{\"h\":\"4.3 获取多个不连续字符\",\"t\":[\"使用slicing区间 string[start: end: sep]\",\"\\\"\\\"\\\" 语法: string = \\\"0123456789\\\" select = string[start: end: sep] *sep= how many steps to the next number* PS: end 记得 +1 \\\"\\\"\\\" string = \\\"0123456789\\\" # 获取字符 02468 select = string[0: len(string): 2] print(select) # 获取字符 13579 select = string[1: len(string): 2] print(select) string = \\\"bornforthis\\\" # 获取字符 ofts select = string[1: len(string): 3] print(select) \"]},\"82\":{\"h\":\"4.4 优化\",\"t\":[\"如果我们要提取的字符是从开头到结尾，则可以省略开头和/或结尾，留空即可\",\"string = \\\"0123456789\\\" # 获取字符 02468 select = string[:: 2] print(select) # 获取字符 13579 select = string[1:: 2] print(select) \"]},\"83\":{\"h\":\"4.5 字符串倒序\",\"t\":[\"字符串的第三个位置，控制的是字符提取的方向。默认正数为1，如果我们改成-1，则会变成反方向\",\"注意\",\"正负控制方向，数字大小控制步长\",\"string = \\\"bornforthis\\\" select = string[:: -1] print(select) # output sihtrofnrob \",\"省略号省略的是什么？\",\"select = string[0:11: -1] print(select) # output No result \",\"如果使用正方向序号， 0开始往-1走没有任何值， 不成立\",\"image-20231221214402328\",\"如果直接使用正数序号调换位置，最后一位就是0，会被省略掉：\",\"select = string[len(string):0: -1] print(select) # output sihtrofnro #missing \\\"b\\\" \",\"所以应该是从-1最后一位开始往回倒:\",\"image-20231221214427299\",\"select = string[-1:-1*len(string)-1: -1] print(select) \",\"# 获取rofn select = string[-5:-9: -1] print(select) \"]},\"84\":{\"h\":\"5. 字符串的内置方法\"},\"85\":{\"h\":\"5.1 .upper()\",\"t\":[\"将字符串全部转换为大写\",\"string = \\\"bornforthis\\\" print(string.upper()) # output BORNFORTHIS \"]},\"86\":{\"h\":\"5.2 .lower()\",\"t\":[\"将字符串全部转换为小写\",\"string = \\\"BORNFORTHIS\\\" print(string.lower()) # output bornforthis \"]},\"87\":{\"h\":\"5.3 .capitalize()\",\"t\":[\"字符串开头第一个字母大写\",\"string = \\\"BORNFORTHIS\\\" print(string.capitalize()) # output Bornforthis \"]},\"88\":{\"h\":\"5.4 .title()\",\"t\":[\"每个单词的首字母大写，只要有间隔都会大写 「形成标题的一种格式」\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.title()) # output Bornforthis To-Aiyc \"]},\"89\":{\"h\":\"5.5 .startswith()\",\"t\":[\"检测字符串是否以某个特定的内容开头，返回True或False\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"b\\\")) # output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"BO\\\")) # output True \"]},\"90\":{\"h\":\"5.6 .endswith()\",\"t\":[\"检测字符串是不是以特定字符或单词结尾，返回布尔值。\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"BO\\\")) # output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"yc\\\")) # output True \"]},\"91\":{\"h\":\"5.7 .count()\",\"t\":[\"计算特定字符或单词在目标字符串中存在的次数。\",\"string = \\\"BORNFORTHIS to-aiyc bornforthis\\\" print(string.count(\\\"i\\\")) # output 2 #区分大小写 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.count(\\\"for\\\")) # output 2 \"]},\"92\":{\"h\":\"5.8 .find()\",\"t\":[\"寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 find() 返回目标单词的第一个字符的下标。\",\"如果，查询的字符或单词不存在，则返回 -1。\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"for\\\")) # output 12 #返回第一次出现时的下标 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"R\\\")) # output 2 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"k\\\")) # output -1 \"]},\"93\":{\"h\":\"5.9 .index()\",\"t\":[\"寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 index() 返回目标单词的第一个字符的下标。\",\"如果，查询的字符或单词不存在，则报错。\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.index(\\\"k\\\")) # output ValueError: substring not found \"]},\"94\":{\"h\":\"5.10 .isdigit()\",\"t\":[\"判断字符串是不是纯数字字符串，字符串中但凡有一个字符不是数字，则返回false\",\"string = \\\"01234567\\\" print(string.isdigit()) # output True string = \\\"01234567o\\\" print(string.isdigit()) # output False \"]},\"95\":{\"h\":\"5.11 .isalpha()\",\"t\":[\"判断字符串是不是纯字母字符串，字符串中但凡有一个字符不是字母，则返回false\",\"string = \\\"abcdefg\\\" print(string.isalpha()) # output True string = \\\"abcdefg0\\\" print(string.isalpha()) # output False \"]},\"96\":{\"h\":\"5.12 .isalnum()\",\"t\":[\"判断字符串是不是纯数字或纯字母、纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。\",\"string = \\\"abcdefg0\\\" print(string.isalnum()) # output True string = \\\"abcdefg0!\\\" print(string.isalnum()) # output False \"]},\"97\":{\"h\":\"5.13 .isupper()\",\"t\":[\"判断字符串中的字母是否全大写，全大写则返回 True，否则返回 False。\",\"string = \\\"abcdefg0!\\\" print(string.isupper()) # output False \"]},\"98\":{\"h\":\"5.14 .islower()\",\"t\":[\"判断字符串是不是字母全小写，全小写则返回 True，否则返回 False。\",\"string = \\\"abcdefg0!\\\" print(string.islower()) # output True \"]},\"99\":{\"h\":\"5.15 .isspace()\",\"t\":[\"判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。\",\"string = \\\"abcdefg0!\\\" print(string.isspace()) # output False string = \\\" \\\" print(string.isspace()) # output True \"]},\"100\":{\"h\":\"5.16 .strip()\",\"t\":[\"默认去掉目标字符串的前后空白字符，如果指定参数，可以去掉指定字符\",\"string = \\\" bornforthis \\\" print(string.strip()) #去除前后空格 # output bornforthis string = \\\"---bornforthis---\\\" print(string.strip(\\\"-\\\")) #去除前后减号 # output bornforthis string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"-\\\")) #如果只去除前后减号 只会去除连续的减号知道遇见其他字符 # output -bornforthis-- string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"- \\\")) #同时去除两端的所有减号和空格 # output bornforthis \"]},\"101\":{\"h\":\"5.17 .lstrip()\",\"t\":[\"left 默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。\",\"string = \\\"-- -bornforthis-- -\\\" print(string.lstrip(\\\"- \\\")) # output bornforthis-- - \"]},\"102\":{\"h\":\"5.18 .rstrip()\",\"t\":[\"Right 默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。\",\"string = \\\"-- -bornforthis-- -\\\" print(string.rstrip(\\\"- \\\")) # output -- -bornforthis \"]},\"103\":{\"h\":\"5.19 .replace()\",\"t\":[\".replace(old, new, count)第一个位置传入待替换的「old」字符，第二个位置传入要替换的新字符「new」，count控制替换次数\",\"string = \\\"-- -bornforthis-- -\\\" string1 = string.replace(\\\" \\\",\\\"*\\\") #默认把所有空格都换成* string2 = string.replace(\\\"-\\\", \\\"!\\\", 3) #置换前三个减号为！ print(string, string1, string2, sep=\\\"\\\\n\\\") # output -- -bornforthis-- - --**-bornforthis--*- !! !bornforthis-- - \"]},\"104\":{\"h\":\"5.20 .split()\",\"t\":[\".split(sep, maxsplit) 以特定字符进行分割，默认空格分割。如传入参数「sep」则以参数进行分割，返回分割后的列表，maxsplit用于控制分割几次, 默认从左边开始分割\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.split() lst2 = string.split(\\\"o\\\") lst3 = string.split(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am b', 'rnf', 'rthis b', 'rnforthis'] \"]},\"105\":{\"h\":\"5.21 .rsplit()\",\"t\":[\".rsplit(sep, maxsplit) 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.rsplit() lst2 = string.rsplit(\\\"o\\\") lst3 = string.rsplit(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am bornf', 'rthis b', 'rnf', 'rthis'] \"]},\"106\":{\"h\":\"5.22 .join()\",\"t\":[\"以特定字符为字符串每个字符中间的间隔 “sep”.join(string)\",\"string = \\\"i am bornforthis \\\" string_joined = \\\"-\\\".join(string) print(string_joined) # output i- -a-m- -b-o-r-n-f-o-r-t-h-i-s- \"]},\"107\":{\"h\":\"6. 字符串格式化\",\"t\":[\"问题\",\"string = \\\"Hi Bornforthis,Welcome to XiaMen.\\\" print(string) # ---output--- Hi Bornforthis,Welcome to XiaMen. \",\"所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。\",\"我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。\",\"当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。\",\"name = \\\"Bornforthis\\\" region = \\\"XiaMen\\\" string1 = \\\"Hi \\\" string2 = \\\",Welcome to \\\" string3 = \\\".\\\" result = string1 + name + string2 + region + string3 print(result) # ---output--- Hi Bornforthis,Welcome to XiaMen. \",\"由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。\",\"而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：\",\"string = \\\"Money is \\\" + 190 print(string) # ---output--- Traceback (most recent call last): File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py\\\", line 1, in <module> string = \\\"Money is \\\" + 190 TypeError: can only concatenate str (not \\\"int\\\") to str string = \\\"Money is \\\" + str(190) print(string) # ---output--- Money is 190 \",\"—— format 就应运而生了。\"]},\"108\":{\"c\":[\"Python\"]},\"109\":{\"c\":[\"web\",\"typora\"]}},\"dirtCount\":0,\"index\":[[\"虽然实现了\",{\"1\":{\"107\":1}}],[\"由上面的代码可知\",{\"1\":{\"107\":1}}],[\"但字符串加法存在问题\",{\"1\":{\"107\":1}}],[\"但是很繁琐\",{\"1\":{\"107\":1}}],[\"但是要编写符合题目要求的输出\",{\"1\":{\"67\":1}}],[\"但是不能修改输出\",{\"1\":{\"53\":1}}],[\"但是没必要\",{\"1\":{\"47\":1}}],[\"但是可以使用下划线来分隔其中的单词\",{\"1\":{\"30\":1}}],[\"当然\",{\"1\":{\"107\":1}}],[\"当我们放东西\",{\"1\":{\"20\":1}}],[\"地面填写进去\",{\"1\":{\"107\":1}}],[\"让我们不同的人名\",{\"1\":{\"107\":1}}],[\"指定分割次数\",{\"1\":{\"105\":1}}],[\"指数运算符\",{\"1\":{\"60\":1}}],[\"以特定字符为字符串每个字符中间的间隔\",{\"1\":{\"106\":1}}],[\"以特定字符进行分割\",{\"1\":{\"104\":1}}],[\"以下哪个操作会返回浮点数\",{\"1\":{\"65\":1}}],[\"以下哪个运算符用于取余\",{\"1\":{\"65\":1}}],[\"以下哪个表示删除变量\",{\"1\":{\"31\":1}}],[\"以下哪个表示全局变量\",{\"1\":{\"31\":1}}],[\"以下哪个是多变量赋值\",{\"1\":{\"31\":1}}],[\"以下哪个是有效的变量赋值\",{\"1\":{\"31\":1}}],[\"以下哪个变量名是有效的\",{\"1\":{\"31\":1}}],[\"置换前三个减号为\",{\"1\":{\"103\":1}}],[\"同时去除两端的所有减号和空格\",{\"1\":{\"100\":1}}],[\"同时输出多个变量\",{\"1\":{\"23\":1}}],[\"同时输出多个数据\",{\"0\":{\"23\":1}}],[\"去除前后减号\",{\"1\":{\"100\":1}}],[\"去除前后空格\",{\"1\":{\"100\":1}}],[\"去跟踪状态\",{\"1\":{\"47\":1}}],[\"默认从左边开始分割\",{\"1\":{\"104\":1}}],[\"默认空格分割\",{\"1\":{\"104\":1}}],[\"默认把所有空格都换成\",{\"1\":{\"103\":1}}],[\"默认去掉字符串右边的空白字符\",{\"1\":{\"102\":1}}],[\"默认去掉字符串左边的空白字符\",{\"1\":{\"101\":1}}],[\"默认去掉目标字符串的前后空白字符\",{\"1\":{\"100\":1}}],[\"默认正数为1\",{\"1\":{\"83\":1}}],[\"纯空格则返回\",{\"1\":{\"99\":1}}],[\"纯数字字母字符串\",{\"1\":{\"96\":1}}],[\"全小写则返回\",{\"1\":{\"98\":1}}],[\"全大写则返回\",{\"1\":{\"97\":1}}],[\"全国人民代表大会\",{\"1\":{\"21\":1}}],[\"k\",{\"1\":{\"92\":1,\"93\":1}}],[\"key2\",{\"1\":{\"50\":1}}],[\"key1\",{\"1\":{\"50\":1}}],[\"key\",{\"1\":{\"50\":4}}],[\"keyword\",{\"1\":{\"30\":1}}],[\"keywords\",{\"1\":{\"30\":2}}],[\"查询的字符或单词不存在\",{\"1\":{\"92\":1,\"93\":1}}],[\"寻找目标字符或单词在特定字符串中\",{\"1\":{\"92\":1,\"93\":1}}],[\"区分大小写\",{\"1\":{\"91\":1}}],[\"检测字符串是不是以特定字符或单词结尾\",{\"1\":{\"90\":1}}],[\"检测字符串是否以某个特定的内容开头\",{\"1\":{\"89\":1}}],[\"返回分割后的列表\",{\"1\":{\"104\":1,\"105\":1}}],[\"返回第一次出现时的下标\",{\"1\":{\"92\":1}}],[\"返回目标单词的第一个字符的下标\",{\"1\":{\"92\":1,\"93\":1}}],[\"返回布尔值\",{\"1\":{\"90\":1}}],[\"返回true或false\",{\"1\":{\"89\":1}}],[\"返回字符串中字符长度或字符数\",{\"1\":{\"77\":1}}],[\"形成标题的一种格式\",{\"1\":{\"88\":1}}],[\"将字符串全部转换为小写\",{\"1\":{\"86\":1}}],[\"将字符串全部转换为大写\",{\"1\":{\"85\":1}}],[\"upper\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"users\",{\"1\":{\"107\":1}}],[\"use\",{\"1\":{\"31\":1}}],[\"省略号省略的是什么\",{\"1\":{\"83\":1}}],[\"正负控制方向\",{\"1\":{\"83\":1}}],[\"控制的是字符提取的方向\",{\"1\":{\"83\":1}}],[\"留空即可\",{\"1\":{\"82\":1}}],[\"或结尾\",{\"1\":{\"82\":1}}],[\"或者一个错误信息字符串\",{\"1\":{\"61\":1}}],[\"或者其中某一次\",{\"1\":{\"53\":1}}],[\"或者三个井号空格\",{\"1\":{\"1\":1}}],[\"则以参数进行分割\",{\"1\":{\"104\":1}}],[\"则去掉右边的指定字符\",{\"1\":{\"102\":1}}],[\"则去掉左边的指定字符\",{\"1\":{\"101\":1}}],[\"则报错\",{\"1\":{\"93\":1}}],[\"则返回false\",{\"1\":{\"94\":1,\"95\":1}}],[\"则返回\",{\"1\":{\"92\":1,\"96\":1}}],[\"则会变成反方向\",{\"1\":{\"83\":1}}],[\"则可以省略开头和\",{\"1\":{\"82\":1}}],[\"则视为作答正确\",{\"1\":{\"67\":1}}],[\"优化\",{\"0\":{\"82\":1}}],[\"优先级最高\",{\"1\":{\"59\":2}}],[\"记得\",{\"1\":{\"80\":1,\"81\":1}}],[\"记录📝看了哪些帖子\",{\"1\":{\"47\":1}}],[\"语法\",{\"1\":{\"80\":1,\"81\":1}}],[\"左闭右开\",{\"1\":{\"80\":1}}],[\"获取rofn\",{\"1\":{\"83\":1}}],[\"获取字符\",{\"1\":{\"81\":3,\"82\":2}}],[\"获取多个不连续字符\",{\"0\":{\"81\":1}}],[\"获取一串连续字符\",{\"0\":{\"80\":1}}],[\"获取单个字符\",{\"0\":{\"79\":1}}],[\"获取关键词列表\",{\"1\":{\"30\":1}}],[\"包括空格\",{\"1\":{\"77\":1}}],[\"三引号还可以用来注释\",{\"1\":{\"76\":1}}],[\"三个冒号结束\",{\"1\":{\"1\":1}}],[\"三个冒号+md\",{\"1\":{\"1\":1}}],[\"放入字符串\",{\"1\":{\"76\":1}}],[\"凡是你不能清晰写下来的东西\",{\"1\":{\"76\":1}}],[\"否则返回\",{\"1\":{\"97\":1,\"98\":1,\"99\":1}}],[\"否则一切会很乱\",{\"1\":{\"76\":1}}],[\"否则不能完全包裹字符串内容\",{\"1\":{\"76\":1}}],[\"再去优化\",{\"1\":{\"76\":1}}],[\"再开始打\",{\"1\":{\"1\":1}}],[\"先实现功能\",{\"1\":{\"76\":1}}],[\"先以无序理解即可\",{\"1\":{\"50\":1}}],[\"而且另一个问题就是\",{\"1\":{\"107\":1}}],[\"而不是每个人都从头创建一个新字符串\",{\"1\":{\"107\":1}}],[\"而真正的成功者\",{\"1\":{\"76\":1}}],[\"而胆子最大的是那些冒险家\",{\"1\":{\"76\":1}}],[\"疯狂往里冲的是韭菜\",{\"1\":{\"76\":1}}],[\"害怕错过一切\",{\"1\":{\"76\":1}}],[\"跑的最快的是骗子\",{\"1\":{\"76\":1}}],[\"起的最早的是理想主义者\",{\"1\":{\"76\":1}}],[\"黄家宝\",{\"1\":{\"76\":1}}],[\"深者见深\",{\"1\":{\"76\":1}}],[\"浅者见浅\",{\"1\":{\"76\":1}}],[\"单双引号混用\",{\"1\":{\"76\":1}}],[\"单引号\",{\"1\":{\"76\":1}}],[\"双引号或者三引号\",{\"1\":{\"76\":1}}],[\"特殊字符来组成的一个序列\",{\"1\":{\"75\":1}}],[\"特点\",{\"1\":{\"20\":1}}],[\"等于\",{\"1\":{\"71\":1}}],[\"等同于\",{\"1\":{\"63\":6}}],[\"小于\",{\"1\":{\"71\":1}}],[\"小试牛刀\",{\"0\":{\"61\":1}}],[\"大于\",{\"1\":{\"71\":1}}],[\"大小写英文\",{\"1\":{\"30\":1}}],[\"大小\",{\"1\":{\"19\":1}}],[\"q\",{\"1\":{\"71\":13}}],[\"次幂\",{\"1\":{\"70\":1}}],[\"取余的结果和\",{\"1\":{\"70\":1}}],[\"取余运算符\",{\"1\":{\"60\":1}}],[\"求余和幂运算\",{\"0\":{\"70\":1}}],[\"测试\",{\"1\":{\"68\":1,\"69\":1,\"70\":1}}],[\"测试部分代码\",{\"1\":{\"67\":1}}],[\"减去\",{\"1\":{\"68\":1}}],[\"减法运算符\",{\"1\":{\"60\":1}}],[\"创建字符串\",{\"0\":{\"76\":1}}],[\"创建两个数字\",{\"1\":{\"68\":1,\"69\":1,\"70\":1}}],[\"创建变量并输出\",{\"1\":{\"31\":1}}],[\"编写一段\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"编程题\",{\"0\":{\"67\":1}}],[\"没有任何输出没有报错\",{\"1\":{\"67\":1}}],[\"提示\",{\"1\":{\"67\":1}}],[\"提示容器\",{\"0\":{\"6\":1}}],[\"后\",{\"1\":{\"66\":2}}],[\"作为结果\",{\"1\":{\"66\":1}}],[\"会被省略掉\",{\"1\":{\"83\":1}}],[\"会得到\",{\"1\":{\"66\":1}}],[\"会自动去掉重复的\",{\"1\":{\"53\":1}}],[\"会自动生成文件夹\",{\"1\":{\"1\":1}}],[\"填空\",{\"0\":{\"66\":1}}],[\"无法确定\",{\"1\":{\"65\":3}}],[\"无序性\",{\"1\":{\"50\":1,\"53\":1}}],[\"报错\",{\"1\":{\"65\":3}}],[\"🙆✅\",{\"1\":{\"65\":2}}],[\"整数\",{\"1\":{\"65\":2}}],[\"整型\",{\"1\":{\"37\":1}}],[\"执行表达式\",{\"1\":{\"66\":1}}],[\"执行\",{\"1\":{\"65\":6,\"66\":6}}],[\"选择题\",{\"0\":{\"65\":1}}],[\"结果小数\",{\"1\":{\"63\":1}}],[\"结果整数\",{\"1\":{\"63\":1}}],[\"结果就会得到浮点数\",{\"1\":{\"59\":1}}],[\"把右侧的运算对象赋值给左侧的运算对象\",{\"1\":{\"63\":1}}],[\"看看会输出上面结果\",{\"1\":{\"62\":1}}],[\"试一试上面的例子\",{\"1\":{\"62\":1}}],[\"判断字符串是否为纯空格\",{\"1\":{\"99\":1}}],[\"判断字符串是不是字母全小写\",{\"1\":{\"98\":1}}],[\"判断字符串是不是纯数字或纯字母\",{\"1\":{\"96\":1}}],[\"判断字符串是不是纯数字字符串\",{\"1\":{\"94\":1}}],[\"判断字符串是不是纯字母字符串\",{\"1\":{\"95\":1}}],[\"判断字符串中的字母是否全大写\",{\"1\":{\"97\":1}}],[\"判断两个运算对象是否不相同\",{\"1\":{\"62\":1}}],[\"判断两个运算对象是否相同\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否小于或等于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否小于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否大于或等于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否大于第二个运算对象\",{\"1\":{\"62\":1}}],[\"<module>\",{\"1\":{\"107\":1}}],[\"<=\",{\"1\":{\"62\":3,\"66\":1}}],[\"<\",{\"1\":{\"62\":3,\"71\":2}}],[\"<class\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"55\":1}}],[\"比较它们的大小并打印出相应的比较结果\",{\"1\":{\"71\":1}}],[\"比较运算\",{\"0\":{\"71\":1}}],[\"比较运算符\",{\"0\":{\"62\":1}}],[\"比较值的大小\",{\"0\":{\"62\":1}}],[\"比如你有一个系统\",{\"1\":{\"47\":1}}],[\"比如社交平台上的一个日志功能\",{\"1\":{\"47\":1}}],[\"比如\",{\"1\":{\"43\":1,\"46\":1,\"50\":1,\"53\":1}}],[\"为\",{\"1\":{\"61\":3}}],[\"为什么列表不行\",{\"1\":{\"53\":1}}],[\"为什么🧐有列表后\",{\"1\":{\"47\":1}}],[\"示例\",{\"1\":{\"61\":1}}],[\"两个整数\",{\"1\":{\"61\":1}}],[\"两个井号空格\",{\"1\":{\"1\":1}}],[\"≤\",{\"1\":{\"61\":2}}],[\"实现以上要求\",{\"1\":{\"61\":1}}],[\"请你编写\",{\"1\":{\"61\":1}}],[\"反转后的数字为\",{\"1\":{\"61\":1}}],[\"第二个位置传入要替换的新字符\",{\"1\":{\"103\":1}}],[\"第二个新数字是原数字的反转\",{\"1\":{\"61\":1}}],[\"第一个位置传入待替换的\",{\"1\":{\"103\":1}}],[\"第一个新数字是原数字的两位数中的各个数字的和\",{\"1\":{\"61\":1}}],[\"第一次出现的下标\",{\"1\":{\"92\":1,\"93\":1}}],[\"计算特定字符或单词在目标字符串中存在的次数\",{\"1\":{\"91\":1}}],[\"计算并打印出\",{\"1\":{\"70\":1}}],[\"计算并打印出它们的乘积和除法结果\",{\"1\":{\"69\":1}}],[\"计算并打印出它们的和以及\",{\"1\":{\"68\":1}}],[\"计算商并去除其小数部分\",{\"1\":{\"60\":1}}],[\"计算余数\",{\"1\":{\"60\":1}}],[\"乘法运算符\",{\"1\":{\"60\":1}}],[\"加法运算符\",{\"1\":{\"60\":1}}],[\"例子\",{\"1\":{\"60\":1,\"62\":1,\"63\":1}}],[\"例如\",{\"1\":{\"20\":1}}],[\"描述\",{\"1\":{\"60\":1,\"62\":1,\"63\":1}}],[\"运算符\",{\"1\":{\"60\":1,\"62\":1,\"63\":1}}],[\"运行之后顺序可能和输入的顺序不一样\",{\"1\":{\"53\":1}}],[\"算术运算符\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"规律\",{\"1\":{\"59\":1}}],[\"除非强制转换类型为字符串\",{\"1\":{\"107\":1}}],[\"除法最后是小数\",{\"1\":{\"63\":1}}],[\"除法取整运算符\",{\"1\":{\"60\":1}}],[\"除法运算符\",{\"1\":{\"60\":1}}],[\"除法涉及精度问题\",{\"1\":{\"59\":2}}],[\"除去文章title\",{\"1\":{\"1\":1}}],[\"最后一位就是0\",{\"1\":{\"83\":1}}],[\"最后的结果就是float\",{\"1\":{\"59\":1}}],[\"最后才是赋值\",{\"1\":{\"21\":1}}],[\"01234567o\",{\"1\":{\"94\":1}}],[\"01234567\",{\"1\":{\"94\":1}}],[\"0123456789\",{\"1\":{\"81\":2,\"82\":1}}],[\"0开始往\",{\"1\":{\"83\":1}}],[\"02468\",{\"1\":{\"81\":1,\"82\":1}}],[\"0\",{\"1\":{\"59\":7,\"60\":1,\"63\":3,\"65\":5,\"66\":2,\"69\":1,\"79\":1,\"81\":1,\"83\":2}}],[\"出现重复的不会报错\",{\"1\":{\"53\":1}}],[\"互异性\",{\"1\":{\"53\":1}}],[\"具有不确定性\",{\"1\":{\"53\":1}}],[\"举个例子\",{\"1\":{\"53\":1}}],[\"举个例子🌰\",{\"0\":{\"20\":1}}],[\"需要换一个人名或者地区\",{\"1\":{\"107\":1}}],[\"需要不可变的数据类型\",{\"1\":{\"53\":1}}],[\"需要返回的是一个地点的经纬度\",{\"1\":{\"47\":1}}],[\"确定性\",{\"1\":{\"53\":1}}],[\"点\",{\"1\":{\"53\":1}}],[\"注意\",{\"1\":{\"53\":2,\"83\":1}}],[\"注意⚠️\",{\"1\":{\"40\":1}}],[\"集合的每一个值都是确定的\",{\"1\":{\"53\":1}}],[\"集合的特性\",{\"0\":{\"53\":1}}],[\"集合顺序没有改变\",{\"1\":{\"53\":1}}],[\"集合是没有顺序的\",{\"1\":{\"53\":1}}],[\"集合\",{\"0\":{\"51\":1}}],[\"删改\",{\"1\":{\"50\":1}}],[\"删除是无法指定下标的删除元素\",{\"1\":{\"53\":1}}],[\"删除数据\",{\"1\":{\"53\":1}}],[\"删除\",{\"1\":{\"40\":1,\"43\":1,\"46\":1,\"47\":1}}],[\"所存在的问题\",{\"1\":{\"107\":1}}],[\"所拥有的所有数据类型\",{\"1\":{\"50\":1}}],[\"所以应该是从\",{\"1\":{\"83\":1}}],[\"所以会需要接受不同类型的引号\",{\"1\":{\"76\":1}}],[\"所以最后的结果类型\",{\"1\":{\"59\":1}}],[\"所以最后得到浮点数\",{\"1\":{\"59\":1}}],[\"所以他们可以说\",{\"1\":{\"21\":1}}],[\"所以\",{\"1\":{\"20\":1}}],[\"布尔值\",{\"1\":{\"65\":2}}],[\"布尔型\",{\"0\":{\"54\":1},\"1\":{\"53\":1}}],[\"布尔\",{\"1\":{\"50\":1}}],[\"组成\",{\"1\":{\"50\":1}}],[\"valueerror\",{\"1\":{\"93\":1}}],[\"value2\",{\"1\":{\"50\":1}}],[\"value1\",{\"1\":{\"50\":1}}],[\"value\",{\"1\":{\"50\":3}}],[\"var\",{\"1\":{\"31\":7}}],[\"有些前期基本用不到\",{\"1\":{\"50\":1}}],[\"有序性\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"有序标题和无序标题\",{\"0\":{\"5\":1}}],[\"字母元素\",{\"1\":{\"96\":1}}],[\"字典的组成\",{\"1\":{\"50\":1}}],[\"字典的特性\",{\"0\":{\"50\":1}}],[\"字典\",{\"0\":{\"48\":1}}],[\"字符\",{\"1\":{\"103\":1}}],[\"字符放到字符串中\",{\"1\":{\"40\":1}}],[\"字符串格式化\",{\"0\":{\"107\":1}}],[\"字符串中但凡出现非数字\",{\"1\":{\"96\":1}}],[\"字符串中但凡有一个字符不是字母\",{\"1\":{\"95\":1}}],[\"字符串中但凡有一个字符不是数字\",{\"1\":{\"94\":1}}],[\"字符串中的字符获取\",{\"0\":{\"78\":1}}],[\"字符串开头第一个字母大写\",{\"1\":{\"87\":1}}],[\"字符串倒序\",{\"0\":{\"83\":1}}],[\"字符串长度\",{\"0\":{\"77\":1}}],[\"字符串是由字母\",{\"1\":{\"75\":1}}],[\"字符串的内置方法\",{\"0\":{\"84\":1}}],[\"字符串的第三个位置\",{\"1\":{\"83\":1}}],[\"字符串的定义\",{\"0\":{\"75\":1}}],[\"字符串的三大特性\",{\"0\":{\"40\":1}}],[\"字符串被创建出来之后就不能改变\",{\"1\":{\"40\":1}}],[\"字符串\",{\"0\":{\"38\":1,\"74\":1},\"1\":{\"50\":1,\"53\":1,\"65\":2}}],[\"合适就好\",{\"1\":{\"47\":1}}],[\"经纬度会改变吗\",{\"1\":{\"47\":1}}],[\"肯定是刚刚好可以存放一个\",{\"1\":{\"47\":1}}],[\"就应运而生了\",{\"1\":{\"107\":1}}],[\"就需要重新创建一个全新的字符串\",{\"1\":{\"107\":1}}],[\"就是浮点数\",{\"1\":{\"59\":1}}],[\"就是这个空间\",{\"1\":{\"21\":1}}],[\"就类似于\",{\"1\":{\"47\":1}}],[\"就得重新创建一个新的元组\",{\"1\":{\"47\":1}}],[\"因为我们不需要仓库管理员\",{\"1\":{\"47\":1}}],[\"因为\",{\"1\":{\"47\":1}}],[\"因为列表可变\",{\"1\":{\"47\":1}}],[\"因为仓库管理员会一直跟踪这个仓库的状态\",{\"1\":{\"47\":1}}],[\"还需要知道在哪里添加\",{\"1\":{\"47\":1}}],[\"还需要元组\",{\"1\":{\"47\":1}}],[\"内存\",{\"1\":{\"47\":1}}],[\"来跟踪并且知道\",{\"1\":{\"47\":1}}],[\"来存储数据\",{\"1\":{\"20\":1}}],[\"来存放数据并且说这是信封\",{\"1\":{\"20\":1}}],[\"用于算术计算\",{\"1\":{\"60\":1}}],[\"用列表有点浪费资源了\",{\"1\":{\"47\":1}}],[\"用列表可以吗\",{\"1\":{\"47\":1}}],[\"用户日志📔\",{\"1\":{\"47\":1}}],[\"用减号代替空格\",{\"1\":{\"1\":1}}],[\"领导没油水了～hhhhh\",{\"1\":{\"47\":1}}],[\"原子弹仓库的状态吗\",{\"1\":{\"47\":1}}],[\"只会去除连续的减号知道遇见其他字符\",{\"1\":{\"100\":1}}],[\"只会记着最后一个值\",{\"1\":{\"20\":1}}],[\"只要有间隔都会大写\",{\"1\":{\"88\":1}}],[\"只能重新再创建一个仓库\",{\"1\":{\"47\":1}}],[\"只能存放一个原子弹\",{\"1\":{\"47\":1}}],[\"并且你可以直接把你的物品\",{\"1\":{\"47\":1}}],[\"并输出\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2}}],[\"仓库创建之后\",{\"1\":{\"47\":1}}],[\"仓库管理员为什么知道仓库是否有位置\",{\"1\":{\"47\":1}}],[\"仓库管理员会告诉你\",{\"1\":{\"47\":1}}],[\"仓库很大\",{\"1\":{\"47\":1}}],[\"里面还有哪个位置\",{\"1\":{\"47\":1}}],[\"这个时候有可能会想到使用字符串的加法\",{\"1\":{\"107\":1}}],[\"这个时候作为课代表的你需要怎么办\",{\"1\":{\"20\":1}}],[\"这样我们就可以直接问仓库管理员\",{\"1\":{\"47\":1}}],[\"现有的物品也很多\",{\"1\":{\"47\":1}}],[\"现在有一个原子弹的仓库\",{\"1\":{\"47\":1}}],[\"现在有一个仓库\",{\"1\":{\"47\":1}}],[\"现在改变\",{\"1\":{\"31\":2}}],[\"假设我们现在需要存储如下文本\",{\"1\":{\"76\":1}}],[\"假设输入的数字\",{\"1\":{\"61\":3}}],[\"假设你有一个两位的整数\",{\"1\":{\"61\":1}}],[\"假设2\",{\"1\":{\"47\":1}}],[\"假设1\",{\"1\":{\"47\":1}}],[\"假设\",{\"1\":{\"47\":1}}],[\"假如你有两个小孩\",{\"1\":{\"31\":1}}],[\"假如\",{\"1\":{\"20\":1}}],[\"然后直接传给用户查看\",{\"1\":{\"47\":1}}],[\"软件\",{\"1\":{\"47\":1}}],[\"上面tup有两个元素\",{\"1\":{\"46\":1}}],[\"上面lst有两个元素\",{\"1\":{\"43\":1}}],[\"元组的功能刚刚好够用\",{\"1\":{\"47\":1}}],[\"元组的三大特性\",{\"0\":{\"46\":1}}],[\"元组为什么不合适\",{\"1\":{\"47\":1}}],[\"元组vs列表\",{\"0\":{\"47\":1}}],[\"元组不可以\",{\"1\":{\"46\":1}}],[\"元组里面每个元素算一个\",{\"1\":{\"46\":1}}],[\"元组\",{\"0\":{\"44\":1},\"1\":{\"50\":1,\"53\":1}}],[\"仅包含基础数据类型\",{\"1\":{\"43\":1}}],[\"改变\",{\"1\":{\"43\":1,\"46\":1}}],[\"可能还没有入场\",{\"1\":{\"76\":1}}],[\"可以去掉指定字符\",{\"1\":{\"100\":1}}],[\"可以对集合添加\",{\"1\":{\"53\":1}}],[\"可以添加\",{\"1\":{\"50\":1}}],[\"可以\",{\"1\":{\"47\":1}}],[\"可以同时使用\",{\"0\":{\"26\":1}}],[\"可变意味着\",{\"1\":{\"47\":1}}],[\"可变性\",{\"1\":{\"43\":1,\"50\":1,\"53\":1}}],[\"列表可变\",{\"1\":{\"53\":1}}],[\"列表可以\",{\"1\":{\"43\":1}}],[\"列表更合适\",{\"1\":{\"47\":1}}],[\"列表和元组到底用哪一个呢\",{\"1\":{\"47\":1}}],[\"列表里面每个元素算一个\",{\"1\":{\"43\":1}}],[\"列表的三大特性\",{\"0\":{\"43\":1}}],[\"列表\",{\"0\":{\"41\":1}}],[\"子字符\",{\"1\":{\"40\":1}}],[\"也可以传入参数\",{\"1\":{\"105\":1}}],[\"也可以是档案袋\",{\"1\":{\"20\":1}}],[\"也要去思考选择项以外的答案\",{\"1\":{\"76\":1}}],[\"也就是\",{\"1\":{\"53\":1}}],[\"也就是没有下标\",{\"1\":{\"53\":1}}],[\"也就是里面的每一个元素都可以被称为\",{\"1\":{\"40\":1}}],[\"都是你还没有真正理解的东西\",{\"1\":{\"76\":1}}],[\"都将成为字符串的类型\",{\"1\":{\"40\":1}}],[\"都可以是字符串的元素\",{\"1\":{\"40\":1}}],[\"键盘上可以输入的字符\",{\"1\":{\"40\":1}}],[\"任意数据类型\",{\"1\":{\"43\":1,\"46\":1,\"50\":1}}],[\"任意字符\",{\"1\":{\"40\":1}}],[\"任务列表\",{\"0\":{\"5\":1}}],[\"添加进去\",{\"1\":{\"47\":1}}],[\"添加\",{\"1\":{\"40\":1,\"43\":1,\"46\":1,\"47\":1}}],[\"引号里面出现的都算一个下标\",{\"1\":{\"40\":1}}],[\"下标分别是\",{\"1\":{\"43\":1,\"46\":1}}],[\"下标从\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"下标从0开始\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"下划线\",{\"0\":{\"8\":1}}],[\"浮点数\",{\"1\":{\"37\":1,\"65\":2}}],[\">=\",{\"1\":{\"62\":3,\"65\":1}}],[\">\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"55\":1,\"62\":3,\"71\":2}}],[\">>>\",{\"1\":{\"37\":8,\"39\":4,\"42\":4,\"45\":4,\"49\":4,\"52\":4}}],[\"直接检测数据类型\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2}}],[\"待补充代码\",{\"1\":{\"31\":1}}],[\"警告\",{\"1\":{\"31\":1}}],[\"joined\",{\"1\":{\"106\":2}}],[\"join\",{\"0\":{\"106\":1},\"1\":{\"106\":2}}],[\"juice\",{\"1\":{\"31\":5}}],[\"jaden\",{\"1\":{\"31\":10}}],[\"div\",{\"1\":{\"70\":2}}],[\"division\",{\"1\":{\"69\":4}}],[\"difference\",{\"1\":{\"68\":4}}],[\"dict\",{\"0\":{\"48\":1},\"1\":{\"49\":2}}],[\"d\",{\"1\":{\"49\":3,\"50\":1,\"65\":13}}],[\"data\",{\"1\":{\"37\":2}}],[\"don\",{\"1\":{\"31\":1}}],[\"drink\",{\"1\":{\"31\":2}}],[\"destroy\",{\"1\":{\"31\":1}}],[\"design\",{\"2\":{\"12\":1}}],[\"delete\",{\"1\":{\"31\":1}}],[\"del\",{\"1\":{\"30\":1,\"31\":1}}],[\"def\",{\"1\":{\"30\":1,\"31\":1}}],[\"demo1\",{\"1\":{\"107\":1}}],[\"demo\",{\"1\":{\"1\":1}}],[\"new\",{\"1\":{\"103\":2}}],[\"next\",{\"1\":{\"81\":1}}],[\"n\",{\"1\":{\"70\":8,\"103\":1,\"104\":1,\"105\":1,\"106\":1}}],[\"name\",{\"1\":{\"49\":2,\"76\":1,\"107\":2}}],[\"named\",{\"1\":{\"31\":2}}],[\"number\",{\"1\":{\"76\":1,\"81\":1}}],[\"num\",{\"1\":{\"37\":10,\"61\":5}}],[\"no\",{\"1\":{\"83\":1}}],[\"not\",{\"1\":{\"30\":1,\"80\":1,\"93\":1,\"107\":1}}],[\"nonlocal\",{\"1\":{\"30\":1}}],[\"none\",{\"1\":{\"30\":1,\"31\":1}}],[\"zh\",{\"1\":{\"31\":1}}],[\"问题\",{\"1\":{\"107\":1}}],[\"问题来了\",{\"1\":{\"47\":1}}],[\"问\",{\"1\":{\"31\":1}}],[\"弟弟的杯子装了果汁\",{\"1\":{\"31\":1}}],[\"弟弟叫\",{\"1\":{\"31\":1}}],[\"你能说掷骰子是确定性事件吗\",{\"1\":{\"53\":1}}],[\"你掷骰子\",{\"1\":{\"53\":1}}],[\"你创建原子弹的仓库\",{\"1\":{\"47\":1}}],[\"你每当需要添加数据的时候\",{\"1\":{\"47\":1}}],[\"你不知道还有没有位置可以存放\",{\"1\":{\"47\":1}}],[\"你不小心把哥哥的杯子装了可乐\",{\"1\":{\"31\":1}}],[\"你要向仓库添加物品\",{\"1\":{\"47\":1}}],[\"你是班级当中的课代表\",{\"1\":{\"20\":1}}],[\"家中仅剩一杯果汁\",{\"1\":{\"31\":1}}],[\"哥哥和弟弟都有专属的杯子\",{\"1\":{\"31\":1}}],[\"哥哥叫\",{\"1\":{\"31\":1}}],[\"想喝可乐\",{\"1\":{\"31\":1}}],[\"想喝果汁\",{\"1\":{\"31\":1}}],[\"交换果汁\",{\"1\":{\"31\":1}}],[\"如传入参数\",{\"1\":{\"104\":1}}],[\"如原数字为\",{\"1\":{\"61\":1}}],[\"如果更复杂的字符串就不合适了\",{\"1\":{\"107\":1}}],[\"如果只去除前后减号\",{\"1\":{\"100\":1}}],[\"如果指定参数\",{\"1\":{\"100\":1,\"101\":1,\"102\":1}}],[\"如果是查找单词\",{\"1\":{\"92\":1,\"93\":1}}],[\"如果直接使用正数序号调换位置\",{\"1\":{\"83\":1}}],[\"如果使用正方向序号\",{\"1\":{\"83\":1}}],[\"如果我们改成\",{\"1\":{\"83\":1}}],[\"如果我们要提取的字符是从开头到结尾\",{\"1\":{\"82\":1}}],[\"如果\",{\"1\":{\"66\":3,\"92\":1,\"93\":1}}],[\"如果其中有一个浮点数\",{\"1\":{\"59\":1}}],[\"如果输入中有一个数是float\",{\"1\":{\"59\":1}}],[\"如果你运行集合很多次\",{\"1\":{\"53\":1}}],[\"如果存储的数据和数量不变\",{\"1\":{\"47\":1}}],[\"如果存储的数据或数量是可变的\",{\"1\":{\"47\":1}}],[\"如何交换哥哥与弟弟杯中的果汁\",{\"1\":{\"31\":1}}],[\"如何创建变量\",{\"0\":{\"21\":1}}],[\"如整数或字符串\",{\"1\":{\"31\":1}}],[\"yewente\",{\"1\":{\"107\":1}}],[\"yc\",{\"1\":{\"90\":1}}],[\"younger\",{\"1\":{\"31\":2}}],[\"you\",{\"1\":{\"31\":3}}],[\"y\",{\"1\":{\"31\":4,\"69\":6}}],[\"yield\",{\"1\":{\"30\":1}}],[\"之后右序\",{\"1\":{\"50\":1}}],[\"之后\",{\"1\":{\"31\":2,\"66\":1}}],[\"❌true\",{\"1\":{\"66\":1}}],[\"❌\",{\"1\":{\"31\":3,\"65\":1}}],[\"✅❌\",{\"1\":{\"65\":1}}],[\"✅\",{\"1\":{\"31\":3,\"65\":12}}],[\"一个整数\",{\"1\":{\"61\":1}}],[\"一个变量可以同时被赋予多个值\",{\"1\":{\"31\":1}}],[\"一杯可乐\",{\"1\":{\"31\":1}}],[\"一旦赋值就不能改变\",{\"1\":{\"31\":1}}],[\"一共有2\",{\"1\":{\"1\":1}}],[\"表示没有值或空值\",{\"1\":{\"31\":1}}],[\"表达式\",{\"1\":{\"21\":2}}],[\"错\",{\"1\":{\"31\":11}}],[\"xiamen\",{\"1\":{\"107\":4}}],[\"x\",{\"1\":{\"31\":26,\"42\":2,\"45\":2,\"69\":6}}],[\"对应的\",{\"1\":{\"50\":1}}],[\"对\",{\"1\":{\"31\":11,\"70\":1}}],[\"对齐\",{\"0\":{\"9\":1}}],[\"中不同的数据类型不能直接相加\",{\"1\":{\"107\":1}}],[\"中\",{\"1\":{\"31\":2,\"65\":5,\"66\":3}}],[\"中的结果是什么\",{\"1\":{\"65\":1}}],[\"中的关键字\",{\"1\":{\"31\":1}}],[\"中的变量名区分大小写\",{\"1\":{\"30\":1}}],[\"中的人大代表\",{\"1\":{\"21\":1}}],[\"在程序运行的过程当中\",{\"1\":{\"43\":1,\"46\":1}}],[\"在python中\",{\"1\":{\"31\":7}}],[\"在\",{\"1\":{\"31\":2,\"65\":6,\"66\":3,\"107\":1}}],[\"练习\",{\"0\":{\"31\":1,\"64\":1}}],[\"welcome\",{\"1\":{\"107\":4}}],[\"web\",{\"2\":{\"12\":1,\"13\":1,\"16\":1,\"33\":1,\"57\":1,\"73\":1,\"109\":1}}],[\"wrong\",{\"1\":{\"76\":1}}],[\"why\",{\"1\":{\"47\":1,\"53\":1}}],[\"while\",{\"1\":{\"30\":1}}],[\"wants\",{\"1\":{\"31\":2}}],[\"world\",{\"1\":{\"31\":1}}],[\"with\",{\"1\":{\"30\":1,\"31\":2}}],[\"rsplit\",{\"0\":{\"105\":1},\"1\":{\"105\":4}}],[\"rstrip\",{\"0\":{\"102\":1},\"1\":{\"102\":1}}],[\"rthis\",{\"1\":{\"104\":3,\"105\":4}}],[\"rnforthis\",{\"1\":{\"104\":1}}],[\"rnf\",{\"1\":{\"104\":3,\"105\":3}}],[\"right\",{\"1\":{\"102\":1}}],[\"r\",{\"1\":{\"92\":1,\"106\":2}}],[\"recent\",{\"1\":{\"107\":1}}],[\"region\",{\"1\":{\"107\":2}}],[\"replace\",{\"0\":{\"103\":1},\"1\":{\"103\":3}}],[\"remainder\",{\"1\":{\"70\":2}}],[\"remove\",{\"1\":{\"31\":1}}],[\"result\",{\"1\":{\"68\":1,\"83\":1,\"107\":2}}],[\"return\",{\"1\":{\"30\":1}}],[\"raise\",{\"1\":{\"30\":1}}],[\"i\",{\"1\":{\"76\":3,\"91\":1,\"104\":5,\"105\":5,\"106\":3}}],[\"imac\",{\"1\":{\"107\":1}}],[\"image\",{\"1\":{\"35\":1,\"43\":1,\"59\":1,\"75\":1,\"76\":1,\"83\":2}}],[\"import\",{\"1\":{\"30\":1,\"31\":1}}],[\"index\",{\"0\":{\"93\":1},\"1\":{\"93\":2}}],[\"including\",{\"1\":{\"80\":1}}],[\"int\",{\"0\":{\"36\":1},\"1\":{\"37\":7,\"49\":2,\"107\":1}}],[\"in\",{\"1\":{\"30\":1,\"31\":1,\"59\":9,\"107\":1}}],[\"if\",{\"1\":{\"30\":1,\"71\":2}}],[\"isspace\",{\"0\":{\"99\":1},\"1\":{\"99\":2}}],[\"islower\",{\"0\":{\"98\":1},\"1\":{\"98\":1}}],[\"isupper\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"isalnum\",{\"0\":{\"96\":1},\"1\":{\"96\":2}}],[\"isalpha\",{\"0\":{\"95\":1},\"1\":{\"95\":2}}],[\"isdigit\",{\"0\":{\"94\":1},\"1\":{\"94\":2}}],[\"is\",{\"1\":{\"30\":2,\"31\":3,\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"71\":7,\"107\":4}}],[\"found\",{\"1\":{\"93\":1}}],[\"format\",{\"1\":{\"107\":1}}],[\"for\",{\"1\":{\"30\":1,\"31\":1,\"91\":2,\"92\":4,\"93\":1}}],[\"f\",{\"1\":{\"71\":3,\"106\":1}}],[\"floor\",{\"1\":{\"70\":2}}],[\"float\",{\"0\":{\"36\":1},\"1\":{\"37\":7}}],[\"file\",{\"1\":{\"107\":1}}],[\"filled\",{\"1\":{\"31\":1}}],[\"find\",{\"0\":{\"92\":1},\"1\":{\"92\":4}}],[\"finally\",{\"1\":{\"30\":1}}],[\"from\",{\"1\":{\"30\":1}}],[\"false\",{\"1\":{\"30\":1,\"42\":2,\"45\":2,\"52\":2,\"53\":2,\"55\":1,\"62\":1,\"65\":3,\"66\":2,\"89\":1,\"90\":1,\"94\":1,\"95\":1,\"96\":2,\"97\":2,\"98\":1,\"99\":2}}],[\"most\",{\"1\":{\"107\":1}}],[\"money\",{\"1\":{\"107\":4}}],[\"more\",{\"1\":{\"30\":1}}],[\"maxsplit用于控制分割几次\",{\"1\":{\"104\":1}}],[\"maxsplit\",{\"1\":{\"104\":1,\"105\":2}}],[\"many\",{\"1\":{\"81\":1}}],[\"missing\",{\"1\":{\"83\":1}}],[\"m\",{\"1\":{\"70\":8,\"76\":3,\"106\":1}}],[\"myvar\",{\"1\":{\"31\":1}}],[\"myvar2\",{\"1\":{\"31\":1}}],[\"my\",{\"1\":{\"31\":3}}],[\"mentoring\",{\"0\":{\"14\":1}}],[\"github\",{\"1\":{\"107\":1}}],[\"greater\",{\"1\":{\"71\":2}}],[\"global\",{\"1\":{\"30\":1,\"31\":2}}],[\"get\",{\"1\":{\"30\":1}}],[\"guide\",{\"0\":{\"1\":1}}],[\"title\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"tips\",{\"1\":{\"60\":1}}],[\"than\",{\"1\":{\"71\":5}}],[\"there\",{\"1\":{\"31\":1}}],[\"their\",{\"1\":{\"31\":1}}],[\"the\",{\"1\":{\"30\":1,\"31\":6,\"79\":4,\"80\":3,\"81\":1}}],[\"tup\",{\"1\":{\"45\":3,\"46\":1,\"49\":2}}],[\"tuple\",{\"0\":{\"44\":1},\"1\":{\"45\":2}}],[\"typeerror\",{\"1\":{\"107\":1}}],[\"type\",{\"1\":{\"37\":8,\"39\":3,\"42\":3,\"45\":3,\"49\":3,\"52\":3,\"55\":1}}],[\"typora\",{\"0\":{\"1\":1},\"2\":{\"13\":1,\"16\":1,\"33\":1,\"57\":1,\"73\":1,\"109\":1}}],[\"t\",{\"1\":{\"31\":1,\"37\":6,\"39\":3,\"42\":3,\"45\":3,\"49\":3,\"52\":3,\"106\":1}}],[\"two\",{\"1\":{\"31\":1}}],[\"traceback\",{\"1\":{\"107\":1}}],[\"try\",{\"1\":{\"30\":1}}],[\"true\",{\"1\":{\"30\":1,\"42\":2,\"45\":2,\"55\":2,\"62\":5,\"65\":3,\"66\":1,\"89\":1,\"90\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":2,\"99\":2}}],[\"to\",{\"1\":{\"30\":1,\"31\":3,\"71\":2,\"80\":1,\"81\":1,\"88\":2,\"89\":2,\"90\":2,\"91\":1,\"107\":5}}],[\"o\",{\"1\":{\"104\":2,\"105\":2,\"106\":2}}],[\"old\",{\"1\":{\"103\":2}}],[\"out\",{\"1\":{\"59\":7}}],[\"output\",{\"1\":{\"23\":1,\"24\":1,\"26\":1,\"28\":1,\"29\":1,\"37\":2,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"53\":2,\"55\":1,\"61\":1,\"62\":1,\"63\":2,\"77\":1,\"80\":1,\"83\":3,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":2,\"100\":4,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":4}}],[\"one\",{\"1\":{\"31\":2}}],[\"only\",{\"1\":{\"31\":1,\"107\":1}}],[\"other\",{\"1\":{\"31\":1}}],[\"own\",{\"1\":{\"31\":1}}],[\"or\",{\"1\":{\"30\":1}}],[\"ofts\",{\"1\":{\"81\":1}}],[\"of\",{\"1\":{\"30\":1,\"31\":2}}],[\"的\",{\"1\":{\"70\":1}}],[\"的结果\",{\"1\":{\"68\":1}}],[\"的结果是\",{\"1\":{\"66\":6}}],[\"的结果是什么\",{\"1\":{\"65\":4}}],[\"的结果是什么类型\",{\"1\":{\"65\":2}}],[\"的结果是多少\",{\"1\":{\"65\":4}}],[\"的结合\",{\"1\":{\"30\":1}}],[\"的内容也会改变\",{\"1\":{\"31\":1}}],[\"的内置函数名称做变量\",{\"1\":{\"30\":1}}],[\"的列表内容\",{\"1\":{\"31\":1}}],[\"的值是\",{\"1\":{\"66\":3}}],[\"的值也会改变\",{\"1\":{\"31\":1}}],[\"的值\",{\"1\":{\"31\":1}}],[\"不成立\",{\"1\":{\"83\":1}}],[\"不可变的数据类型才可以当做数据的\",{\"1\":{\"50\":1}}],[\"不可变性\",{\"1\":{\"40\":1,\"46\":1}}],[\"不浪费\",{\"1\":{\"47\":1}}],[\"不然\",{\"1\":{\"47\":1}}],[\"不需要\",{\"1\":{\"47\":1}}],[\"不能对字符串修改\",{\"1\":{\"40\":1}}],[\"不要出现如下方法\",{\"1\":{\"31\":1}}],[\"不要使用\",{\"1\":{\"30\":1}}],[\"不喜欢用对方的杯子\",{\"1\":{\"31\":1}}],[\"不也是在我们当前所处的空间中\",{\"1\":{\"20\":1}}],[\"huangjiabao\",{\"1\":{\"107\":1}}],[\"h\",{\"1\":{\"106\":1}}],[\"how\",{\"1\":{\"31\":1,\"81\":1}}],[\"home\",{\"1\":{\"31\":1}}],[\"have\",{\"1\":{\"31\":2}}],[\"hi\",{\"1\":{\"107\":4}}],[\"hidden\",{\"1\":{\"31\":1}}],[\"hinc\",{\"1\":{\"0\":1}}],[\"hello\",{\"1\":{\"31\":2,\"39\":2,\"42\":2,\"45\":2,\"52\":2,\"53\":2,\"76\":2,\"77\":1,\"79\":1,\"80\":1}}],[\"help\",{\"1\":{\"30\":2}}],[\"here\",{\"1\":{\"30\":1}}],[\"系统关键词不能做变量名使用\",{\"1\":{\"30\":1}}],[\"且不能用数字开头\",{\"1\":{\"30\":1}}],[\"数字大小控制步长\",{\"1\":{\"83\":1}}],[\"数字的乘法和除法\",{\"0\":{\"69\":1}}],[\"数字变换\",{\"0\":{\"61\":1}}],[\"数字\",{\"1\":{\"50\":1,\"53\":1,\"75\":1}}],[\"数字型的特点\",{\"0\":{\"59\":1}}],[\"数字型\",{\"0\":{\"36\":1,\"58\":1}}],[\"数字和与差\",{\"0\":{\"68\":1}}],[\"数字和\",{\"1\":{\"30\":1}}],[\"数据类型\",{\"0\":{\"34\":1,\"35\":1}}],[\"数据\",{\"1\":{\"20\":1}}],[\"多少个空格都可以\",{\"1\":{\"99\":1}}],[\"多个变量同时赋予不同的值\",{\"0\":{\"29\":1}}],[\"多个变量同时赋予相同的值\",{\"0\":{\"28\":1}}],[\"多媒体\",{\"0\":{\"11\":1}}],[\"进行指定分割\",{\"1\":{\"105\":1}}],[\"进阶的赋值方法\",{\"0\":{\"27\":1}}],[\"进去之后\",{\"1\":{\"20\":1}}],[\"lower\",{\"0\":{\"86\":1},\"1\":{\"86\":1}}],[\"love\",{\"1\":{\"26\":2}}],[\"llo\",{\"1\":{\"80\":1}}],[\"last\",{\"1\":{\"79\":2,\"107\":1}}],[\"lambda\",{\"1\":{\"30\":1}}],[\"len\",{\"1\":{\"77\":1,\"79\":1,\"81\":3,\"83\":2}}],[\"less\",{\"1\":{\"71\":3}}],[\"left\",{\"1\":{\"31\":1,\"101\":1}}],[\"lst3\",{\"1\":{\"104\":2,\"105\":2}}],[\"lst2\",{\"1\":{\"104\":2,\"105\":2}}],[\"lst1\",{\"1\":{\"104\":2,\"105\":2}}],[\"lstrip\",{\"0\":{\"101\":1},\"1\":{\"101\":1}}],[\"lst\",{\"1\":{\"42\":3,\"43\":1}}],[\"line\",{\"1\":{\"107\":1}}],[\"like\",{\"1\":{\"31\":1}}],[\"list\",{\"0\":{\"41\":1},\"1\":{\"30\":1,\"42\":2}}],[\"lucem\",{\"1\":{\"0\":1}}],[\"~\",{\"1\":{\"26\":1}}],[\"和81\",{\"1\":{\"61\":1}}],[\"和62\",{\"1\":{\"61\":1}}],[\"和19\",{\"1\":{\"61\":1}}],[\"和\",{\"0\":{\"26\":1},\"1\":{\"31\":1,\"50\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"输入两个数字\",{\"1\":{\"71\":1}}],[\"输入\",{\"1\":{\"61\":1}}],[\"输入代码\",{\"1\":{\"1\":1}}],[\"输出示例\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"输出\",{\"1\":{\"61\":1}}],[\"输出效果如下\",{\"1\":{\"31\":1}}],[\"输出效果\",{\"1\":{\"31\":1}}],[\"输出结尾方式\",{\"0\":{\"25\":1}}],[\"修改\",{\"0\":{\"25\":1},\"1\":{\"47\":1}}],[\"修改多个变量同时输出的间隔\",{\"0\":{\"24\":1}}],[\"equal\",{\"1\":{\"71\":2}}],[\"e\",{\"1\":{\"65\":1}}],[\"each\",{\"1\":{\"31\":1}}],[\"exclusive\",{\"1\":{\"31\":1}}],[\"except\",{\"1\":{\"30\":1}}],[\"elder\",{\"1\":{\"31\":2}}],[\"else\",{\"1\":{\"30\":1,\"71\":2}}],[\"elif\",{\"1\":{\"30\":1,\"71\":2}}],[\"enter\",{\"1\":{\"30\":1}}],[\"endswith\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"end=\",{\"1\":{\"26\":1}}],[\"end\",{\"0\":{\"25\":1,\"26\":1},\"1\":{\"80\":3,\"81\":3}}],[\"et\",{\"1\":{\"0\":1}}],[\"间隔\",{\"1\":{\"24\":3}}],[\"使用slicing区间\",{\"1\":{\"80\":1,\"81\":1}}],[\"使用len\",{\"1\":{\"77\":1}}],[\"使用\",{\"1\":{\"23\":1,\"76\":1}}],[\"答案显然是可以的\",{\"1\":{\"23\":1}}],[\"character\",{\"1\":{\"79\":4,\"80\":1}}],[\"check\",{\"1\":{\"37\":2}}],[\"children\",{\"1\":{\"31\":1}}],[\"call\",{\"1\":{\"107\":1}}],[\"capitalize\",{\"0\":{\"87\":1},\"1\":{\"87\":1}}],[\"cava\",{\"1\":{\"31\":1}}],[\"can\",{\"1\":{\"31\":1,\"107\":1}}],[\"cup\",{\"1\":{\"31\":4}}],[\"cups\",{\"1\":{\"31\":3}}],[\"cuea\",{\"0\":{\"14\":1}}],[\"count控制替换次数\",{\"1\":{\"103\":1}}],[\"count\",{\"0\":{\"91\":1},\"1\":{\"91\":2,\"103\":1}}],[\"correct\",{\"1\":{\"76\":1}}],[\"concatenate\",{\"1\":{\"107\":1}}],[\"condition\",{\"1\":{\"55\":3}}],[\"continue\",{\"1\":{\"30\":1}}],[\"coke\",{\"1\":{\"31\":1}}],[\"cola\",{\"1\":{\"31\":3}}],[\"class\",{\"1\":{\"30\":1}}],[\"c\",{\"1\":{\"23\":2,\"24\":2,\"26\":2,\"28\":2,\"29\":2,\"31\":4,\"61\":2,\"65\":13,\"66\":3}}],[\"bornf\",{\"1\":{\"105\":1}}],[\"bornforthis\",{\"1\":{\"80\":1,\"81\":1,\"83\":1,\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":2,\"90\":2,\"91\":4,\"92\":6,\"93\":2,\"100\":8,\"101\":2,\"102\":2,\"103\":4,\"104\":6,\"105\":6,\"106\":1,\"107\":4}}],[\"bo\",{\"1\":{\"89\":1,\"90\":1}}],[\"bool\",{\"0\":{\"54\":1},\"1\":{\"55\":1}}],[\"both\",{\"1\":{\"31\":1}}],[\"brothers\",{\"1\":{\"31\":2}}],[\"brother\",{\"1\":{\"31\":4}}],[\"break\",{\"1\":{\"30\":1}}],[\"b\",{\"1\":{\"23\":2,\"24\":2,\"26\":2,\"28\":2,\"29\":2,\"31\":4,\"42\":2,\"45\":2,\"61\":2,\"63\":14,\"65\":13,\"66\":3,\"68\":7,\"83\":1,\"89\":1,\"104\":4,\"105\":3,\"106\":1}}],[\"am\",{\"1\":{\"104\":5,\"105\":5,\"106\":1}}],[\"abcdefg0\",{\"1\":{\"95\":1,\"96\":2,\"97\":1,\"98\":1,\"99\":1}}],[\"abcdefg\",{\"1\":{\"95\":1}}],[\"aiyc\",{\"1\":{\"88\":2,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1}}],[\"ai悦创\",{\"1\":{\"76\":2}}],[\"a1\",{\"1\":{\"61\":3}}],[\"a0\",{\"1\":{\"61\":3}}],[\"age\",{\"1\":{\"49\":2}}],[\"alexa\",{\"1\":{\"39\":2,\"42\":2,\"43\":2,\"45\":2,\"46\":2,\"49\":2,\"76\":5,\"77\":1,\"79\":1,\"80\":1}}],[\"alex\",{\"1\":{\"31\":1}}],[\"accidentally\",{\"1\":{\"31\":1}}],[\"at\",{\"1\":{\"31\":1}}],[\"austin$jaden$alex$cava\",{\"1\":{\"31\":1}}],[\"austin\",{\"1\":{\"31\":10}}],[\"await\",{\"1\":{\"30\":1}}],[\"async\",{\"1\":{\"30\":1}}],[\"assert\",{\"1\":{\"30\":1,\"68\":2,\"69\":2,\"70\":2,\"71\":3}}],[\"assests\",{\"1\":{\"1\":1}}],[\"as\",{\"1\":{\"30\":1}}],[\"and\",{\"1\":{\"30\":1,\"31\":6}}],[\"any\",{\"1\":{\"30\":1}}],[\"a\",{\"1\":{\"23\":2,\"24\":2,\"26\":2,\"28\":2,\"29\":2,\"30\":1,\"31\":4,\"42\":2,\"45\":2,\"61\":3,\"63\":35,\"65\":13,\"66\":3,\"68\":7,\"106\":1}}],[\"探究\",{\"0\":{\"22\":1}}],[\"从字符串右边进行分割\",{\"1\":{\"105\":1}}],[\"从字面意思去理解\",{\"0\":{\"19\":1}}],[\"从一开始数\",{\"1\":{\"77\":1}}],[\"从左到右1\",{\"1\":{\"43\":1,\"46\":1}}],[\"从左到右0\",{\"1\":{\"43\":1,\"46\":1}}],[\"从左到右\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"从输出的结果可以看出\",{\"1\":{\"23\":1}}],[\"从右到左\",{\"1\":{\"21\":1,\"40\":1,\"43\":3,\"46\":3}}],[\"从上到下\",{\"1\":{\"21\":1}}],[\"程序的运行逻辑\",{\"1\":{\"21\":1}}],[\"类似数学表达\",{\"1\":{\"21\":1}}],[\"类似的有\",{\"1\":{\"20\":1}}],[\"==\",{\"1\":{\"62\":3,\"65\":1,\"66\":2,\"68\":2,\"69\":2,\"70\":2,\"71\":1}}],[\"=\",{\"1\":{\"21\":1,\"23\":3,\"24\":3,\"26\":3,\"28\":3,\"29\":1,\"31\":19,\"37\":4,\"39\":2,\"42\":2,\"43\":1,\"45\":2,\"46\":1,\"49\":2,\"50\":1,\"52\":2,\"53\":2,\"55\":1,\"60\":8,\"61\":5,\"62\":3,\"63\":31,\"65\":1,\"66\":6,\"68\":4,\"69\":4,\"70\":4,\"71\":2,\"76\":6,\"77\":1,\"79\":1,\"80\":3,\"81\":7,\"82\":3,\"83\":6,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":2,\"100\":4,\"101\":1,\"102\":1,\"103\":3,\"104\":4,\"105\":4,\"106\":2,\"107\":10}}],[\"初始化赋值语句\",{\"1\":{\"21\":1}}],[\"人\",{\"1\":{\"47\":2}}],[\"人民群众\",{\"1\":{\"21\":1}}],[\"人大代表\",{\"1\":{\"21\":1}}],[\"我代表的是广大人民群众的意志\",{\"1\":{\"21\":1}}],[\"我们更希望有类似模版\",{\"1\":{\"107\":1}}],[\"我们如何在\",{\"1\":{\"76\":1}}],[\"我们有时候不仅仅要看选择项以内的答案\",{\"1\":{\"76\":1}}],[\"我们需要通过以下规则产生两个新的数字\",{\"1\":{\"61\":1}}],[\"我们需要设立一个专门的人员跟踪\",{\"1\":{\"47\":1}}],[\"我们也不能说集合是有序的\",{\"1\":{\"53\":1}}],[\"我们讲究\",{\"1\":{\"47\":1}}],[\"我们是不是需要有一个类似仓库管理员的\",{\"1\":{\"47\":1}}],[\"我们说的不可变\",{\"1\":{\"40\":1}}],[\"我们可以修改这个默认空格间隔么\",{\"1\":{\"23\":1}}],[\"我们叫它什么名字\",{\"1\":{\"21\":1}}],[\"我们为什么不一开始直接为每一个学生分配一个信封呢\",{\"1\":{\"20\":1}}],[\"我们应该把刘奕彤\",{\"1\":{\"20\":1}}],[\"他们的权利不是自己获取的\",{\"1\":{\"21\":1}}],[\"是由一系列的\",{\"1\":{\"50\":1}}],[\"是由广大人民群众投票选举出来的\",{\"1\":{\"21\":1}}],[\"是否有空间\",{\"1\":{\"47\":1}}],[\"是否有位置\",{\"1\":{\"47\":2}}],[\"是统计一个用户在一周之内看了哪些用户的帖子\",{\"1\":{\"47\":1}}],[\"是在代码运行的过程当中\",{\"1\":{\"40\":1}}],[\"是python中的特殊类型\",{\"1\":{\"31\":1}}],[\"是同一个变量\",{\"1\":{\"31\":1}}],[\"是不是会一直变动\",{\"1\":{\"47\":1}}],[\"是不是在我们当前所处的空间当中开辟空间\",{\"1\":{\"20\":1}}],[\"是不是有大小了呢\",{\"1\":{\"20\":1}}],[\"是不是变化了\",{\"1\":{\"20\":1}}],[\"是不是鼓起来了\",{\"1\":{\"20\":1}}],[\"值\",{\"1\":{\"21\":2}}],[\"泥人\",{\"1\":{\"21\":1}}],[\"泥人可以代表说是女娲的后人\",{\"1\":{\"21\":1}}],[\"泥人没有生命\",{\"1\":{\"21\":1}}],[\"此时在聘请一个就显得浪费了\",{\"1\":{\"47\":1}}],[\"此时我们是不是需要聘请一个仓库管理员\",{\"1\":{\"47\":1}}],[\"此时\",{\"1\":{\"21\":1}}],[\"赋值运算符\",{\"0\":{\"63\":1}}],[\"赋值语句\",{\"0\":{\"21\":1}}],[\"赋予给泥人生命\",{\"1\":{\"21\":1}}],[\"女娲\",{\"1\":{\"21\":1}}],[\"女娲挥了挥手柳条\",{\"1\":{\"21\":1}}],[\"女娲捏了泥人\",{\"1\":{\"21\":1}}],[\"通过变量名代表或引用某个值\",{\"1\":{\"21\":1}}],[\"开辟空间\",{\"1\":{\"20\":1}}],[\"冰箱\",{\"1\":{\"20\":1}}],[\"显然是不行的🙅\",{\"1\":{\"53\":1}}],[\"显然是不会的\",{\"1\":{\"47\":1}}],[\"显然是不合适的\",{\"1\":{\"20\":1}}],[\"显然是的\",{\"1\":{\"20\":1}}],[\"信封在一开始是扁的\",{\"1\":{\"20\":1}}],[\"信息框\",{\"0\":{\"6\":1}}],[\"那么三引号呢\",{\"1\":{\"76\":1}}],[\"那么执行\",{\"1\":{\"66\":1}}],[\"那么你的代码应当输出两个数字\",{\"1\":{\"61\":3}}],[\"那么你想存放两个的时候\",{\"1\":{\"47\":1}}],[\"那么就不需要一个多余的\",{\"1\":{\"47\":1}}],[\"那么肯定选用元组更合适\",{\"1\":{\"47\":1}}],[\"那么则用列表更合适\",{\"1\":{\"47\":1}}],[\"那么信封\",{\"1\":{\"20\":1}}],[\"那么\",{\"1\":{\"20\":1,\"23\":1,\"47\":1,\"92\":1,\"93\":1}}],[\"接着给老师\",{\"1\":{\"20\":1}}],[\"总不能直接把每个月的月考成绩单直接给老师\",{\"1\":{\"20\":1}}],[\"老师要看刘奕彤\",{\"1\":{\"20\":1}}],[\"某一天\",{\"1\":{\"20\":1}}],[\"刘奕彤\",{\"1\":{\"20\":1}}],[\"马冬梅\",{\"1\":{\"20\":1}}],[\"李雷\",{\"1\":{\"20\":1}}],[\"每个单词的首字母大写\",{\"1\":{\"88\":1}}],[\"每个值之间默认以空格间隔\",{\"1\":{\"23\":1}}],[\"每个月需要统计班级中每个学生的月考成绩\",{\"1\":{\"20\":1}}],[\"每张纸上都会依次记录每个学生的成绩越到成绩\",{\"1\":{\"20\":1}}],[\"月考成绩会每个月一张纸\",{\"1\":{\"20\":1}}],[\"量\",{\"1\":{\"19\":1}}],[\"变化\",{\"1\":{\"19\":1}}],[\"变\",{\"1\":{\"19\":1}}],[\"变量只能存储基本数据类型的值\",{\"1\":{\"31\":1}}],[\"变量在使用之前必须被赋值\",{\"1\":{\"31\":1}}],[\"变量的命名规则\",{\"0\":{\"30\":1}}],[\"变量的值会被覆盖\",{\"1\":{\"20\":1}}],[\"变量名可以是\",{\"1\":{\"31\":1}}],[\"变量名可以以数字开始\",{\"1\":{\"31\":1}}],[\"变量名区分大小写\",{\"1\":{\"31\":1}}],[\"变量名不能包含空格\",{\"1\":{\"30\":1}}],[\"变量名\",{\"1\":{\"21\":2}}],[\"变量不就是在计算机的内存当中开辟空间\",{\"1\":{\"20\":1}}],[\"变量\",{\"0\":{\"17\":1},\"1\":{\"21\":3}}],[\"生活中的例子\",{\"0\":{\"18\":1}}],[\"生成链接\",{\"1\":{\"1\":1}}],[\"理解变量\",{\"0\":{\"18\":1}}],[\"py\",{\"1\":{\"107\":1}}],[\"pycharm\",{\"1\":{\"107\":1}}],[\"python所拥有的所有数据类型\",{\"1\":{\"43\":1}}],[\"python拥有的所有数据类型都可以作为元素之一\",{\"1\":{\"43\":1,\"46\":1}}],[\"python中变量的类型是静态的\",{\"1\":{\"31\":1}}],[\"python\",{\"1\":{\"26\":2,\"30\":3,\"31\":3,\"50\":2,\"61\":1,\"65\":6,\"66\":3,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"76\":1,\"107\":1},\"2\":{\"15\":1,\"32\":1,\"56\":1,\"72\":1,\"108\":1}}],[\"ps\",{\"1\":{\"80\":1,\"81\":1}}],[\"para\",{\"1\":{\"76\":1,\"77\":2,\"79\":6,\"80\":2}}],[\"paragraph\",{\"1\":{\"76\":1}}],[\"pass\",{\"1\":{\"30\":1}}],[\"p\",{\"1\":{\"71\":13}}],[\"power\",{\"1\":{\"70\":4}}],[\"pocula\",{\"1\":{\"0\":1}}],[\"product\",{\"1\":{\"69\":4}}],[\"print\",{\"0\":{\"22\":1,\"25\":1},\"1\":{\"23\":2,\"24\":1,\"26\":1,\"28\":1,\"29\":1,\"31\":4,\"37\":6,\"39\":3,\"42\":3,\"45\":3,\"49\":3,\"52\":3,\"53\":2,\"55\":2,\"61\":1,\"62\":12,\"63\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":6,\"77\":1,\"79\":4,\"80\":1,\"81\":3,\"82\":2,\"83\":5,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":2,\"100\":4,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":4}}],[\"split\",{\"0\":{\"104\":1},\"1\":{\"104\":4}}],[\"sihtrofnro\",{\"1\":{\"83\":1}}],[\"sihtrofnrob\",{\"1\":{\"83\":1}}],[\"studentcoder\",{\"1\":{\"107\":1}}],[\"steps\",{\"1\":{\"81\":1}}],[\"startswith\",{\"0\":{\"89\":1},\"1\":{\"89\":2}}],[\"start\",{\"1\":{\"80\":2,\"81\":2}}],[\"strip\",{\"0\":{\"100\":1},\"1\":{\"100\":4}}],[\"string3\",{\"1\":{\"107\":2}}],[\"string2\",{\"1\":{\"103\":2,\"107\":2}}],[\"string1\",{\"1\":{\"103\":2,\"107\":2}}],[\"string\",{\"1\":{\"39\":5,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"76\":2,\"80\":3,\"81\":11,\"82\":3,\"83\":8,\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":4,\"90\":4,\"91\":4,\"92\":6,\"93\":2,\"94\":4,\"95\":4,\"96\":4,\"97\":2,\"98\":2,\"99\":4,\"100\":8,\"101\":2,\"102\":2,\"103\":4,\"104\":5,\"105\":5,\"106\":5,\"107\":7}}],[\"str\",{\"0\":{\"38\":1},\"1\":{\"39\":2,\"107\":3}}],[\"substring\",{\"1\":{\"93\":1}}],[\"sum\",{\"1\":{\"68\":4}}],[\"suppose\",{\"1\":{\"31\":1}}],[\"swap\",{\"1\":{\"31\":1}}],[\"s\",{\"1\":{\"31\":3,\"106\":1}}],[\"select\",{\"1\":{\"80\":1,\"81\":7,\"82\":4,\"83\":10}}],[\"selecting\",{\"1\":{\"79\":4,\"80\":1}}],[\"set2\",{\"1\":{\"53\":2}}],[\"set1\",{\"1\":{\"52\":3,\"53\":2}}],[\"set\",{\"0\":{\"51\":1},\"1\":{\"52\":2}}],[\"secret\",{\"1\":{\"31\":1}}],[\"sep=\",{\"1\":{\"24\":1,\"26\":1,\"81\":1,\"103\":1,\"104\":1,\"105\":1}}],[\"sep\",{\"0\":{\"24\":1,\"26\":1},\"1\":{\"23\":1,\"81\":2,\"104\":2,\"105\":2,\"106\":1}}],[\"session\",{\"0\":{\"14\":1}}],[\"sacra\",{\"1\":{\"0\":1}}],[\"公式\",{\"0\":{\"10\":1}}],[\"9和1的和\",{\"1\":{\"61\":1}}],[\"91的反转\",{\"1\":{\"61\":1}}],[\"91\",{\"1\":{\"61\":1}}],[\"9999\",{\"1\":{\"66\":1}}],[\"99\",{\"1\":{\"61\":1}}],[\"96分\",{\"1\":{\"20\":1}}],[\"98分\",{\"1\":{\"20\":1}}],[\"9\",{\"0\":{\"10\":1,\"93\":1},\"1\":{\"59\":4,\"60\":4,\"61\":1,\"65\":2,\"66\":1,\"83\":1}}],[\"81\",{\"1\":{\"70\":1}}],[\"89分\",{\"1\":{\"20\":1}}],[\"8\",{\"0\":{\"9\":1,\"92\":1},\"1\":{\"59\":4,\"60\":1,\"61\":1,\"66\":2,\"68\":1}}],[\"7th\",{\"1\":{\"80\":1}}],[\"7\",{\"0\":{\"8\":1,\"54\":1,\"55\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"91\":1},\"1\":{\"59\":2,\"65\":2,\"66\":2}}],[\"6th\",{\"1\":{\"80\":1}}],[\"6+\",{\"1\":{\"50\":1}}],[\"6\",{\"0\":{\"7\":1,\"31\":1,\"51\":1,\"52\":1,\"53\":1,\"90\":1,\"107\":1},\"1\":{\"53\":1,\"59\":2,\"60\":1,\"65\":1,\"80\":1}}],[\"6号标题\",{\"1\":{\"1\":1}}],[\"500次都是\",{\"1\":{\"53\":1}}],[\"5\",{\"0\":{\"6\":1,\"30\":1,\"48\":1,\"49\":1,\"50\":1,\"63\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1},\"1\":{\"31\":1,\"37\":2,\"59\":2,\"63\":1,\"65\":8,\"66\":4,\"68\":1,\"69\":1,\"70\":1,\"71\":2,\"83\":1}}],[\"40\",{\"1\":{\"107\":1}}],[\"4\",{\"0\":{\"5\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"62\":1,\"71\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":1,\"88\":1},\"1\":{\"59\":4,\"60\":2,\"62\":2,\"63\":2,\"65\":12,\"66\":3,\"71\":1}}],[\"图片\",{\"0\":{\"4\":1}}],[\"3rd\",{\"1\":{\"79\":1,\"80\":1}}],[\"3333\",{\"1\":{\"65\":1}}],[\"3月的成绩抄写到单独的一张纸上\",{\"1\":{\"20\":1}}],[\"3月的成绩\",{\"1\":{\"20\":1}}],[\"3\",{\"0\":{\"4\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"26\":1,\"41\":1,\"42\":1,\"43\":1,\"47\":1,\"61\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":2,\"71\":1,\"77\":1,\"81\":1,\"87\":1},\"1\":{\"23\":2,\"24\":2,\"29\":2,\"31\":5,\"49\":2,\"50\":1,\"52\":2,\"53\":4,\"59\":4,\"60\":4,\"61\":1,\"62\":6,\"65\":13,\"66\":6,\"69\":1,\"81\":1,\"103\":1,\"104\":1,\"105\":1}}],[\"代码实现呢\",{\"1\":{\"76\":1}}],[\"代码模版\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"代码示例\",{\"0\":{\"37\":1,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"55\":1}}],[\"代码\",{\"0\":{\"3\":1},\"1\":{\"61\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"22\",{\"0\":{\"106\":1}}],[\"24\",{\"1\":{\"65\":1}}],[\"20231221214427299\",{\"1\":{\"83\":1}}],[\"20231221214402328\",{\"1\":{\"83\":1}}],[\"20231218095008709\",{\"1\":{\"76\":1}}],[\"20231218093224921\",{\"1\":{\"75\":1}}],[\"20231218084943233\",{\"1\":{\"59\":1}}],[\"20231217084933264\",{\"1\":{\"35\":1,\"43\":1}}],[\"20\",{\"0\":{\"104\":1},\"1\":{\"65\":1}}],[\"2和6的和\",{\"1\":{\"61\":1}}],[\"26的反转\",{\"1\":{\"61\":1}}],[\"26\",{\"1\":{\"61\":1}}],[\"21\",{\"0\":{\"105\":1},\"1\":{\"61\":2,\"65\":1}}],[\"2myvar\",{\"1\":{\"31\":1}}],[\"2月\",{\"1\":{\"20\":2}}],[\"2\",{\"0\":{\"3\":1,\"20\":1,\"21\":1,\"24\":1,\"29\":1,\"38\":1,\"39\":1,\"40\":2,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"60\":1,\"66\":1,\"69\":1,\"76\":1,\"80\":1,\"86\":1},\"1\":{\"23\":2,\"24\":2,\"29\":2,\"31\":5,\"42\":2,\"45\":2,\"49\":2,\"52\":4,\"53\":7,\"59\":8,\"60\":7,\"62\":10,\"63\":4,\"65\":12,\"66\":5,\"68\":1,\"79\":1,\"80\":1,\"81\":2,\"82\":2,\"91\":2,\"92\":1}}],[\"190\",{\"1\":{\"107\":4}}],[\"19\",{\"0\":{\"103\":1}}],[\"17\",{\"0\":{\"101\":1}}],[\"15\",{\"0\":{\"99\":1}}],[\"13\",{\"0\":{\"97\":1}}],[\"13579\",{\"1\":{\"81\":1,\"82\":1}}],[\"1最后一位开始往回倒\",{\"1\":{\"83\":1}}],[\"1走没有任何值\",{\"1\":{\"83\":1}}],[\"1st\",{\"1\":{\"79\":1}}],[\"11\",{\"0\":{\"95\":1},\"1\":{\"65\":1,\"83\":1}}],[\"16\",{\"0\":{\"100\":1},\"1\":{\"65\":1}}],[\"14\",{\"0\":{\"98\":1},\"1\":{\"65\":2}}],[\"1和8的和\",{\"1\":{\"61\":1}}],[\"1+1\",{\"1\":{\"59\":2}}],[\"18的反转\",{\"1\":{\"61\":1}}],[\"18\",{\"0\":{\"102\":1},\"1\":{\"49\":2,\"61\":1,\"76\":1}}],[\"12\",{\"0\":{\"96\":1},\"1\":{\"43\":2,\"46\":2,\"61\":2,\"65\":1,\"69\":1,\"77\":1,\"92\":1}}],[\"123\",{\"1\":{\"31\":1}}],[\"123abc\",{\"1\":{\"31\":1}}],[\"1开始\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"1~1~1\",{\"1\":{\"26\":1}}],[\"1月\",{\"1\":{\"20\":2}}],[\"10\",{\"0\":{\"11\":1,\"94\":1},\"1\":{\"59\":1,\"61\":5,\"63\":12,\"65\":1,\"66\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"1\",{\"0\":{\"2\":1,\"14\":1,\"18\":1,\"19\":2,\"20\":1,\"23\":1,\"28\":1,\"36\":1,\"37\":2,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"55\":1,\"59\":1,\"65\":1,\"68\":1,\"75\":1,\"79\":1,\"85\":1},\"1\":{\"23\":2,\"24\":2,\"26\":3,\"28\":4,\"29\":2,\"31\":5,\"37\":4,\"42\":8,\"43\":2,\"45\":8,\"46\":2,\"49\":10,\"52\":8,\"53\":12,\"59\":2,\"60\":6,\"62\":6,\"63\":2,\"65\":2,\"66\":3,\"70\":1,\"79\":2,\"81\":2,\"82\":1,\"83\":9,\"92\":2,\"107\":1}}],[\"链接\",{\"0\":{\"7\":1},\"1\":{\"1\":1}}],[\"链接名\",{\"1\":{\"1\":1}}],[\"+1\",{\"1\":{\"80\":1,\"81\":1}}],[\"+=\",{\"1\":{\"63\":4}}],[\"+\",{\"1\":{\"1\":1,\"60\":2,\"61\":2,\"63\":1,\"65\":5,\"68\":2,\"107\":7}}],[\"复制粘贴\",{\"1\":{\"1\":1}}],[\"插入图片\",{\"1\":{\"1\":1}}],[\"```python\",{\"1\":{\"1\":1}}],[\"拓展开始\",{\"1\":{\"1\":1}}],[\"标题\",{\"1\":{\"1\":1}}],[\"文章标题\",{\"0\":{\"2\":1}}],[\"文章内开始第一行要打三个\",{\"1\":{\"1\":1}}],[\"文件名不要使用中文\",{\"1\":{\"1\":1}}],[\"纪录由此开始\",{\"1\":{\"0\":1}}],[\"剑桥大学工程系\",{\"1\":{\"0\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map

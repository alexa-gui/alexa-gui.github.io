const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/zh/\":{\"documentCount\":209,\"nextId\":209,\"documentIds\":{\"0\":\"v-858cfdd6\",\"1\":\"v-1844fccf\",\"2\":\"v-1844fccf#_1-文章标题\",\"3\":\"v-1844fccf#_2-代码\",\"4\":\"v-1844fccf#_3-图片\",\"5\":\"v-1844fccf#_4-有序标题和无序标题-任务列表\",\"6\":\"v-1844fccf#_5-信息框-提示容器\",\"7\":\"v-1844fccf#_6-链接\",\"8\":\"v-1844fccf#_7-下划线\",\"9\":\"v-1844fccf#_8-对齐\",\"10\":\"v-1844fccf#_9-公式\",\"11\":\"v-1844fccf#_10-多媒体\",\"12\":\"v-1844fccf@0\",\"13\":\"v-1844fccf@1\",\"14\":\"v-971efe90\",\"15\":\"v-971efe90@0\",\"16\":\"v-971efe90@1\",\"17\":\"v-0ca6d0c8\",\"18\":\"v-0ca6d0c8#_1-理解变量——生活中的例子\",\"19\":\"v-0ca6d0c8#_1-1-从字面意思去理解\",\"20\":\"v-0ca6d0c8#_1-2-举个例子🌰\",\"21\":\"v-0ca6d0c8#_2-如何创建变量——赋值语句\",\"22\":\"v-0ca6d0c8#_3-探究-print\",\"23\":\"v-0ca6d0c8#_3-1-同时输出多个数据\",\"24\":\"v-0ca6d0c8#_3-2-sep-修改多个变量同时输出的间隔\",\"25\":\"v-0ca6d0c8#_3-3-end-修改-print-输出结尾方式\",\"26\":\"v-0ca6d0c8#_3-4-end-和-sep-可以同时使用\",\"27\":\"v-0ca6d0c8#_4-进阶的赋值方法\",\"28\":\"v-0ca6d0c8#_4-1-多个变量同时赋予相同的值\",\"29\":\"v-0ca6d0c8#_4-2-多个变量同时赋予不同的值\",\"30\":\"v-0ca6d0c8#_5-变量的命名规则\",\"31\":\"v-0ca6d0c8#_6-练习\",\"32\":\"v-0ca6d0c8@0\",\"33\":\"v-0ca6d0c8@1\",\"34\":\"v-3fb79b75\",\"35\":\"v-3fb79b75#数据类型\",\"36\":\"v-3fb79b75#_1-数字型-int-float\",\"37\":\"v-3fb79b75#_1-1-代码示例\",\"38\":\"v-3fb79b75#_2-字符串-str\",\"39\":\"v-3fb79b75#_2-1-代码示例\",\"40\":\"v-3fb79b75#_2-2-字符串的三大特性\",\"41\":\"v-3fb79b75#_3-列表-list\",\"42\":\"v-3fb79b75#_3-1-代码示例\",\"43\":\"v-3fb79b75#_3-2-列表的三大特性\",\"44\":\"v-3fb79b75#_4-元组-tuple\",\"45\":\"v-3fb79b75#_4-1-代码示例\",\"46\":\"v-3fb79b75#_4-2-元组的三大特性\",\"47\":\"v-3fb79b75#_4-3-元组vs列表\",\"48\":\"v-3fb79b75#_5-字典-dict\",\"49\":\"v-3fb79b75#_5-1-代码示例\",\"50\":\"v-3fb79b75#_5-2-字典的特性\",\"51\":\"v-3fb79b75#_6-集合-set\",\"52\":\"v-3fb79b75#_6-1-代码示例\",\"53\":\"v-3fb79b75#_6-2-集合的特性\",\"54\":\"v-3fb79b75#_7-布尔型-bool\",\"55\":\"v-3fb79b75#_7-1-代码示例\",\"56\":\"v-3fb79b75@0\",\"57\":\"v-3fb79b75@1\",\"58\":\"v-151f8240\",\"59\":\"v-151f8240#_1-数字型的特点\",\"60\":\"v-151f8240#_2-算术运算符\",\"61\":\"v-151f8240#_3-小试牛刀-数字变换\",\"62\":\"v-151f8240#_4-比较运算符-比较值的大小\",\"63\":\"v-151f8240#_5-赋值运算符\",\"64\":\"v-151f8240#_7-练习\",\"65\":\"v-151f8240#_7-1-选择题\",\"66\":\"v-151f8240#_7-2-填空\",\"67\":\"v-151f8240#_7-3-编程题\",\"68\":\"v-151f8240#_7-3-1-数字和与差\",\"69\":\"v-151f8240#_7-3-2-数字的乘法和除法\",\"70\":\"v-151f8240#_7-3-3-求余和幂运算\",\"71\":\"v-151f8240#_7-3-4-比较运算\",\"72\":\"v-151f8240@0\",\"73\":\"v-151f8240@1\",\"74\":\"v-2d71366a\",\"75\":\"v-2d71366a#_1-字符串的定义\",\"76\":\"v-2d71366a#_2-创建字符串\",\"77\":\"v-2d71366a#_3-字符串长度\",\"78\":\"v-2d71366a#_4-字符串中的字符获取\",\"79\":\"v-2d71366a#_4-1-获取单个字符\",\"80\":\"v-2d71366a#_4-2-获取一串连续字符\",\"81\":\"v-2d71366a#_4-3-获取多个不连续字符\",\"82\":\"v-2d71366a#_4-4-优化\",\"83\":\"v-2d71366a#_4-5-字符串倒序\",\"84\":\"v-2d71366a#_5-字符串的内置方法\",\"85\":\"v-2d71366a#_5-1-upper\",\"86\":\"v-2d71366a#_5-2-lower\",\"87\":\"v-2d71366a#_5-3-capitalize\",\"88\":\"v-2d71366a#_5-4-title\",\"89\":\"v-2d71366a#_5-5-startswith\",\"90\":\"v-2d71366a#_5-6-endswith\",\"91\":\"v-2d71366a#_5-7-count\",\"92\":\"v-2d71366a#_5-8-find\",\"93\":\"v-2d71366a#_5-9-index\",\"94\":\"v-2d71366a#_5-10-isdigit\",\"95\":\"v-2d71366a#_5-11-isalpha\",\"96\":\"v-2d71366a#_5-12-isalnum\",\"97\":\"v-2d71366a#_5-13-isupper\",\"98\":\"v-2d71366a#_5-14-islower\",\"99\":\"v-2d71366a#_5-15-isspace\",\"100\":\"v-2d71366a#_5-16-strip\",\"101\":\"v-2d71366a#_5-17-lstrip\",\"102\":\"v-2d71366a#_5-18-rstrip\",\"103\":\"v-2d71366a#_5-19-replace\",\"104\":\"v-2d71366a#_5-20-split\",\"105\":\"v-2d71366a#_5-21-rsplit\",\"106\":\"v-2d71366a#_5-22-join\",\"107\":\"v-2d71366a#_6-字符串格式化\",\"108\":\"v-2d71366a#_6-1-format\",\"109\":\"v-2d71366a#_6-2-f\",\"110\":\"v-2d71366a#_6-3-格式化\",\"111\":\"v-2d71366a#_6-4-f-和-format、-的优缺点\",\"112\":\"v-2d71366a#_7-字符串的不可变性\",\"113\":\"v-2d71366a#_8-字符串转义\",\"114\":\"v-2d71366a#_9-字符串的连接\",\"115\":\"v-2d71366a#_10-读取用户输入\",\"116\":\"v-2d71366a#_10-1-input-基本使用\",\"117\":\"v-2d71366a#_10-2-input-输入提示\",\"118\":\"v-2d71366a#_10-3-input-的特点\",\"119\":\"v-2d71366a#_10-3-1-input-得到类型皆为字符串「str」\",\"120\":\"v-2d71366a#_10-3-2-方法一-强制类型转换\",\"121\":\"v-2d71366a#_10-3-3-方法二-使用eval\",\"122\":\"v-2d71366a#_11-小试牛刀\",\"123\":\"v-2d71366a@0\",\"124\":\"v-2d71366a@1\",\"125\":\"v-012ac13e\",\"126\":\"v-012ac13e#_1-列表结构\",\"127\":\"v-012ac13e#_2-获取列表中的某个元素\",\"128\":\"v-012ac13e#_2-1-列表下标的组成\",\"129\":\"v-012ac13e#_2-2-提取单个元素\",\"130\":\"v-012ac13e#_2-3-获取列表中连续的几个元素\",\"131\":\"v-012ac13e#_2-4-获取列表中连续且特定间隔的元素\",\"132\":\"v-012ac13e#_3-列表的切片赋值\",\"133\":\"v-012ac13e#_4-小试牛刀\",\"134\":\"v-012ac13e#_5-在列表的特定位置插入元素-「-insert-index-element-」\",\"135\":\"v-012ac13e#_6-列表长度\",\"136\":\"v-012ac13e#_7-修改列表中的元素\",\"137\":\"v-012ac13e#_8-向列表添加元素\",\"138\":\"v-012ac13e#_8-1-添加单个元素-「-append-」\",\"139\":\"v-012ac13e#_8-2-添加多个元素\",\"140\":\"v-012ac13e#_9-删除列表中的元素\",\"141\":\"v-012ac13e#_9-1-del\",\"142\":\"v-012ac13e#_9-2-pop\",\"143\":\"v-012ac13e#_9-3-remove\",\"144\":\"v-012ac13e#_10-两个列表相加\",\"145\":\"v-012ac13e#_11-判断某个元素是否存在于列表中-「value-in-sequence」\",\"146\":\"v-012ac13e#_12-获取列表中某个元素的重复次数-「-count-」\",\"147\":\"v-012ac13e#_13-获取列表中某个元素第一次出现的位置-「-index-」\",\"148\":\"v-012ac13e#_14-列表排序\",\"149\":\"v-012ac13e#_14-1-sort-reverse-false\",\"150\":\"v-012ac13e#_14-2-sorted-list-reverse-false\",\"151\":\"v-012ac13e@0\",\"152\":\"v-012ac13e@1\",\"153\":\"v-3d2e458d\",\"154\":\"v-3d2e458d#_1-创建元组\",\"155\":\"v-3d2e458d#_2-列表和元组的对比\",\"156\":\"v-3d2e458d#_3-元组是不可变的\",\"157\":\"v-3d2e458d#_4-元组的取值和分片操作\",\"158\":\"v-3d2e458d#_5-元组的特点\",\"159\":\"v-3d2e458d#_6-元组的拼接\",\"160\":\"v-3d2e458d#_7-元组的排序\",\"161\":\"v-3d2e458d#_7-1-小试牛刀-「根据现有的知识排序」\",\"162\":\"v-3d2e458d#_7-2-使用-sorted\",\"163\":\"v-3d2e458d#_8-zip\",\"164\":\"v-3d2e458d@0\",\"165\":\"v-3d2e458d@1\",\"166\":\"v-3a6cfaa8\",\"167\":\"v-3a6cfaa8#_1-如何创建一个电话簿\",\"168\":\"v-3a6cfaa8#_2-字典结构\",\"169\":\"v-3a6cfaa8#_3-字典结构-key-value\",\"170\":\"v-3a6cfaa8#_4-用字典dict函数创建字典\",\"171\":\"v-3a6cfaa8#_5-访问字典的数据\",\"172\":\"v-3a6cfaa8#_5-1-用中括号访问\",\"173\":\"v-3a6cfaa8#_5-2-上面的提取方法存在的问题\",\"174\":\"v-3a6cfaa8#_5-3-使用-get-解决\",\"175\":\"v-3a6cfaa8#_6-更新字典的数据\",\"176\":\"v-3a6cfaa8#_7-字典数据删除\",\"177\":\"v-3a6cfaa8#_8-字典结构嵌套字典\",\"178\":\"v-3a6cfaa8#_8-1-字典列表\",\"179\":\"v-3a6cfaa8#_8-2-在字典中存储列表\",\"180\":\"v-3a6cfaa8#_8-3-在字典中存储字典\",\"181\":\"v-3a6cfaa8#_9-字典常见方法\",\"182\":\"v-3a6cfaa8#_9-1-pop-key\",\"183\":\"v-3a6cfaa8#_9-2-keys\",\"184\":\"v-3a6cfaa8#_9-3-values\",\"185\":\"v-3a6cfaa8#_9-4-items\",\"186\":\"v-3a6cfaa8#_9-5-in\",\"187\":\"v-3a6cfaa8@0\",\"188\":\"v-3a6cfaa8@1\",\"189\":\"v-7b517271\",\"190\":\"v-7b517271#_1-创建集合\",\"191\":\"v-7b517271#_2-集合的交集\",\"192\":\"v-7b517271#_3-集合的并集\",\"193\":\"v-7b517271#_4-集合的差集\",\"194\":\"v-7b517271#_5-集合的对称差集\",\"195\":\"v-7b517271#_6-思考\",\"196\":\"v-7b517271#_7-add-添加集合元素\",\"197\":\"v-7b517271@0\",\"198\":\"v-7b517271@1\",\"199\":\"v-18189176\",\"200\":\"v-18189176#_1-布尔值\",\"201\":\"v-18189176#_2-逻辑运算符\",\"202\":\"v-18189176#_3-表达式应用-—-条件测试\",\"203\":\"v-18189176#_3-1-多条件检查\",\"204\":\"v-18189176@0\",\"205\":\"v-18189176@1\",\"206\":\"v-1efb520e\",\"207\":\"v-1efb520e@0\",\"208\":\"v-1efb520e@1\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,7],\"1\":[2,25],\"2\":[2],\"3\":[2],\"4\":[2],\"5\":[3],\"6\":[3],\"7\":[2],\"8\":[2],\"9\":[2],\"10\":[2],\"11\":[2],\"12\":[null,null,2],\"13\":[null,null,2],\"14\":[4],\"15\":[null,null,1],\"16\":[null,null,2],\"17\":[1],\"18\":[3],\"19\":[2,4],\"20\":[3,48],\"21\":[3,31],\"22\":[3],\"23\":[3,18],\"24\":[4,12],\"25\":[5],\"26\":[6,14],\"27\":[2],\"28\":[3,8],\"29\":[3,10],\"30\":[2,61],\"31\":[2,137],\"32\":[null,null,1],\"33\":[null,null,2],\"34\":[1],\"35\":[1,2],\"36\":[5],\"37\":[2,21],\"38\":[4],\"39\":[3,16],\"40\":[2,23],\"41\":[4],\"42\":[3,24],\"43\":[3,29],\"44\":[4],\"45\":[3,24],\"46\":[3,25],\"47\":[3,80],\"48\":[4],\"49\":[3,24],\"50\":[3,32],\"51\":[4],\"52\":[3,20],\"53\":[3,49],\"54\":[4],\"55\":[3,11],\"56\":[null,null,1],\"57\":[null,null,2],\"58\":[1],\"59\":[2,26],\"60\":[2,25],\"61\":[3,50],\"62\":[3,26],\"63\":[2,22],\"64\":[2],\"65\":[3,49],\"66\":[3,34],\"67\":[3,6],\"68\":[5,28],\"69\":[4,25],\"70\":[3,30],\"71\":[4,33],\"72\":[null,null,1],\"73\":[null,null,2],\"74\":[1],\"75\":[2,5],\"76\":[2,48],\"77\":[2,13],\"78\":[2],\"79\":[3,16],\"80\":[3,30],\"81\":[3,32],\"82\":[2,15],\"83\":[3,41],\"84\":[2],\"85\":[4,9],\"86\":[4,9],\"87\":[4,9],\"88\":[4,15],\"89\":[3,15],\"90\":[4,15],\"91\":[4,15],\"92\":[4,24],\"93\":[4,23],\"94\":[4,13],\"95\":[4,13],\"96\":[4,14],\"97\":[4,12],\"98\":[4,12],\"99\":[4,13],\"100\":[4,15],\"101\":[4,11],\"102\":[4,11],\"103\":[4,21],\"104\":[4,29],\"105\":[4,27],\"106\":[4,22],\"107\":[2,69],\"108\":[4,41],\"109\":[3,26],\"110\":[3,32],\"111\":[6,10],\"112\":[2,51],\"113\":[2,45],\"114\":[2,18],\"115\":[2],\"116\":[4,10],\"117\":[4,21],\"118\":[4],\"119\":[7,23],\"120\":[5,40],\"121\":[5,122],\"122\":[2,16],\"123\":[null,null,1],\"124\":[null,null,2],\"125\":[1],\"126\":[2,40],\"127\":[2],\"128\":[3,5],\"129\":[2,13],\"130\":[3,22],\"131\":[3,27],\"132\":[2,39],\"133\":[2,17],\"134\":[6,26],\"135\":[2,13],\"136\":[2,66],\"137\":[2],\"138\":[5,19],\"139\":[3,15],\"140\":[2],\"141\":[3,39],\"142\":[4,17],\"143\":[4,23],\"144\":[2,16],\"145\":[6,16],\"146\":[4,11],\"147\":[4,17],\"148\":[2],\"149\":[5,17],\"150\":[6,13],\"151\":[null,null,1],\"152\":[null,null,2],\"153\":[1],\"154\":[2,14],\"155\":[2,14],\"156\":[2,36],\"157\":[2,11],\"158\":[2,33],\"159\":[2,16],\"160\":[2],\"161\":[5,28],\"162\":[5,22],\"163\":[3,58],\"164\":[null,null,1],\"165\":[null,null,2],\"166\":[1],\"167\":[2,41],\"168\":[2,23],\"169\":[4,46],\"170\":[2,82],\"171\":[2],\"172\":[3,10],\"173\":[3,34],\"174\":[5,50],\"175\":[2,18],\"176\":[2,59],\"177\":[2,6],\"178\":[3,30],\"179\":[3,16],\"180\":[3,19],\"181\":[2],\"182\":[5,13],\"183\":[4,15],\"184\":[4,15],\"185\":[4,17],\"186\":[3,18],\"187\":[null,null,1],\"188\":[null,null,2],\"189\":[1],\"190\":[2,13],\"191\":[2,19],\"192\":[2,20],\"193\":[2,20],\"194\":[2,25],\"195\":[2,20],\"196\":[3,16],\"197\":[null,null,1],\"198\":[null,null,2],\"199\":[1],\"200\":[2,19],\"201\":[2,47],\"202\":[3,3],\"203\":[3,18],\"204\":[null,null,1],\"205\":[null,null,2],\"206\":[1,9],\"207\":[null,null,1],\"208\":[null,null,2]},\"averageFieldLength\":[2.952513114295265,24.21700530405617,0.6268448332144917],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"剑桥大学工程系\",\"“Hinc lucem et pocula sacra.”\",\"纪录由此开始\"]},\"1\":{\"h\":\"Typora guide\",\"t\":[\"文件名不要使用中文\",\"用减号代替空格\",\"文章内开始第一行要打三个- - -\",\"标题 两个井号空格 或者三个井号空格 一共有2-6号标题 除去文章title\",\"三个冒号+md-demo 拓展开始 三个冒号结束\",\"输入代码 ```python 再开始打\",\"插入图片 复制粘贴 会自动生成文件夹 assests\",\"生成链接 [链接名]+(链接)\"]},\"2\":{\"h\":\"1. 文章标题\"},\"3\":{\"h\":\"2. 代码\"},\"4\":{\"h\":\"3. 图片\"},\"5\":{\"h\":\"4. 有序标题和无序标题, 任务列表\"},\"6\":{\"h\":\"5. 信息框/提示容器\"},\"7\":{\"h\":\"6. 链接\"},\"8\":{\"h\":\"7. 下划线\"},\"9\":{\"h\":\"8. 对齐\"},\"10\":{\"h\":\"9. 公式\"},\"11\":{\"h\":\"10. 多媒体\"},\"12\":{\"c\":[\"Web design\"]},\"13\":{\"c\":[\"web\",\"typora\"]},\"14\":{\"h\":\"CUEA mentoring session 1\"},\"15\":{\"c\":[\"Python\"]},\"16\":{\"c\":[\"web\",\"typora\"]},\"17\":{\"h\":\"变量\"},\"18\":{\"h\":\"1. 理解变量——生活中的例子\"},\"19\":{\"h\":\"1.1 从字面意思去理解\",\"t\":[\"变：变化\",\"量：大小\"]},\"20\":{\"h\":\"1.2 举个例子🌰\",\"t\":[\"假如，你是班级当中的课代表，每个月需要统计班级中每个学生的月考成绩。月考成绩会每个月一张纸，每张纸上都会依次记录每个学生的成绩越到成绩，例如：\",\"李雷 98分\",\"马冬梅 89分\",\"刘奕彤 96分\",\"......\",\"某一天，老师要看刘奕彤 1月、2月、3月的成绩，这个时候作为课代表的你需要怎么办。——总不能直接把每个月的月考成绩单直接给老师，显然是不合适的。\",\"我们应该把刘奕彤 1月、2月、3月的成绩抄写到单独的一张纸上，接着给老师。\",\"那么，我们为什么不一开始直接为每一个学生分配一个信封呢？（也可以是档案袋）信封在一开始是扁的，当我们放东西（数据）进去之后，是不是鼓起来了？——是不是变化了？是不是有大小了呢？显然是的。\",\"那么信封，是不是在我们当前所处的空间当中开辟空间，来存放数据并且说这是信封。\",\"类似的有：冰箱，不也是在我们当前所处的空间中，开辟空间。\",\"——所以，变量不就是在计算机的内存当中开辟空间，来存储数据。\",\"特点： 变量的值会被覆盖，只会记着最后一个值。\"]},\"21\":{\"h\":\"2. 如何创建变量——赋值语句\",\"t\":[\"变量：通过变量名代表或引用某个值。\",\"女娲捏了泥人，泥人没有生命，女娲挥了挥手柳条，赋予给泥人生命。此时，泥人可以代表说是女娲的后人。「变量：泥人，值：女娲」\",\"全国人民代表大会，中的人大代表，是由广大人民群众投票选举出来的。他们的权利不是自己获取的，所以他们可以说：我代表的是广大人民群众的意志。「变量：人大代表，值：人民群众」\",\"初始化赋值语句: 变量名 = 表达式\",\"变量名：就是这个空间，我们叫它什么名字；\",\"表达式：类似数学表达；\",\"程序的运行逻辑：从上到下，从右到左，最后才是赋值。\"]},\"22\":{\"h\":\"3. 探究 print\"},\"23\":{\"h\":\"3.1 同时输出多个数据\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c) # ---output--- 1 2 3 \",\"从输出的结果可以看出，print 同时输出多个变量，每个值之间默认以空格间隔。\",\"那么，我们可以修改这个默认空格间隔么？——答案显然是可以的。\",\"使用 sep。\"]},\"24\":{\"h\":\"3.2 sep 修改多个变量同时输出的间隔\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c, sep=' 间隔 ') # ---output--- 1 间隔 2 间隔 3 \"]},\"25\":{\"h\":\"3.3 end 修改 print 输出结尾方式\"},\"26\":{\"h\":\"3.4 end 和 sep 可以同时使用\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep=\\\"~\\\", end=\\\" love Python\\\") # ---output--- 1~1~1 love Python \"]},\"27\":{\"h\":\"4. 进阶的赋值方法\"},\"28\":{\"h\":\"4.1 多个变量同时赋予相同的值\",\"t\":[\"a = b = c = 1 print(a, b, c) # ---output--- 1 1 1 \"]},\"29\":{\"h\":\"4.2 多个变量同时赋予不同的值\",\"t\":[\"a, b, c = 1, 2, 3 print(a, b, c) # ---output--- 1 2 3 \"]},\"30\":{\"h\":\"5. 变量的命名规则\",\"t\":[\"大小写英文、数字和 _ 的结合，且不能用数字开头；\",\"系统关键词不能做变量名使用「获取关键词列表：help('keywords')\",\"Python 中的变量名区分大小写；\",\"变量名不能包含空格，但是可以使用下划线来分隔其中的单词；\",\"不要使用 Python 的内置函数名称做变量；\",\"Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not \"]},\"31\":{\"h\":\"6. 练习\",\"t\":[\"在 Python 中，变量名可以以数字开始。\",\"[ ] 对\",\"[x] 错\",\"在 Python 中，以下哪个变量名是有效的？\",\"[ ] 2myVar\",\"[x] myVar2\",\"[ ] my-var\",\"[ ] my var\",\"在Python中，变量名区分大小写。\",\"[x] 对\",\"[ ] 错\",\"在Python中，my_var 和 myVar 是同一个变量。\",\"[ ] 对\",\"[x] 错\",\"变量名可以是 Python 中的关键字。\",\"[ ] 对\",\"[x] 错\",\"None 是Python中的特殊类型，表示没有值或空值。\",\"[x] 对\",\"[ ] 错\",\"在Python中，以下哪个是有效的变量赋值？\",\"[ ] 123abc = \\\"hello\\\"\",\"[ ] for = \\\"world\\\"\",\"[x] _hidden = \\\"secret\\\"\",\"[ ] import = 123\",\"在Python中，一个变量可以同时被赋予多个值。\",\"[ ] 对\",\"[x] 错\",\"在Python中，以下哪个是多变量赋值？\",\"[x] a, b, c = 1, 2, 3\",\"[ ] a = 1, b = 2, c = 3\",\"[ ] a; b; c = 1; 2; 3\",\"[ ] a = 1; b = 2; c = 3;\",\"变量在使用之前必须被赋值。\",\"[x] 对\",\"[ ] 错\",\"Python中变量的类型是静态的，一旦赋值就不能改变。\",\"[ ] 对\",\"[x] 错\",\"在Python中，以下哪个表示全局变量？\",\"[ ] var = \\\"hello\\\"\",\"[ ] global var ✅\",\"[x] var(global) ❌\",\"[ ] def var():\",\"以下哪个表示删除变量？\",\"[ ] delete x\",\"[ ] del x ✅\",\"[x] remove x ❌\",\"[ ] destroy x\",\"x = 5 之后 y = x，现在改变 y 的值，x 的值也会改变。\",\"[ ] 对\",\"[x] 错\",\"x = [1, 2, 3] 之后 y = x，现在改变 y 的列表内容，x 的内容也会改变。\",\"[ ] 对 ✅\",\"[x] 错 ❌\",\"在Python中，变量只能存储基本数据类型的值，如整数或字符串。\",\"[ ] 对\",\"[x] 错\",\"交换果汁\",\"假如你有两个小孩，哥哥叫：Austin，弟弟叫：Jaden。\",\"Austin 想喝果汁，Jaden 想喝可乐。哥哥和弟弟都有专属的杯子，不喜欢用对方的杯子。\",\"家中仅剩一杯果汁、一杯可乐，你不小心把哥哥的杯子装了可乐，弟弟的杯子装了果汁。\",\"问：如何交换哥哥与弟弟杯中的果汁？\",\"zh\",\"Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don't like to use each other's cups. There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother's cup with cola and the younger brother's cup with juice. How can you swap the juice in the brothers' cups?\",\"警告！！！\",\"不要出现如下方法！！！\",\"Austin = \\\"Coke\\\" Jaden = \\\"juice\\\" print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) # 待补充代码 print(\\\"Austin\\\", Jaden) print(\\\"Jaden\\\", Austin) \",\"创建变量并输出\",\"输出效果：\",\"Austin Jaden Alex Cava \",\"输出效果如下：\",\"Austin$Jaden$Alex$Cava% \"]},\"32\":{\"c\":[\"Python\"]},\"33\":{\"c\":[\"web\",\"typora\"]},\"34\":{\"h\":\"数据类型\"},\"35\":{\"h\":\"数据类型\",\"t\":[\"image-20231217084933264\"]},\"36\":{\"h\":\"1. 数字型 [int, float]\"},\"37\":{\"h\":\"1.1 代码示例\",\"t\":[\"整型\",\"int_num = 1 t = type(int_num) # check data type print(int_num) print(\\\"int num type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output 1 int num type is:>>> <class 'int'> 直接检测数据类型，并输出:>>> <class 'int'> \",\"浮点数\",\"float_num = 1.5 t = type(float_num) # check data type print(float_num) print(\\\"float num type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output 1.5 float num type is:>>> <class 'float'> 直接检测数据类型，并输出:>>> <class 'float'> \"]},\"38\":{\"h\":\"2. 字符串 [str]\"},\"39\":{\"h\":\"2.1 代码示例\",\"t\":[\"string = \\\"Hello Alexa\\\" t = type(string) print(string) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output Hello Alexa string type is:>>> <class 'str'> 直接检测数据类型，并输出:>>> <class 'str'> \"]},\"40\":{\"h\":\"2.2 字符串的三大特性\",\"t\":[\"有序性 \",\"从左到右，下标从0开始\",\"从右到左，下标从-1开始\",\"引号里面出现的都算一个下标\",\"不可变性 \",\"字符串被创建出来之后就不能改变\",\"注意⚠️：我们说的不可变，是在代码运行的过程当中，不能对字符串修改，添加，删除\",\"任意字符 \",\"键盘上可以输入的字符，都可以是字符串的元素\",\"字符放到字符串中，都将成为字符串的类型，也就是里面的每一个元素都可以被称为「子字符」\"]},\"41\":{\"h\":\"3. 列表 [list]\"},\"42\":{\"h\":\"3.1 代码示例\",\"t\":[\"lst = [\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False] t = type(lst) print(lst) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output ['Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False] string type is:>>> <class 'list'> 直接检测数据类型，并输出:>>> <class 'list'> \"]},\"43\":{\"h\":\"3.2 列表的三大特性\",\"t\":[\"有序性 \",\"从左到右，下标从0开始\",\"从右到左，下标从-1开始\",\"列表里面每个元素算一个 \",\"比如: lst = [“alexa”, 12]\",\"上面lst有两个元素，下标分别是： \",\"“alexa”, 从左到右0，从右到左-1\",\"12, 从左到右1，从右到左-1\",\"可变性：在程序运行的过程当中，列表可以「添加，改变，删除」\",\"任意数据类型：python拥有的所有数据类型都可以作为元素之一\",\"Python所拥有的所有数据类型「仅包含基础数据类型」\",\"image-20231217084933264\"]},\"44\":{\"h\":\"4. 元组 [tuple]\"},\"45\":{\"h\":\"4.1 代码示例\",\"t\":[\"tup = (\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False) t = type(tup) print(tup) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output ('Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False) string type is:>>> <class 'tuple'> 直接检测数据类型，并输出:>>> <class 'tuple'> \"]},\"46\":{\"h\":\"4.2 元组的三大特性\",\"t\":[\"有序性 \",\"从左到右，下标从0开始\",\"从右到左，下标从-1开始\",\"元组里面每个元素算一个 \",\"比如: tup = (“alexa”, 12)\",\"上面tup有两个元素，下标分别是： \",\"“alexa”, 从左到右0，从右到左-1\",\"12, 从左到右1，从右到左-1\",\"不可变性：在程序运行的过程当中，元组不可以「添加，改变，删除」\",\"任意数据类型：python拥有的所有数据类型都可以作为元素之一\"]},\"47\":{\"h\":\"4.3 元组VS列表\",\"t\":[\"为什么🧐有列表后，还需要元组\",\"列表和元组到底用哪一个呢？\",\"如果存储的数据或数量是可变的，比如社交平台上的一个日志功能，是统计一个用户在一周之内看了哪些用户的帖子——那么则用列表更合适。\",\"如果存储的数据和数量不变，比如你有一个系统（软件），需要返回的是一个地点的经纬度，然后直接传给用户查看——那么肯定选用元组更合适。\",\"假设\",\"假设1：现在有一个仓库，你要向仓库添加物品。仓库很大，现有的物品也很多，你不知道还有没有位置可以存放。此时我们是不是需要聘请一个仓库管理员，这样我们就可以直接问仓库管理员：里面还有哪个位置（是否有位置？）仓库管理员会告诉你，并且你可以直接把你的物品，添加进去。\",\"问题来了，仓库管理员为什么知道仓库是否有位置？——因为仓库管理员会一直跟踪这个仓库的状态；\",\"假设2：现在有一个原子弹的仓库，仓库创建之后，只能存放一个原子弹。那么，我们需要设立一个专门的人员跟踪：原子弹仓库的状态吗？——不需要，此时在聘请一个就显得浪费了。（不然，领导没油水了～hhhhh）\",\"Why？\",\"用户日志📔，是不是会一直变动（记录📝看了哪些帖子），我们是不是需要有一个类似仓库管理员的“人”，来跟踪并且知道：是否有位置（是否有空间/内存），还需要知道在哪里添加。——列表更合适，因为列表可变。「可变意味着：添加、删除、修改」 \",\"元组为什么不合适？——因为，你每当需要添加数据的时候，就得重新创建一个新的元组。（就类似于：你创建原子弹的仓库，肯定是刚刚好可以存放一个，那么你想存放两个的时候，只能重新再创建一个仓库。）\",\"经纬度会改变吗？显然是不会的，那么就不需要一个多余的“人”去跟踪状态。——用列表可以吗？可以！但是没必要。「因为我们不需要仓库管理员」用列表有点浪费资源了。元组的功能刚刚好够用。\",\"我们讲究：不浪费，合适就好。\"]},\"48\":{\"h\":\"5. 字典 [dict]\"},\"49\":{\"h\":\"5.1 代码示例\",\"t\":[\"d = {\\\"name\\\": \\\"alexa\\\", \\\"age\\\": 18, 1: \\\"int\\\", 1.1: 1, \\\"tup\\\": (1, 2, 3)} t = type(d) print(d) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output {'name': 'alexa', 'age': 18, 1: 'int', 1.1: 1, 'tup': (1, 2, 3)} string type is:>>> <class 'dict'> 直接检测数据类型，并输出:>>> <class 'dict'> \"]},\"50\":{\"h\":\"5.2 字典的特性\",\"t\":[\"无序性 「python 3.6+ 之后右序」 \",\"先以无序理解即可\",\"有些前期基本用不到\",\"字典的组成：是由一系列的 key 和 value 组成 d = {\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\",\"Key: \",\"不可变的数据类型才可以当做数据的 key\",\"比如：字符串，数字，布尔，元组\",\"value：任意数据类型，python 所拥有的所有数据类型\",\"可变性：可以添加，删改 key 对应的 value\"]},\"51\":{\"h\":\"6. 集合 [set]\"},\"52\":{\"h\":\"6.1 代码示例\",\"t\":[\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} t = type(set1) print(set1) print(\\\"string type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", t) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} string type is:>>> <class 'set'> 直接检测数据类型，并输出:>>> <class 'set'> \"]},\"53\":{\"h\":\"6.2 集合的特性\",\"t\":[\"无序性：集合是没有顺序的，也就是没有下标\",\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} print(set1) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} \",\"运行之后顺序可能和输入的顺序不一样\",\"注意\",\"如果你运行集合很多次，或者其中某一次，集合顺序没有改变，我们也不能说集合是有序的。\",\"Why？你掷骰子，500次都是 6 点，你能说掷骰子是确定性事件吗？——显然是不行的🙅。\",\"确定性：\",\"集合的每一个值都是确定的，也就是「需要不可变的数据类型」\",\"比如：布尔型，数字，元组，字符串\",\"举个例子：为什么列表不行 — 列表可变，具有不确定性\",\"互异性：出现重复的不会报错，会自动去掉重复的！！会自动去重\",\"set2 = {1, 1, 1, 2, 2, 3} print(set2) # output {1, 2, 3} \",\"可变性：可以对集合添加，删除数据，但是不能修改输出 「注意：删除是无法指定下标的删除元素」\"]},\"54\":{\"h\":\"7. 布尔型 [bool]\"},\"55\":{\"h\":\"7.1 代码示例\",\"t\":[\"condition = True # False print(condition) print(type(condition)) # output True <class 'bool'> \"]},\"56\":{\"c\":[\"Python\"]},\"57\":{\"c\":[\"web\",\"typora\"]},\"58\":{\"h\":\"数字型\"},\"59\":{\"h\":\"1. 数字型的特点\",\"t\":[\"image-20231218084943233\",\"In [2]: 1+1 Out[2]: 2 In [3]: 1+1.0 Out[3]: 2.0 In [4]: 9-1 Out[4]: 8 In [5]: 9-1.0 Out[5]: 8.0 In [6]: 2*2 Out[6]: 4 In [7]: 2*2.0 Out[7]: 4.0 In [8]: 9/3 Out[8]: 3.0 In [9]: # 如果输入中有一个数是float 最后的结果就是float 「优先级最高」 In [10]: # 除法涉及精度问题，所以最后得到浮点数 \",\"规律\",\"如果其中有一个浮点数，结果就会得到浮点数「优先级最高」\",\"除法涉及精度问题，所以最后的结果类型：就是浮点数\"]},\"60\":{\"h\":\"2. 算术运算符\",\"t\":[\"算术运算符： 用于算术计算。\",\"运算符\",\"描述\",\"例子\",\"+\",\"加法运算符\",\"1 + 1 = 2\",\"-\",\"减法运算符\",\"2 - 1 = 1\",\"*\",\"乘法运算符\",\"2 * 3 = 6\",\"/\",\"除法运算符\",\"9 / 3 = 3.0\",\"**\",\"指数运算符\",\"2 ** 3 = 8\",\"%\",\"取余运算符，计算余数\",\"9 % 2 = 1\",\"//\",\"除法取整运算符，计算商并去除其小数部分\",\"9 // 2 = 4\",\"tips: 9 / 2 = 4......1\"]},\"61\":{\"h\":\"3. 小试牛刀：数字变换\",\"t\":[\"假设你有一个两位的整数，我们需要通过以下规则产生两个新的数字：\",\"第一个新数字是原数字的两位数中的各个数字的和；\",\"第二个新数字是原数字的反转（如原数字为 21，反转后的数字为 12）。\",\"请你编写 Python 代码，实现以上要求。\",\"a = 12 a0 = a // 10 a1 = a % 10 b = a0 + a1 c = 10 * a1 + a0 print(b, c) # output 3 21 \",\"输入：\",\"一个整数 num （10 ≤ num ≤ 99）\",\"输出：\",\"两个整数，或者一个错误信息字符串。\",\"示例：\",\"假设输入的数字 num 为 91，那么你的代码应当输出两个数字：10（9和1的和）和19（91的反转）。\",\"假设输入的数字 num 为 26，那么你的代码应当输出两个数字：8（2和6的和）和62（26的反转）。\",\"假设输入的数字 num 为 18，那么你的代码应当输出两个数字：9（1和8的和）和81（18的反转）。\"]},\"62\":{\"h\":\"4. 比较运算符：比较值的大小\",\"t\":[\"运算符\",\"描述\",\"例子\",\">\",\"判断第一个运算对象是否大于第二个运算对象\",\"print(1 > 2)\",\"<\",\"判断第一个运算对象是否小于第二个运算对象\",\"print(1 < 2)\",\">=\",\"判断第一个运算对象是否大于或等于第二个运算对象\",\"print(3 >= 3)\",\"<=\",\"判断第一个运算对象是否小于或等于第二个运算对象\",\"print(3 <= 4)\",\"==\",\"判断两个运算对象是否相同\",\"print(2 == 2)\",\"!=\",\"判断两个运算对象是否不相同\",\"print(2 != 1)\",\"试一试上面的例子，看看会输出上面结果？\",\"print(1 > 2) print(1 < 2) print(3 >= 3) print(3 <= 4) print(2 == 2) print(2 != 1) # output False True True True True True \"]},\"63\":{\"h\":\"5. 赋值运算符\",\"t\":[\"运算符\",\"描述\",\"例子\",\"=\",\"把右侧的运算对象赋值给左侧的运算对象\",\"a = 1\",\"+=\",\"a += b 等同于 a = a + b\",\"a += 10\",\"-=\",\"a -= b 等同于 a = a - b\",\"a -= 10\",\"*=\",\"a *= b 等同于 a = a * b\",\"a *= 10\",\"/=\",\"a /= b 等同于 a = a / b\",\"a /= 10\",\"**=\",\"a **= b 等同于 a = a ** b\",\"a **= 10\",\"//=\",\"a //= b 等同于 a = a // b\",\"a //= 10\",\"a = 1 a += 10 a -= 10 a *= 10 a /= 10 a **= 10 a //= 10 print(a) # output 0.0 #除法最后是小数 \",\"a = 4 // 2 #结果整数 b = 4.5 // 2 #结果小数 print(a, b) # output 2, 2.0 \"]},\"64\":{\"h\":\"7. 练习\"},\"65\":{\"h\":\"7.1 选择题\",\"t\":[\"在 Python 中，执行 3.5 + 4 的结果是什么类型？\",\"A. 整数\",\"B. 浮点数 ✅\",\"C. 字符串\",\"D. 布尔值\",\"以下哪个运算符用于取余？\",\"A. +\",\"B. -\",\"C. *\",\"D. % ✅\",\"在 Python 中，执行 9 // 2 的结果是多少？\",\"A. 4.5\",\"B. 4 ✅\",\"C. 5\",\"D. 4.0\",\"1.0 == 1 在 Python 中的结果是什么？\",\"A. True 🙆✅\",\"B. False ✅ ❌\",\"C. 报错\",\"D. 无法确定\",\"2 + 3 * 4 的结果是多少？\",\"A. 20\",\"B. 14 ✅\",\"C. 24\",\"D. 12\",\"在 Python 中，10 / 3 的结果是什么？\",\"A. 3\",\"B. 3.3333 🙆✅\",\"C. 4\",\"D. 3.3 ✅❌\",\"执行 7 // 2 的结果是多少？\",\"A. 3 ✅\",\"B. 3.5\",\"C. 4\",\"D. 2\",\"在 Python 中，以下哪个操作会返回浮点数？\",\"A. 2 * 3\",\"B. 4 + 2\",\"C. 9 / 2 ✅\",\"D. 5 // 2\",\"4 ** 0.5 的结果是多少？\",\"A. 2\",\"B. 4\",\"C. 16\",\"D. 0.5\",\"E. 2.0 ✅\",\"执行 3 >= 3 的结果是什么？\",\"A. True ✅\",\"B. False\",\"C. 报错\",\"D. 无法确定\",\"执行 4 != 4 的结果是什么？\",\"A. True\",\"B. False ✅\",\"C. 报错\",\"D. 无法确定\",\"在 Python 中，5 + 2 * 3 的结果是什么？\",\"A. 21\",\"B. 11 ✅\",\"C. 14\",\"D. 7\",\"执行 6 / 2 的结果是什么类型？\",\"A. 整数\",\"B. 浮点数 ✅\",\"C. 字符串\",\"D. 布尔值\"]},\"66\":{\"h\":\"7.2 填空\",\"t\":[\"在 Python 中，执行 2 ** 3 的结果是 ___8___。\",\"执行表达式 9 % 4 会得到 ___1___ 作为结果。\",\"如果 a = 5，那么执行 a *= 2 之后，a 的值是 ___10___。\",\"在 Python 中，3 == 2.9999 的结果是 ___False___。\",\"执行 5 <= 5 的结果是 ___True___。\",\"如果 b = 3，执行 b /= 2 后，b 的值是 ___1.5___。\",\"执行 4 % 3 的结果是 ___1___。\",\"如果 c = 10，执行 c //= 3 后，c 的值是 ___3___。\",\"在 Python 中，7 == 7.0 的结果是 ___False___。❌True\",\"执行 8 / 2 的结果是 ___4.0___。\"]},\"67\":{\"h\":\"7.3 编程题\",\"t\":[\"提示\",\"测试部分代码，没有任何输出没有报错，则视为作答正确。\",\"但是要编写符合题目要求的输出。\"]},\"68\":{\"h\":\"7.3.1 数字和与差：\",\"t\":[\"编写一段 Python 代码，创建两个数字 a 和 b，计算并打印出它们的和以及 a 减去 b 的结果。\",\"代码模版\",\"a = 10 b = 5 Sum = a + b Difference = a - b print(Sum, Difference) # 测试 assert sum_result == a + b assert difference == a - b \",\"输出示例：\",\"Sum: 8 Difference: 2 \"]},\"69\":{\"h\":\"7.3.2 数字的乘法和除法\",\"t\":[\"编写一段 Python 代码，创建两个数字 x 和 y，计算并打印出它们的乘积和除法结果。\",\"代码模版\",\"x = 10 y = 5 product = x * y division = x / y print(product, division) # 测试 assert product == x * y assert division == x / y \",\"输出示例：\",\"Product: 12 Division: 3.0 \"]},\"70\":{\"h\":\"7.3.3 求余和幂运算\",\"t\":[\"编写一段 Python 代码，创建两个数字 m 和 n，计算并打印出 m 对 n 取余的结果和 m 的 n 次幂。\",\"代码模版\",\"m = 10 n = 5 floor_div = m // n power = m ** n print(floor_div, power) # 测试 assert remainder == m % n assert power == m ** n \",\"输出示例：\",\"Remainder: 1 Power: 81 \"]},\"71\":{\"h\":\"7.3.4 比较运算\",\"t\":[\"编写一段 Python 代码，输入两个数字 p 和 q，比较它们的大小并打印出相应的比较结果（大于、小于、等于）。\",\"代码模版\",\"p = 10 q = 5 if p > q: print(p, \\\" is greater than \\\", q) elif p < q: print(p, \\\" is less than \\\", q) else: print(p, \\\" is equal to \\\", q) if ______: print(f\\\"{p} is greater than {q}\\\") assert p > q elif ______: print(f\\\"{p} is less than {q}\\\") assert p < q else: print(f\\\"{p} is equal to {q}\\\") assert p == q \",\"输出示例：\",\"4 is less than 5 \"]},\"72\":{\"c\":[\"Python\"]},\"73\":{\"c\":[\"web\",\"typora\"]},\"74\":{\"h\":\"字符串\"},\"75\":{\"h\":\"1. 字符串的定义\",\"t\":[\"字符串是由字母，数字，特殊字符来组成的一个序列\",\"image-20231218093224921\"]},\"76\":{\"h\":\"2. 创建字符串\",\"t\":[\"——使用 单引号、双引号或者三引号。\",\"name = \\\"alexa\\\" number = '18' paragraph = '''Hello, I'm Alexa ''' para = \\\"\\\"\\\"Hello Alexa \\\"\\\"\\\" \",\"单双引号混用 所以会需要接受不同类型的引号, 否则不能完全包裹字符串内容\",\"string = 'I'm Alexa # wrong string = \\\"I'm Alexa\\\" # correct \",\"那么三引号呢？\",\"假设我们现在需要存储如下文本：\",\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。 先实现功能，再去优化，否则一切会很乱。——AI悦创 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西 \",\"放入字符串，我们如何在 Python 代码实现呢？\",\"三引号还可以用来注释\",\"image-20231218095008709\"]},\"77\":{\"h\":\"3. 字符串长度\",\"t\":[\"使用len(): 返回字符串中字符长度或字符数，从一开始数, 包括空格\",\"para = \\\"Hello, alexa\\\" print(len(para)) # output 12 \"]},\"78\":{\"h\":\"4. 字符串中的字符获取\"},\"79\":{\"h\":\"4.1 获取单个字符\",\"t\":[\"para = \\\"Hello, alexa\\\" print(para[2]) # selecting the 3rd character print(para[0]) # selecting the 1st character print(para[-1]) # selecting the last character print(para[len(para)-1]) # selecting the last character \"]},\"80\":{\"h\":\"4.2 获取一串连续字符\",\"t\":[\"使用slicing区间 （左闭右开）string[start: end]\",\"\\\"\\\"\\\"语法: string = \\\"bornforthis\\\" select = string[start: end] PS: end 记得 +1\\\"\\\"\\\" para = \\\"Hello, alexa\\\" print(para[2:6]) # selecting the 3rd to the 6th character (not including the 7th) # output llo, \"]},\"81\":{\"h\":\"4.3 获取多个不连续字符\",\"t\":[\"使用slicing区间 string[start: end: sep]\",\"\\\"\\\"\\\" 语法: string = \\\"0123456789\\\" select = string[start: end: sep] *sep= how many steps to the next number* PS: end 记得 +1 \\\"\\\"\\\" string = \\\"0123456789\\\" # 获取字符 02468 select = string[0: len(string): 2] print(select) # 获取字符 13579 select = string[1: len(string): 2] print(select) string = \\\"bornforthis\\\" # 获取字符 ofts select = string[1: len(string): 3] print(select) \"]},\"82\":{\"h\":\"4.4 优化\",\"t\":[\"如果我们要提取的字符是从开头到结尾，则可以省略开头和/或结尾，留空即可\",\"string = \\\"0123456789\\\" # 获取字符 02468 select = string[:: 2] print(select) # 获取字符 13579 select = string[1:: 2] print(select) \"]},\"83\":{\"h\":\"4.5 字符串倒序\",\"t\":[\"字符串的第三个位置，控制的是字符提取的方向。默认正数为1，如果我们改成-1，则会变成反方向\",\"注意\",\"正负控制方向，数字大小控制步长\",\"string = \\\"bornforthis\\\" select = string[:: -1] print(select) # output sihtrofnrob \",\"省略号省略的是什么？\",\"select = string[0:11: -1] print(select) # output No result \",\"如果使用正方向序号， 0开始往-1走没有任何值， 不成立\",\"image-20231221214402328\",\"如果直接使用正数序号调换位置，最后一位就是0，会被省略掉：\",\"select = string[len(string):0: -1] print(select) # output sihtrofnro #missing \\\"b\\\" \",\"所以应该是从-1最后一位开始往回倒:\",\"image-20231221214427299\",\"select = string[-1:-1*len(string)-1: -1] print(select) \",\"# 获取rofn select = string[-5:-9: -1] print(select) \"]},\"84\":{\"h\":\"5. 字符串的内置方法\"},\"85\":{\"h\":\"5.1 .upper()\",\"t\":[\"将字符串全部转换为大写\",\"string = \\\"bornforthis\\\" print(string.upper()) # output BORNFORTHIS \"]},\"86\":{\"h\":\"5.2 .lower()\",\"t\":[\"将字符串全部转换为小写\",\"string = \\\"BORNFORTHIS\\\" print(string.lower()) # output bornforthis \"]},\"87\":{\"h\":\"5.3 .capitalize()\",\"t\":[\"字符串开头第一个字母大写\",\"string = \\\"BORNFORTHIS\\\" print(string.capitalize()) # output Bornforthis \"]},\"88\":{\"h\":\"5.4 .title()\",\"t\":[\"每个单词的首字母大写，只要有间隔都会大写 「形成标题的一种格式」\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.title()) # output Bornforthis To-Aiyc \"]},\"89\":{\"h\":\"5.5 .startswith()\",\"t\":[\"检测字符串是否以某个特定的内容开头，返回True或False\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"b\\\")) # output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"BO\\\")) # output True \"]},\"90\":{\"h\":\"5.6 .endswith()\",\"t\":[\"检测字符串是不是以特定字符或单词结尾，返回布尔值。\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"BO\\\")) # output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"yc\\\")) # output True \"]},\"91\":{\"h\":\"5.7 .count()\",\"t\":[\"计算特定字符或单词在目标字符串中存在的次数。\",\"string = \\\"BORNFORTHIS to-aiyc bornforthis\\\" print(string.count(\\\"i\\\")) # output 2 #区分大小写 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.count(\\\"for\\\")) # output 2 \"]},\"92\":{\"h\":\"5.8 .find()\",\"t\":[\"寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 find() 返回目标单词的第一个字符的下标。\",\"如果，查询的字符或单词不存在，则返回 -1。\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"for\\\")) # output 12 #返回第一次出现时的下标 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"R\\\")) # output 2 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"k\\\")) # output -1 \"]},\"93\":{\"h\":\"5.9 .index()\",\"t\":[\"寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 index() 返回目标单词的第一个字符的下标。\",\"如果，查询的字符或单词不存在，则报错。\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.index(\\\"k\\\")) # output ValueError: substring not found \"]},\"94\":{\"h\":\"5.10 .isdigit()\",\"t\":[\"判断字符串是不是纯数字字符串，字符串中但凡有一个字符不是数字，则返回false\",\"string = \\\"01234567\\\" print(string.isdigit()) # output True string = \\\"01234567o\\\" print(string.isdigit()) # output False \"]},\"95\":{\"h\":\"5.11 .isalpha()\",\"t\":[\"判断字符串是不是纯字母字符串，字符串中但凡有一个字符不是字母，则返回false\",\"string = \\\"abcdefg\\\" print(string.isalpha()) # output True string = \\\"abcdefg0\\\" print(string.isalpha()) # output False \"]},\"96\":{\"h\":\"5.12 .isalnum()\",\"t\":[\"判断字符串是不是纯数字或纯字母、纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。\",\"string = \\\"abcdefg0\\\" print(string.isalnum()) # output True string = \\\"abcdefg0!\\\" print(string.isalnum()) # output False \"]},\"97\":{\"h\":\"5.13 .isupper()\",\"t\":[\"判断字符串中的字母是否全大写，全大写则返回 True，否则返回 False。\",\"string = \\\"abcdefg0!\\\" print(string.isupper()) # output False \"]},\"98\":{\"h\":\"5.14 .islower()\",\"t\":[\"判断字符串是不是字母全小写，全小写则返回 True，否则返回 False。\",\"string = \\\"abcdefg0!\\\" print(string.islower()) # output True \"]},\"99\":{\"h\":\"5.15 .isspace()\",\"t\":[\"判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。\",\"string = \\\"abcdefg0!\\\" print(string.isspace()) # output False string = \\\" \\\" print(string.isspace()) # output True \"]},\"100\":{\"h\":\"5.16 .strip()\",\"t\":[\"默认去掉目标字符串的前后空白字符，如果指定参数，可以去掉指定字符\",\"string = \\\" bornforthis \\\" print(string.strip()) #去除前后空格 # output bornforthis string = \\\"---bornforthis---\\\" print(string.strip(\\\"-\\\")) #去除前后减号 # output bornforthis string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"-\\\")) #如果只去除前后减号 只会去除连续的减号知道遇见其他字符 # output -bornforthis-- string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"- \\\")) #同时去除两端的所有减号和空格 # output bornforthis \"]},\"101\":{\"h\":\"5.17 .lstrip()\",\"t\":[\"left 默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。\",\"string = \\\"-- -bornforthis-- -\\\" print(string.lstrip(\\\"- \\\")) # output bornforthis-- - \"]},\"102\":{\"h\":\"5.18 .rstrip()\",\"t\":[\"Right 默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。\",\"string = \\\"-- -bornforthis-- -\\\" print(string.rstrip(\\\"- \\\")) # output -- -bornforthis \"]},\"103\":{\"h\":\"5.19 .replace()\",\"t\":[\".replace(old, new, count)第一个位置传入待替换的「old」字符，第二个位置传入要替换的新字符「new」，count控制替换次数\",\"string = \\\"-- -bornforthis-- -\\\" string1 = string.replace(\\\" \\\",\\\"*\\\") #默认把所有空格都换成* string2 = string.replace(\\\"-\\\", \\\"!\\\", 3) #置换前三个减号为！ print(string, string1, string2, sep=\\\"\\\\n\\\") # output -- -bornforthis-- - --**-bornforthis--*- !! !bornforthis-- - \"]},\"104\":{\"h\":\"5.20 .split()\",\"t\":[\".split(sep, maxsplit) 以特定字符进行分割，默认空格分割。如传入参数「sep」则以参数进行分割，返回分割后的列表，maxsplit用于控制分割几次, 默认从左边开始分割\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.split() lst2 = string.split(\\\"o\\\") lst3 = string.split(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am b', 'rnf', 'rthis b', 'rnforthis'] \"]},\"105\":{\"h\":\"5.21 .rsplit()\",\"t\":[\".rsplit(sep, maxsplit) 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.rsplit() lst2 = string.rsplit(\\\"o\\\") lst3 = string.rsplit(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am bornf', 'rthis b', 'rnf', 'rthis'] \"]},\"106\":{\"h\":\"5.22 .join()\",\"t\":[\"以特定字符为字符串每个字符中间的间隔 “sep”.join(string)\",\"string = \\\"i am bornforthis \\\" string_joined = \\\"-\\\".join(string) print(string_joined) # output i- -a-m- -b-o-r-n-f-o-r-t-h-i-s- \"]},\"107\":{\"h\":\"6. 字符串格式化\",\"t\":[\"问题\",\"string = \\\"Hi Bornforthis,Welcome to XiaMen.\\\" print(string) # ---output--- Hi Bornforthis,Welcome to XiaMen. \",\"所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。\",\"我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。\",\"当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。\",\"name = \\\"Bornforthis\\\" region = \\\"XiaMen\\\" string1 = \\\"Hi \\\" string2 = \\\",Welcome to \\\" string3 = \\\".\\\" result = string1 + name + string2 + region + string3 print(result) # ---output--- Hi Bornforthis,Welcome to XiaMen. \",\"由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。\",\"而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：\",\"string = \\\"Money is \\\" + 190 print(string) # ---output--- Traceback (most recent call last): File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py\\\", line 1, in <module> string = \\\"Money is \\\" + 190 TypeError: can only concatenate str (not \\\"int\\\") to str string = \\\"Money is \\\" + str(190) print(string) # ---output--- Money is 190 \",\"—— format 就应运而生了。\"]},\"108\":{\"h\":\"6.1 .format()\",\"t\":[\"单个花括号{}: 三种方法\",\"string = \\\"Hi {}, welcome to XiaMen.\\\".format(\\\"Alexa\\\") print(string) template_string = \\\"Hi {}, welcome to XiaMen.\\\" print(template_string.format(\\\"Alexa\\\")) new_string = template_string.format(\\\"Alexa\\\") print(new_string) # output Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. \",\"一个花括号以上「按顺序填充」\",\"string = \\\"Hi {}, welcome to {}.\\\".format(\\\"Alexa\\\", \\\"XiaMen\\\") print(string) template_string = \\\"Hi {}, welcome to {}.\\\" print(template_string.format(\\\"Alexa\\\", \\\"XiaMen\\\")) new_string = template_string.format(\\\"Alexa\\\", \\\"XiaMen\\\") print(new_string) # output Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. \",\"多个花括号指定位置「序号指定」\",\"string = \\\"Hi {1}, welcome to {0}.\\\".format(\\\"0\\\", \\\"1\\\") print(string) string = \\\"Hi {1}, welcome to {0}.\\\".format(\\\"XiaMen\\\", \\\"Alexa\\\") # 0th position input:XiaMen, 1st position input:Alexa print(string) template_string = \\\"Hi {1}, welcome to {0}.\\\" print(template_string.format(\\\"Shanghai\\\", \\\"Alexa\\\")) new_string = template_string.format(\\\"Shenzhen\\\", \\\"Alexa\\\") print(new_string) # output Hi 1, welcome to 0. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to Shanghai. Hi Alexa, welcome to Shenzhen. \",\"参数指定\",\"string = \\\"Hi {name}, welcome to {city}.\\\".format(name=\\\"name\\\", city=\\\"city\\\") print(string) string = \\\"Hi {name}, welcome to {city}.\\\".format(name=\\\"Alexa\\\", city=\\\"XiaMen\\\") print(string) template_string = \\\"Hi {name}, welcome to {city}.\\\" print(template_string.format(name=\\\"Alexa\\\", city=\\\"Shanghai\\\")) new_string = template_string.format(name=\\\"Alexa\\\", city=\\\"Shenzhen\\\") print(new_string) # output Hi name, welcome to city. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to Shanghai. Hi Alexa, welcome to Shenzhen. \",\"保留指定小数位置： {:.xf}保留x位小数\",\"string = \\\"Money is {:.3f}\\\".format(190) # .3f 保留三位小数 print(string) # output Money is 190.000 \"]},\"109\":{\"h\":\"6.2 f\",\"t\":[\"直接读取变量 （变量必须提前创建好）\",\"name = \\\"Alexa\\\" city = \\\"XiaMen\\\" string = f\\\"Hi {name}, welcome to {city}.\\\" print(string) # 使用f前变量必须都被创建好 # output Hi Alexa, welcome to XiaMen. \",\"保留小数位 {variable: .xf}将variable保留到x位小数\",\"money = 190 string = f\\\"Money is {money:.3f}.\\\" print(string) # output Money is 190.000. \"]},\"110\":{\"h\":\"6.3 %格式化\",\"t\":[\"%d: 整数\",\"%s: 字符串\",\"%f: 浮点数\",\"单个位置传入 (三种方法：用%+数字来输入； d/s/f控制输入类型)\",\"string = \\\"Money is %d\\\" new_s = string % 13 print(new_s) print(string % 19) string = \\\"Money is %d\\\" % 190 print(string) # output Money is 13 Money is 18 Money is 190 \",\"多个位置传入： %后要用括号\",\"string = \\\"Money is %d %s\\\" new_s = string % (13, \\\"发大财\\\") print(new_s) print(string % (18, \\\"暴富\\\")) string = \\\"Money is %d %s\\\" % (190, \\\"666\\\") print(string) # output Money is 13 发大财 Money is 18 暴富 Money is 190 666 \",\"保留小数位: %.xf\",\"string = \\\"Money is %.3f\\\" new_s = string % 13 print(new_s) print(string % 18) string = \\\"Money is %.3f\\\" % 190 print(string) # output Money is 13.000 Money is 18.000 Money is 190.000 \"]},\"111\":{\"h\":\"6.4 f 和 format、% 的优缺点\",\"t\":[\"format 和 % 都像模版，提前做好模版后面有需要试可以直接使用；\",\"而 f 就像在银行当中，柜员边问你边登记，不能提前做好模版。\"]},\"112\":{\"h\":\"7. 字符串的不可变性\",\"t\":[\"字符串是不可变的，不可以改变其中的任何元素。如果改变字符串中的元素，则需要创建一个新的字符串\",\"s = \\\"hello bornforthis\\\" s[0] = \\\"a\\\" # ---output--- Traceback (most recent call last): File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\\\", line 2, in <module> s[0] = \\\"a\\\" TypeError: 'str' object does not support item assignment \",\"除了使用replace 还可以使用字符串拼接\",\"string = \\\"Hello, Alexa!\\\" new_string = \\\"a\\\" + string[1:] #使用slicing print(new_string) # output aello, Alexa! \"]},\"113\":{\"h\":\"8. 字符串转义\",\"t\":[\"转义字符\",\"含义\",\"例子\",\"\\\\\\\\\",\"反斜杠符号，为了在字符串中得到 \\\\\",\"s = \\\"bor\\\\\\\\nforthis\\\"\",\"\\\\b\",\"退格，类似删除键\",\"s = \\\"bornff\\\\borthis\\\"\",\"\\\\n\",\"换行\",\"s = \\\"bornfor\\\\nthis\\\"\",\"\\\\t\",\"制表符\",\"s = \\\"born\\\\tfor\\\\tthis\\\"\",\"r\",\"取消转义「R 和 r」都可以\",\"s = r\\\"born\\\\tfor\\\\tthis\\\"\",\"示例代码：\",\"s = \\\"bor\\\\\\\\nforthis\\\" # 原本使用\\\\n的话会导致字符串换行， 但是如果想要输出\\\\n，需要在\\\\前再加一个\\\\ print(s) # output bor\\\\nforthis s = \\\"bornff\\\\borthis\\\" # \\\\b删除前一个字符 f print(s) # output bornforthis s = \\\"bornfor\\\\nthis\\\" # \\\\n换行 print(s) # output bornfor this s = \\\"born\\\\tfor\\\\tthis\\\" # \\\\t制表 print(s) # output born for this s = r\\\"born\\\\tfor\\\\tthis\\\" # 还可以用r取消转义 print(s) # output born\\\\tfor\\\\tthis \"]},\"114\":{\"h\":\"9 字符串的连接\",\"t\":[\"s1 = 'born' s2 = 'forthis' print(s1 + s2) # 形成了一个字符串 print(s1, s2) # 还是两个独立的字符串 # ---output--- bornforthis born forthis s1 = '*-love-' print(s1 * 10) # ---output--- *-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love- \",\"我想在上面的输出添加末尾加一个 * 怎么办呢？\",\"print(s1*10 + \\\"*\\\") print(s1*10 + s1[0]) print(s1*10, end=\\\"*\\\") \"]},\"115\":{\"h\":\"10. 读取用户输入\"},\"116\":{\"h\":\"10.1 input()基本使用\",\"t\":[\"使用 input() 获取用户输入\",\"user_input = input() print(user_input) # output alexa # self input alexa # print \"]},\"117\":{\"h\":\"10.2 input()输入提示\",\"t\":[\"但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？\",\"image-20231228220912772\",\"如何解决？——使用输入提示。\",\"input() 函数里面支持我们写入字符串进行提示。\",\"user_input = input(\\\"Enter your name:>>>\\\") print(\\\"user input name:\\\", user_input) # output Enter your name:>>> alexa user input name: alexa \",\"image-20231228221150020\"]},\"118\":{\"h\":\"10.3 input() 的特点\"},\"119\":{\"h\":\"10.3.1 input()得到类型皆为字符串「str」\",\"t\":[\"In [2]: type(input(\\\"i:>>>\\\")) i:>>>1 Out[2]: str In [3]: type(input(\\\"i:>>>\\\")) i:>>>[1,2,3,4] Out[3]: str In [4]: type(input(\\\"i:>>>\\\")) i:>>>(1,2,3,4) Out[4]: str \",\"通过上面的代码示例，我们可以知道：通过 input() 获取用户输入，得到的数据类型都是字符串。\",\"得知 input() 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。\"]},\"120\":{\"h\":\"10.3.2 方法一：强制类型转换\",\"t\":[\"In [10]: n = int(input(':>>>')) :>>>12 In [11]: type(n) Out[11]: int In [12]: # 存在一些问题 In [13]: s = list(input(':>>>')) :>>>[1, 2, 3, 4, 5] In [14]: s # 得到把每一个元素拆开 Out[14]: ['[', '1', ',', ' ', '2', ',', ' ', '3', ',', ' ', '4', ',', ' ', '5', ']'] In [15]: type(s) Out[15]: list In [16]: b = bool(input(':>>>')) :>>>True In [17]: b Out[17]: True In [18]: type(b) Out[18]: bool \",\"适合：数字，字符串，布尔型\",\"不适合：列表，元组，字典，集合\"]},\"121\":{\"h\":\"10.3.3 方法二：使用eval（）\",\"t\":[\"eval()的妙用\",\"In [28]: s = eval(input(':>>>')) :>>>12 In [29]: type(s), s Out[29]: (int, 12) In [30]: s = eval(input(':>>>')) :>>>[1, 2, 3] In [31]: type(s), s Out[31]: (list, [1, 2, 3]) In [32]: s = eval(input(':>>>')) :>>>(1, 2, 3) In [33]: type(s), s Out[33]: (tuple, (1, 2, 3)) In [34]: s = eval(input(':>>>')) :>>>{1, 2, 3} In [35]: type(s), s Out[35]: (set, {1, 2, 3}) In [36]: s = eval(input(':>>>')) :>>>True In [37]: type(s), s Out[37]: (bool, True) In [38]: s = eval(input(':>>>')) :>>>{'a': 1, 'b': 2} In [39]: type(s), s Out[39]: (dict, {'a': 1, 'b': 2}) \",\"eval()伴随的问题\",\"上面的代码看似解决了我们所遇到的问题，但是也伴随着我们需要注意的问题。\",\"In [14]: s = eval(input(\\\":>>>\\\")) :>>>string --------------------------------------------------------------------------- NameError Traceback (most recent call last) Cell In[14], line 1 ----> 1 s = eval(input(\\\":>>>\\\")) File <string>:1 NameError: name 'string' is not defined \",\"稍微分析一下 eval() 的功能“大概”实现原因：\",\"input 获取用户输入，得到字符串类型。\",\"In [44]: s = input(':>>>') :>>>[1, 2, 3] In [45]: s Out[45]: '[1, 2, 3]' In [15]: s = input(\\\":>>>\\\") :>>>string In [16]: s Out[16]: 'string' #在使用input时会给原本输入的内容加上引号变成str \",\"从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」\",\"所以，为什么会导致上面的报错呢？\",\"获取用户输入：s = eval(input(':>>>'))\",\"其中 input 会得到 'string'，而通过 eval 转换之后，就类似于 string 变量。但是我们实际上我们在我们之前的代码中，并没有创建 string 这个变量。\",\"故而报错，当然没有通过上面的分析也可以大概预料到问题，因为报错很直观：NameError: name 'string' is not defined 。\",\"所以，解决方法很直白： \",\"一种是你在获取用户输入之前直接提前创建一个叫做 string 的变量；「显然，不是我们想要的」\",\"另一种则是输入的时，有意加上单引号或者双引号、三引号。\",\"In [17]: string = \\\"hello\\\" In [18]: s = eval(input(\\\":>>>\\\")) :>>>string In [19]: s Out[19]: 'hello' In [20]: num = 12 In [21]: s = eval(input(\\\":>>>\\\")) :>>>num In [22]: s Out[22]: 12 In [23]: type(s), s Out[23]: (int, 12) In [24]: s = eval(input(\\\":>>>\\\")) :>>>\\\"string\\\" In [25]: type(s), s Out[25]: (str, 'string') \",\"eval()小技巧\",\"任务要求：获取户输入，实现两位的加减乘除。\",\"In [26]: eval(input(\\\":>>>\\\")) :>>>1+1 Out[26]: 2 In [27]: eval(input(\\\":>>>\\\")) :>>>2-1 Out[27]: 1 In [28]: eval(input(\\\":>>>\\\")) :>>>9*8 Out[28]: 72 In [29]: eval(input(\\\":>>>\\\")) :>>>9/3 Out[29]: 3.0 \"]},\"122\":{\"h\":\"11. 小试牛刀\",\"t\":[\"获取用户输入来看两个整数，得到两个整数的和。\",\"要求：\",\"只能使用一个 input 函数；\",\"用户输入格式：num1 num2\",\"输出计算结果；\",\"输入：\",\"5 6 \",\"输出：\",\"11 \"]},\"123\":{\"c\":[\"Python\"]},\"124\":{\"c\":[\"web\",\"typora\"]},\"125\":{\"h\":\"list\"},\"126\":{\"h\":\"1. 列表结构\",\"t\":[\"利用 中括号 表示列表\",\"列表内的元素用 逗号 隔开\",\"注意是 英文输入法 下的逗号\",\"student1 = ['lilei', 18, 'class01', 201901] student2 = ['hanmeimei', 19, 'class02', 201902] \",\"列表的 可变性：可以修改列表里的内容。\",\"字符串强制转换成列表\",\"string_to_list = list(\\\"Bornforthis\\\") print(string_to_list) # output ['B', 'o', 'r', 'n', 'f', 'o', 'r', 't', 'h', 'i', 's'] \"]},\"127\":{\"h\":\"2. 获取列表中的某个元素\"},\"128\":{\"h\":\"2.1 列表下标的组成\",\"t\":[\"编程语言中通常 第一个位置的编号是 0。\",\"image-20231230083906988\"]},\"129\":{\"h\":\"2.2 提取单个元素\",\"t\":[\"中括号内数字指定元素位置。\",\"grade = [98, 99, 95, 80] print(grade[0]) # 98 print(grade[0] + grade[3]) # 178 \"]},\"130\":{\"h\":\"2.3 获取列表中连续的几个元素\",\"t\":[\"image-20231230084607435\",\"中括号内用 起始位置:结束位置 描述\",\"注意： 不包括结束位置的元素。\",\"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers[2:6]) # [2, 3, 4, 5] \"]},\"131\":{\"h\":\"2.4 获取列表中连续且特定间隔的元素\",\"t\":[\"image-20231230084653457\",\"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers[1:7:2]) # [1, 3, 5] \",\"grade = [98, 99, 95, 80] print(grade[1]) print(grade[0], grade[2]) print(grade[0:4]) #第三个位置默认是+1 所以必须要在逆序的时候改成-1才能是倒着的 print(grade[-1:-4:-1]) #reverse the list \"]},\"132\":{\"h\":\"3. 列表的切片赋值\",\"t\":[\"::: tab\",\"@tab Code\",\"image-20231230085730652\",\"@tab Think\",\"image-20231230085840306\",\":::\",\"In [1]: name = list('Python') In [2]: name Out[2]: ['P', 'y', 't', 'h', 'o', 'n'] In [3]: name[2:] Out[3]: ['t', 'h', 'o', 'n'] In [4]: list('abc') Out[4]: ['a', 'b', 'c'] In [5]: name[2:]=list('abc') In [6]: name Out[6]: ['P', 'y', 'a', 'b', 'c'] \",\"image-20231230090452598\",\"In [7]: numbers = [1, 5] In [8]: numbers[1:1] Out[8]: [] #取不到5 In [9]: numbers[1:1] = [2, 3, 4] In [10]: numbers Out[10]: [1, 2, 3, 4, 5] In [11]: numbers[1:4] = [] In [12]: numbers Out[12]: [1, 5] \"]},\"133\":{\"h\":\"4. 小试牛刀\",\"t\":[\"获取用户输入两个值，一个是要插入的位置，一个是要插入这个位置的值。\",\"给定下面列表：\",\"numbers = [1, 2, 3, 5, 6] \",\"例子：\",\"Enter position: 3 Enter value: 4 [1, 2, 3, 4, 5, 6] \"]},\"134\":{\"h\":\"5.在列表的特定位置插入元素 「.insert(index, element)」\",\"t\":[\".insert(index, element) 是一个列表的基本方法，用于在列表的指定位置插入一个元素。\",\"它的基本语法是：\",\"list.insert(index, element) \",\"index: 指定要插入元素的位置。索引从 0 开始。如果指定的索引超出了列表的当前长度「不会报错」，则元素将被添加到列表的末尾。\",\"element: 这是你想要插入列表的元素。\",\"numbers = [1, 2, 3, 5, 6] numbers.insert(3,4) print(numbers) # output [1,2,3,4,5,6] \"]},\"135\":{\"h\":\"6. 列表长度\",\"t\":[\"获取列表长度，使用len()：\",\"numbers = [1, 2, 3, 5, 6] print(len(numbers)) # output 5 \"]},\"136\":{\"h\":\"7. 修改列表中的元素\",\"t\":[\"image-20231231081734946\",\"单个元素修改\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0] = \\\"xxx\\\" print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: ['xxx', 2, 3, 5, 6] \",\"多个元素修改\",\"多个修改的对象也可以是字符串\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0:3] = 'bornforthis' print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: ['b', 'o', 'r', 'n', 'f', 'o', 'r', 't', 'h', 'i', 's', 5, 6] \",\"多个元素修改情况下，可以使用的对象 \",\"列表\",\"元组\",\"集合\",\"字符串\",\"字典「放进去的是key」\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0:3] = {\\\"a\\\": 1, \\\"b\\\": 8} print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: ['a', 'b', 5, 6] \",\"多个元素修改下，不可以使用的对象 \",\"布尔型\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0:3] = True print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 3, in <module> numbers[0:3] = True ~~~~~~~^^^^^ TypeError: can only assign an iterable \"]},\"137\":{\"h\":\"8. 向列表添加元素\"},\"138\":{\"h\":\"8.1 添加单个元素 「.append()」\",\"t\":[\"image-20231231082941897\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.append(\\\"aaa\\\") print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5, 6, 'aaa'] numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.append([\\\"aaa\\\", \\\"bbb\\\"]) print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5, 6, ['aaa', 'bbb']] # 会把整个list都放进去 不支持多个元素 \"]},\"139\":{\"h\":\"8.2 添加多个元素\",\"t\":[\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.extend([\\\"aaa\\\", \\\"bbb\\\"]) print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5, 6, 'aaa', 'bbb'] \"]},\"140\":{\"h\":\"9. 删除列表中的元素\"},\"141\":{\"h\":\"9.1 del\",\"t\":[\"del 需要指定列表中需要删除的单个元素或多个元素\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) del numbers[2] print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 5, 6] \",\"如果不指定删除的元素，则删除整个变量\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) del numbers print(\\\"after:\\\", numbers) # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 4, in <module> print(\\\"after:\\\", numbers) ^^^^^^^ NameError: name 'numbers' is not defined before: [1, 2, 3, 5, 6] \"]},\"142\":{\"h\":\"9.2 pop()\",\"t\":[\"pop() 函数默认删除列表中的最后一个元素，也可以传参数指定要删除元素的下标。\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.pop() print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5] numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.pop(0) print(\\\"after:\\\", numbers) # outpu before: [1, 2, 3, 5, 6] after: [2, 3, 5, 6] \"]},\"143\":{\"h\":\"9.3 remove()\",\"t\":[\"remove() 指定删除列表中某个元素，例如:remove('aiyc') 则指定删除列表中的 'aiyc' 元素。\",\"如果有重复也只是去除其中一个\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.remove(2) # element 2 not the 3rd element print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 3, 5, 6] \"]},\"144\":{\"h\":\"10.两个列表相加\",\"t\":[\"直接使用加号\",\"numbers1 = [1, 2, 3, 5, 6] numbers2 = [10, 20, 30] print(numbers1 + numbers2) # output [1, 2, 3, 5, 6, 10, 20, 30] \"]},\"145\":{\"h\":\"11. 判断某个元素是否存在于列表中 「Value in Sequence」\",\"t\":[\"image-20231231084254336\",\"numbers = [1, 2, 3, 5, 6] print(1 in numbers) print(10 in numbers) # output True False \"]},\"146\":{\"h\":\"12. 获取列表中某个元素的重复次数 「.count()」\",\"t\":[\"numbers = [1, 2, 1, 1, 3, 5, 6] print(numbers.count(1)) # output 3 \"]},\"147\":{\"h\":\"13. 获取列表中某个元素第一次出现的位置 「.index()」\",\"t\":[\"用 列表.index(元素) 来获取，如果元素不在列表中则会报错\",\"numbers = [1, 2, 1, 1, 3, 5, 6] print(numbers.index(1)) # output 0 \"]},\"148\":{\"h\":\"14. 列表排序\"},\"149\":{\"h\":\"14.1 sort(reverse=False)\",\"t\":[\"list.sort() 使列表内的元素从小到大排列，直接修改列表本身。如果里面指定 reverse=True 则列表降序排列。\",\"numbers = [1, 2, 1, 1, 3, 5, 6] numbers.sort() print(numbers) numbers.sort(reverse=True) print(numbers) # output [1, 1, 1, 2, 3, 5, 6] [6, 5, 3, 2, 1, 1, 1] \"]},\"150\":{\"h\":\"14.2 sorted(list, reverse=False)\",\"t\":[\"sorted(list, reverse=False) 将列表进行小到大排序，排序后原列表不变，返回新列表。reverse 默认 False，如果设置为 True 则返回降序排序。\"]},\"151\":{\"c\":[\"Python\"]},\"152\":{\"c\":[\"web\",\"typora\"]},\"153\":{\"h\":\"tuple\"},\"154\":{\"h\":\"1. 创建元组\",\"t\":[\"使用小括号创建\",\"里面的元素用逗号隔开\",\"tup = (2, \\\"x\\\", \\\"y\\\") print(tup, type(tup)) # output (2, 'x', 'y') <class 'tuple'> \"]},\"155\":{\"h\":\"2. 列表和元组的对比\",\"t\":[\"image-20240102231518401\",\"列表和元组的区别：\",\"列表中：元素用方括号 [] 包裹；在元组中，元素用圆括号（）包裹\",\"列表中的元素可以被修改，添加，删除，即列表是可变的数据类型，元组是不可变的数据类型。\"]},\"156\":{\"h\":\"3. 元组是不可变的\",\"t\":[\"但凡我们想修改元组，是会报错：\",\"tup = (2, \\\"x\\\", \\\"y\\\") tup[0] = 1 # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 2, in <module> tup[0] = 1 ~~~^^^ TypeError: 'tuple' object does not support item assignment \"]},\"157\":{\"h\":\"4. 元组的取值和分片操作\",\"t\":[\"tup = (2, \\\"lilei\\\", 19) print(tup[1]) # output 2 print(tup[0], tup[2]) # output 2 19 print(tup[::2]) # output (2, 19) print(tup[-2:-4:-1]) # output (\\\"lilei\\\", 2) \"]},\"158\":{\"h\":\"5. 元组的特点\",\"t\":[\"思考一下：如果元组只有一个元素，是什么类型？\",\"tup = (1) print(type(tup)) # output <class 'int'> \",\"代码运行后，我们可知：如果元组只有一个元素，那么元素本身的类型。\",\"为什么会是这个结果呢？\",\"我们常规在数学计算中括号是在运算的时候用来保证优先级和在适当的情况下，可以直接去掉。\",\"(1 + 2) * (2 + 1) = (3) * (3) = 3 * 3 = 9 所以，你可以发现 (3) * (3) = 3 * 3 左边的 (3) 不就是上面所说的“元组只有一个元素的情况”。也就类似于数学表达式中括号可以直接省去。\",\"如何解决呢？ 加一个逗号\",\"tup = (1,) # 如果元组只有一个元素，加一个逗号以此区分 print(type(tup)) # output <class 'tuple'> \"]},\"159\":{\"h\":\"6. 元组的拼接\",\"t\":[\"直接使用加号拼接\",\"tup1 = (1, 2, 3) tup2 = (4, 5, 6) new_tup = tup1 + tup2 print(new_tup) # output (1, 2, 3, 4, 5, 6) \"]},\"160\":{\"h\":\"7. 元组的排序\"},\"161\":{\"h\":\"7.1 小试牛刀 「根据现有的知识排序」\",\"t\":[\"对以下元组进行排序：\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) \",\"思路：\",\"因为元组不可变，所以先把元组转换成列表\",\"然后再进行排序\",\"接着进行转换回元组\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) lst = list(tup) lst.sort() # 单独一行直接运行 修改lst tup_new = tuple(lst) print(tup_new) # output (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"]},\"162\":{\"h\":\"7.2 使用 sorted()\",\"t\":[\"实际上 sorted() 实现的也就是上面的流程\",\"tup1 = tuple(sorted(tup)) # sorted(tup)会自动将其转换为列表，需要再换回tuple print(tup1) # output (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"]},\"163\":{\"h\":\"8. zip()\",\"t\":[\"zip() 是一个内置函数，用于将多个可迭代对象（如列表、元组或字符串）的相应元素配对并返回一个元组的迭代器。如果你有两个或更多的列表，并且想要根据它们的相应元素创建一个新的迭代器，那么 zip() 函数就非常有用。\",\"假设有两个列表：\",\"list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] \",\"可以使用 zip() 来配对这些列表的元素：\",\"zipped = zip(list1, list2) \",\"zipped 现在是一个包含元组的迭代器，每个元组都由两个列表的相应元素组成。例如：\",\"list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] zipped = zip(list1, list2) print(zipped) # 是一个zip对象，迭代器地址 print(list(zipped)) # 转换成列表查看，也可以转换成元组 # print(*zipped) # *号用来解包 # 当然也可以用循环，但是目前不涉及 # 上面的代码中如果用了列表，就不能再用*，因为zip已经被打开，数据已经被提取 # output <zip object at 0x10454a200> [(1, 'a'), (2, 'b'), (3, 'c')] \",\"可以使用循环来遍历这个迭代器：\",\"for num, letter in zipped: print(f'Number: {num},Letter: {letter}') # output Number: 1,Letter: a Number: 2,Letter: b Number: 3,Letter: c \",\"元组同理：\",\"tup1 = (1, 2, 3) tup2 = ('a', 'b', 'c') zipped = zip(tup1, tup2) print(zipped) # 是一个迭代器地址 print(list(zipped)) # 转换成列表查看，也可以转换成元组 # print(*zipped) # * 号用来解包 # ---output--- <zip object at 0x104f0d400> [(1, 'a'), (2, 'b'), (3, 'c')] \"]},\"164\":{\"c\":[\"Python\"]},\"165\":{\"c\":[\"web\",\"typora\"]},\"166\":{\"h\":\"dictionary\"},\"167\":{\"h\":\"1. 如何创建一个电话簿\",\"t\":[\"我们现在有以下联系人：\",\"姓名\",\"手机号\",\"李雷\",\"123456\",\"韩梅梅\",\"132456\",\"大卫\",\"154389\",\"Mr.Liu\",\"131452\",\"Bornforthis\",\"180595\",\"Alexa\",\"131559\",\"如何用以往学过的知识构建一个具有用户输入查询功能的电话簿。\",\"变量、数字型、列表、元组、字符串。\",\"程序运行效果：\",\"测试一：\",\"Enter your search name: 李雷 The 李雷 phone number is: 123456 \",\"测试二：\",\"Enter your search name: Bornforthis The Bornforthis phone number is: 180595 \",\"由上面的问题应该要了解两个点：\",\"如何用已有的知识去完成未知的新任务，毕竟不可能包含全部各种需求所需要的数据类型类型；\",\"字典存在意义，从上面题目完成后应该要 get 到。\"]},\"168\":{\"h\":\"2. 字典结构\",\"t\":[\"用 花括号 表示字典\",\"字典内每一项都有两个元素组成：key 和 value\",\"{key: value, key: value}\",\"各个项用 逗号 隔开\",\"phone_numbers = {'lilei': 1234, 'hanmeimei': 3456, 'madongmei': 1123} print(phone_numbers['lilei']) # 提取某个value用[key] # output 1234 \"]},\"169\":{\"h\":\"3. 字典结构 key&value\",\"t\":[\"key 和 value 是一一对应，同一个键只能有一个对应的值\",\"键的类型是不可变的；str/\",\"value 的类型是任意的；\",\"phone_numbers = {'lilei': 1234, 'hanmeimei': 3456, 'madongmei': 1123, True :'bool', 2:'int' } print(phone_numbers) # output {'lilei': 1234, 'hanmeimei': 3456, 'madongmei': 1123, True: 'bool', 2: 'int'} \",\"如果key用列表则会报错\",\"phone_numbers = {'lilei': 1234, ['hanmeimei']: 3456, 'madongmei': 1123, True :'bool', 2:'int' } print(phone_numbers) # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 1, in <module> phone_numbers = {'lilei': 1234, ['hanmeimei']: 3456, 'madongmei': 1123, True :'bool', 2:'int' } ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TypeError: unhashable type: 'list' \"]},\"170\":{\"h\":\"4. 用字典dict函数创建字典\",\"t\":[\"方法一：根据其他序列新建字典\",\"message = [('lilei', 98), ('hanmeimei', 99)] list_to_dict = dict(message) # 把元组中1号位都变成value print(list_to_dict) # output {'lilei': 98, 'hanmeimei': 99} \",\"方法二：根据关键字参数新建字典\",\"d = dict(lilei=98, hanmeimei=99) print(d) # output {'lilei': 98, 'hanmeimei': 99} \",\"上面两种创建字典的方法，有什么优缺点？\",\"上面方法一的方法，可以更好的适配字典的各种数据类型情况。why？——因为结构是列表里面放元组，而元组的 0 号位放 key，1 号位放 value。所以，只要是不可变的数据类型都可以放在 0 号位。\",\"反之对比上面方法二：第一个位置必须是“变量”，不能是其它数据类型。举个例子：\",\"d = dict(lilei=98, hanmeimei=99) # 看起来正常 lilei是变量 d = dict('lilei'=98, 'hanmeimei'=99) # 看起来怎么样？‘lilei’是value File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 1 d = dict('lilei'=98, hanmeimei=99) ^^^^^^^^ SyntaxError: expression cannot contain assignment, perhaps you meant \\\"==\\\"? # value 不能被赋值为另一个 value，value之间只能用 == \",\"上面第二行代码，看起来就很奇怪了，一共有两个值一个值是 'lilei' 另一个值 98 两个都是值，可以用 98 赋值给另一个值吗？——显然是不行的。我们的赋值是需要把一个值赋值给一个变量「有空间」。\",\"所以，第二种方法虽然可以实现创建字典，但是对于字典 key 的各种情况并不能完全支持。\",\"output时 第二种的 key 只会是字符串\"]},\"171\":{\"h\":\"5. 访问字典的数据\"},\"172\":{\"h\":\"5.1 用中括号访问\",\"t\":[\"利用中括号加要查询的 key\",\"grade = {'lilei': 98, 'hanmeimei': 99} print(grade['hanmeimei']) \"]},\"173\":{\"h\":\"5.2 上面的提取方法存在的问题\",\"t\":[\"在提取不存在的key时会报错\",\"grade = {'lilei': 98, 'hanmeimei': 99} print(grade['ma']) # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 2, in <module> print(grade['ma']) ~~~~~^^^^^^ KeyError: 'ma' \",\"就像我们查询电话簿的时候，没找到会返回：未找到。\",\"image-20240103225717283\"]},\"174\":{\"h\":\"5.3 使用.get()解决\",\"t\":[\"当使用 get 方法时，需要提供一个键（key），方法会返回与该键关联的值。如果该键在字典中不存在，get 方法将返回 None，或者你可以指定一个默认值，如果键不存在，则返回这个默认值。\",\"这是 get 方法的基本语法：\",\"value = dictionary.get(key, default_value) \",\"key：你想要检索的键。\",\"default_value：（可选）如果键不存在时返回的值。如果未提供此参数，默认值为 None。\",\"下面是一个使用 get 方法的例子：\",\"grade = {'lilei': 98, 'hanmeimei': 99} print(grade.get(\\\"lilei\\\")) print(grade.get(\\\"ma\\\")) # 如果key不存在则会返回默认值None # 如果单独设定在 key 不存在时所指定的返回内容 print(grade.get(\\\"ma\\\", \\\"Not specified\\\")) # output 98 None Not specified \",\"在第一个 get 调用中，我们访问了键 'name'，它在字典中存在，因此返回了对应的值 98。在第二个调用中，我们试图访问键 'ma'，它在字典中不存在，因此返回了我们指定的默认值 'Not Specified'。\"]},\"175\":{\"h\":\"6. 更新字典的数据\",\"t\":[\"字典修改或添加数据原则：有则改之，无则加勉「无则添加」\",\"image-20240103230249845\",\"grade = {'lilei': 98, 'hanmeimei': 99} grade['lilei'] = 95 grade['madongmei'] = 100 print(grade) # output {'lilei': 95, 'hanmeimei': 99, 'madongmei': 100} \"]},\"176\":{\"h\":\"7. 字典数据删除\",\"t\":[\"image-20240122231842997\",\"grade = {'A': 98, \\\"B\\\": 99, \\\"C\\\": 95} print(grade) del grade['A'] print(grade) # output {'A': 98, 'B': 99, 'C': 95} {'B': 99, 'C': 95} \",\"grade.clear() print(grade) # output {} \",\"del grade # the variable would be deleted hence not able to print print(grade) # output Traceback (most recent call last): File \\\"/Users/gaxa/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/c6f75b68835a096ebee7933989e7770c/Message/MessageTemp/4b975e58c46c58ce379c1852275bb5cf/File/python.py\\\", line 10, in <module> print(grade) ^^^^^ NameError: name 'grade' is not defined \"]},\"177\":{\"h\":\"8. 字典结构嵌套字典\",\"t\":[\"嵌套：将一系列字典存储在列表中，或将列表作为值存储在字典中。\",\"字典列表\",\"在字典中存储列表\",\"在字典中存储字典\"]},\"178\":{\"h\":\"8.1 字典列表\",\"t\":[\"student1 = {'name': \\\"A\\\", \\\"age\\\": 18, \\\"grade\\\": 98} student2 = {'name': \\\"B\\\", \\\"age\\\": 19, \\\"grade\\\": 99} student3 = {'name': \\\"C\\\", \\\"age\\\": 18, \\\"grade\\\": 95} students = [student1, student2, student3] print(students) print(students[2][\\\"grade\\\"]) print(students[2].get(\\\"grade\\\")) \",\"小试牛刀：通过提取 students 来得到 韩梅梅的分数\",\"中括号和 get 的选择依据：看数据是否是确定的，如果是确定的优先使用中括号提取。否则，使用 get。\",\"::::\"]},\"179\":{\"h\":\"8.2 在字典中存储列表\",\"t\":[\"favorite_class = { 'A': [\\\"math\\\", \\\"english\\\"], 'B': [\\\"chinese\\\"], 'C': [\\\"computer science\\\", \\\"physics\\\", \\\"math\\\"] } print(favorite_class[\\\"C\\\"][2]) # output math \"]},\"180\":{\"h\":\"8.3 在字典中存储字典\",\"t\":[\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} student2 = {\\\"name\\\": 'B', \\\"grade\\\": 95, \\\"实验班\\\": True} student3 = {\\\"name\\\": 'C', \\\"grade\\\": 89, \\\"实验班\\\": False} class1 = {\\\"A\\\": student1, \\\"B\\\": student2, \\\"C\\\": student3} print(class1) print(class1[\\\"C\\\"][\\\"实验班\\\"]) # output False \"]},\"181\":{\"h\":\"9. 字典常见方法\"},\"182\":{\"h\":\"9.1 .pop(key)\",\"t\":[\"删除特定的键对值\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} student1.pop(\\\"实验班\\\") print(student1) # output {'name': 'A', 'grade': 98} \"]},\"183\":{\"h\":\"9.2 .keys()\",\"t\":[\"获取字典中的所有键\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} keys = student1.keys() print(keys) print(list(keys)) # output dict_keys(['name', 'grade', '实验班']) ['name', 'grade', '实验班'] \"]},\"184\":{\"h\":\"9.3 .values()\",\"t\":[\"获取字典中的所有值\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} values = student1.values() print(values) print(list(values)) # output dict_values(['A', 98, True]) ['A', 98, True] \"]},\"185\":{\"h\":\"9.4 .items()\",\"t\":[\"获取字典的键对值，以tuple的形式\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} values = student1.items() print(values) print(list(values)) # output dict_items([('name', 'A'), ('grade', 98), ('实验班', True)]) [('name', 'A'), ('grade', 98), ('实验班', True)] \"]},\"186\":{\"h\":\"9.5 in\",\"t\":[\"默认情况是判断key在字典中\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} print(\\\"name\\\" in student1) True \",\"使用keys实现纯粹判断\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} print(\\\"name\\\" in student1.keys()) True \",\"使用values实现纯粹判断\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} print(\\\"name\\\" in student1.values()) False \",\"image-20240122234830051\"]},\"187\":{\"c\":[\"Python\"]},\"188\":{\"c\":[\"web\",\"typora\"]},\"189\":{\"h\":\"set\"},\"190\":{\"h\":\"1. 创建集合\",\"t\":[\"直接使用花括号创建\",\"set1 = {1, 2, 3, 4, 5} \",\"使用 set() 方法\",\"image-20240122235113623\"]},\"191\":{\"h\":\"2. 集合的交集\",\"t\":[\"交集：intersection，求两个集合中都出现了的元素， 用&运算符实现\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 & set2) # output {1, 2, 5} \"]},\"192\":{\"h\":\"3. 集合的并集\",\"t\":[\"并集：union，求两个集合中共有的元素，用 | 运算符实现\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 | set2) # output {1, 2, 3, 4, 5, 6, 8} \"]},\"193\":{\"h\":\"4. 集合的差集\",\"t\":[\"差集：difference，求set1和set2的差集时，会返回在set1中但不在set2中的元素，用-运算符实现\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 - set2) # output {3, 4} \"]},\"194\":{\"h\":\"5. 集合的对称差集\",\"t\":[\"对称差集：symmetric difference，求set1和set2的对称差集时，会返回在set1或在set2中，但不同时存在于两个集合中的元素，用运算符^实现 –> 等于并集减去交集，韦恩图\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 ^ set2) # output {3, 4, 6, 8} \"]},\"195\":{\"h\":\"6. 思考\",\"t\":[\"对称差集可以用其他三种集合操作来实现吗？如何实现？\",\"用并集减去交集\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) U = set1 | set2 N = set1 & set2 print(U - N) # output {8, 3, 4, 6} \"]},\"196\":{\"h\":\"7. .add() 添加集合元素\",\"t\":[\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) set1.add(9) print(set1) # output {1, 2, 3, 4, 5, 9} \"]},\"197\":{\"c\":[\"Python\"]},\"198\":{\"c\":[\"web\",\"typora\"]},\"199\":{\"h\":\"bool\"},\"200\":{\"h\":\"1. 布尔值\",\"t\":[\"意义：表示判断中的是与否。一般用于测试条件中。\",\"a = True print(a) print(10 < 5) print(10 > 8) # output True False True \",\"image-20240124230807747\",\"所有的非空值就是 True\",\"所有的空序列，空数字为 False\"]},\"201\":{\"h\":\"2. 逻辑运算符\",\"t\":[\"逻辑运算符：用于检测两个以上的条件是否满足\",\"逻辑运算符只存在于布尔当中\",\"逻辑运算符\",\"描述\",\"and 「逻辑“与”」\",\"当运算符两边的两个运算对象都为True时，结果为True\",\"or 「逻辑“或”」\",\"当运算符两边的两个运算对象其中有一个为True时，结果即为True\",\"not 「逻辑“非」\",\"用于反转运算对象的状态\",\"exp\",\"bool\",\"value\",\"Return value === print(exp)\",\"3 and 5\",\"True and True\",\"True\",\"5 *从3开始往右运行 运行到5也是True 返回5 (需要两个都True)\",\"3 or 5\",\"True or True\",\"True\",\"3 *or只需要一个True 到3就可以了\",\"0 or 5\",\"False or True\",\"True\",\"5 *到5才满足条件\",\"3 and not 5\",\"True and False\",\"False\",\"False\",\"0 and 5\",\"False and True\",\"False\",\"0 *0和false是一样的\",\"s1 = {False, 0} s2 = {0, False} print(s1, s2) # output {False} {0} # set会自动去除后面和前面重复的 - 说明0和false等价 \",\"In [5]: True and False or True Out[5]: True # 先算and右边的 从右往左 In [6]: False or False or not False Out[6]: True \"]},\"202\":{\"h\":\"3. 表达式应用 — 条件测试\",\"t\":[\"检查当前变量是否与一个特定值相等\",\"比较数字的大小\",\"检查特定值是否在某序列里\"]},\"203\":{\"h\":\"3.1 多条件检查\",\"t\":[\"使用and检查多个条件\",\"age1 = 17 age2 = 18 print(age1 >= 18 and age2 >=18) print(age1 >= 15 and age2 >=18) # output False True \",\"使用or检查多个条件\",\"age1 = 17 age2 = 18 print(age1 >= 18 or age2 >=18) print(age1 >= 15 or age2 >=18) # output True True \",\"image-20240124235649487\"]},\"204\":{\"c\":[\"Python\"]},\"205\":{\"c\":[\"web\",\"typora\"]},\"206\":{\"h\":\"if\",\"t\":[\"python代码缩进问题\",\"四个空格或者一个Tab\",\"不要混用 (indentation error) 全部用tab/空格\",\"相同的缩进位置的代码 表示他们是同一个代码块\"]},\"207\":{\"c\":[\"Python\"]},\"208\":{\"c\":[\"web\",\"typora\"]}},\"dirtCount\":0,\"index\":[[\"相同的缩进位置的代码\",{\"1\":{\"206\":1}}],[\"空格\",{\"1\":{\"206\":1}}],[\"空数字为\",{\"1\":{\"200\":1}}],[\"四个空格或者一个tab\",{\"1\":{\"206\":1}}],[\"检查特定值是否在某序列里\",{\"1\":{\"202\":1}}],[\"检查当前变量是否与一个特定值相等\",{\"1\":{\"202\":1}}],[\"检测字符串是不是以特定字符或单词结尾\",{\"1\":{\"90\":1}}],[\"检测字符串是否以某个特定的内容开头\",{\"1\":{\"89\":1}}],[\"条件测试\",{\"0\":{\"202\":1}}],[\"说明0和false等价\",{\"1\":{\"201\":1}}],[\"非\",{\"1\":{\"201\":1}}],[\"与\",{\"1\":{\"201\":1}}],[\"逻辑\",{\"1\":{\"201\":3}}],[\"逻辑运算符只存在于布尔当中\",{\"1\":{\"201\":1}}],[\"逻辑运算符\",{\"0\":{\"201\":1},\"1\":{\"201\":2}}],[\"意义\",{\"1\":{\"200\":1}}],[\"^\",{\"1\":{\"194\":1}}],[\"^^^^^\",{\"1\":{\"176\":1}}],[\"^^^^^^^^\",{\"1\":{\"170\":1}}],[\"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\",{\"1\":{\"169\":1}}],[\"^^^^^^^\",{\"1\":{\"141\":1}}],[\"韦恩图\",{\"1\":{\"194\":1}}],[\"差集\",{\"1\":{\"193\":1}}],[\"|\",{\"1\":{\"192\":2,\"195\":1}}],[\"求set1和set2的对称差集时\",{\"1\":{\"194\":1}}],[\"求set1和set2的差集时\",{\"1\":{\"193\":1}}],[\"求两个集合中共有的元素\",{\"1\":{\"192\":1}}],[\"求两个集合中都出现了的元素\",{\"1\":{\"191\":1}}],[\"求余和幂运算\",{\"0\":{\"70\":1}}],[\"交集\",{\"1\":{\"191\":1}}],[\"交换果汁\",{\"1\":{\"31\":1}}],[\"嵌套\",{\"1\":{\"177\":1}}],[\"更新字典的数据\",{\"0\":{\"175\":1}}],[\"因此返回了我们指定的默认值\",{\"1\":{\"174\":1}}],[\"因此返回了对应的值\",{\"1\":{\"174\":1}}],[\"因为结构是列表里面放元组\",{\"1\":{\"170\":1}}],[\"因为zip已经被打开\",{\"1\":{\"163\":1}}],[\"因为元组不可变\",{\"1\":{\"161\":1}}],[\"因为报错很直观\",{\"1\":{\"121\":1}}],[\"因为我们不需要仓库管理员\",{\"1\":{\"47\":1}}],[\"因为\",{\"1\":{\"47\":1}}],[\"因为列表可变\",{\"1\":{\"47\":1}}],[\"因为仓库管理员会一直跟踪这个仓库的状态\",{\"1\":{\"47\":1}}],[\"它在字典中不存在\",{\"1\":{\"174\":1}}],[\"它在字典中存在\",{\"1\":{\"174\":1}}],[\"它的基本语法是\",{\"1\":{\"134\":1}}],[\"调用中\",{\"1\":{\"174\":1}}],[\"解决\",{\"0\":{\"174\":1}}],[\"解决方法很直白\",{\"1\":{\"121\":1}}],[\"未找到\",{\"1\":{\"173\":1}}],[\"没找到会返回\",{\"1\":{\"173\":1}}],[\"没有任何输出没有报错\",{\"1\":{\"67\":1}}],[\"访问字典的数据\",{\"0\":{\"171\":1}}],[\"另一个值\",{\"1\":{\"170\":1}}],[\"另一种则是输入的时\",{\"1\":{\"121\":1}}],[\"看数据是否是确定的\",{\"1\":{\"178\":1}}],[\"看起来就很奇怪了\",{\"1\":{\"170\":1}}],[\"看起来怎么样\",{\"1\":{\"170\":1}}],[\"看起来正常\",{\"1\":{\"170\":1}}],[\"看看会输出上面结果\",{\"1\":{\"62\":1}}],[\"号位\",{\"1\":{\"170\":1}}],[\"号位放\",{\"1\":{\"170\":2}}],[\"号用来解包\",{\"1\":{\"163\":2}}],[\"把元组中1号位都变成value\",{\"1\":{\"170\":1}}],[\"把右侧的运算对象赋值给左侧的运算对象\",{\"1\":{\"63\":1}}],[\"根据关键字参数新建字典\",{\"1\":{\"170\":1}}],[\"根据其他序列新建字典\",{\"1\":{\"170\":1}}],[\"根据现有的知识排序\",{\"0\":{\"161\":1}}],[\"键的类型是不可变的\",{\"1\":{\"169\":1}}],[\"键盘上可以输入的字符\",{\"1\":{\"40\":1}}],[\"同一个键只能有一个对应的值\",{\"1\":{\"169\":1}}],[\"同时去除两端的所有减号和空格\",{\"1\":{\"100\":1}}],[\"同时输出多个变量\",{\"1\":{\"23\":1}}],[\"同时输出多个数据\",{\"0\":{\"23\":1}}],[\"各个项用\",{\"1\":{\"168\":1}}],[\"花括号\",{\"1\":{\"168\":1}}],[\"到5才满足条件\",{\"1\":{\"201\":1}}],[\"到3就可以了\",{\"1\":{\"201\":1}}],[\"到\",{\"1\":{\"167\":1}}],[\"毕竟不可能包含全部各种需求所需要的数据类型类型\",{\"1\":{\"167\":1}}],[\"由上面的问题应该要了解两个点\",{\"1\":{\"167\":1}}],[\"由上面的代码可知\",{\"1\":{\"107\":1}}],[\"韩梅梅的分数\",{\"1\":{\"178\":1}}],[\"韩梅梅\",{\"1\":{\"167\":1}}],[\"手机号\",{\"1\":{\"167\":1}}],[\"姓名\",{\"1\":{\"167\":1}}],[\"迭代器地址\",{\"1\":{\"163\":1}}],[\"zipped\",{\"1\":{\"163\":11}}],[\"zip\",{\"0\":{\"163\":1},\"1\":{\"163\":6}}],[\"zh\",{\"1\":{\"31\":1}}],[\"实验班\",{\"1\":{\"180\":4,\"182\":2,\"183\":3,\"184\":1,\"185\":3,\"186\":3}}],[\"实际上\",{\"1\":{\"162\":1}}],[\"实现的也就是上面的流程\",{\"1\":{\"162\":1}}],[\"实现两位的加减乘除\",{\"1\":{\"121\":1}}],[\"实现原因\",{\"1\":{\"121\":1}}],[\"实现以上要求\",{\"1\":{\"61\":1}}],[\"接着进行转换回元组\",{\"1\":{\"161\":1}}],[\"接着给老师\",{\"1\":{\"20\":1}}],[\"然后再进行排序\",{\"1\":{\"161\":1}}],[\"然后直接传给用户查看\",{\"1\":{\"47\":1}}],[\"思考\",{\"0\":{\"195\":1}}],[\"思考一下\",{\"1\":{\"158\":1}}],[\"思路\",{\"1\":{\"161\":1}}],[\"加一个逗号以此区分\",{\"1\":{\"158\":1}}],[\"加一个逗号\",{\"1\":{\"158\":1}}],[\"加法运算符\",{\"1\":{\"60\":1}}],[\"左边的\",{\"1\":{\"158\":1}}],[\"左闭右开\",{\"1\":{\"80\":1}}],[\"即列表是可变的数据类型\",{\"1\":{\"155\":1}}],[\"包裹\",{\"1\":{\"155\":2}}],[\"包括空格\",{\"1\":{\"77\":1}}],[\"里面的元素用逗号隔开\",{\"1\":{\"154\":1}}],[\"里面还有哪个位置\",{\"1\":{\"47\":1}}],[\"排序后原列表不变\",{\"1\":{\"150\":1}}],[\"使列表内的元素从小到大排列\",{\"1\":{\"149\":1}}],[\"使用or检查多个条件\",{\"1\":{\"203\":1}}],[\"使用and检查多个条件\",{\"1\":{\"203\":1}}],[\"使用values实现纯粹判断\",{\"1\":{\"186\":1}}],[\"使用keys实现纯粹判断\",{\"1\":{\"186\":1}}],[\"使用小括号创建\",{\"1\":{\"154\":1}}],[\"使用eval\",{\"0\":{\"121\":1}}],[\"使用输入提示\",{\"1\":{\"117\":1}}],[\"使用slicing\",{\"1\":{\"112\":1}}],[\"使用slicing区间\",{\"1\":{\"80\":1,\"81\":1}}],[\"使用f前变量必须都被创建好\",{\"1\":{\"109\":1}}],[\"使用len\",{\"1\":{\"77\":1,\"135\":1}}],[\"使用\",{\"0\":{\"162\":1,\"174\":1},\"1\":{\"23\":1,\"76\":1,\"116\":1,\"178\":1,\"190\":1}}],[\"元素用圆括号\",{\"1\":{\"155\":1}}],[\"元素用方括号\",{\"1\":{\"155\":1}}],[\"元素\",{\"1\":{\"143\":1,\"147\":1}}],[\"元组同理\",{\"1\":{\"163\":1}}],[\"元组或字符串\",{\"1\":{\"163\":1}}],[\"元组只有一个元素的情况\",{\"1\":{\"158\":1}}],[\"元组是不可变的\",{\"0\":{\"156\":1}}],[\"元组是不可变的数据类型\",{\"1\":{\"155\":1}}],[\"元组的排序\",{\"0\":{\"160\":1}}],[\"元组的拼接\",{\"0\":{\"159\":1}}],[\"元组的特点\",{\"0\":{\"158\":1}}],[\"元组的取值和分片操作\",{\"0\":{\"157\":1}}],[\"元组的功能刚刚好够用\",{\"1\":{\"47\":1}}],[\"元组的三大特性\",{\"0\":{\"46\":1}}],[\"元组为什么不合适\",{\"1\":{\"47\":1}}],[\"元组vs列表\",{\"0\":{\"47\":1}}],[\"元组不可以\",{\"1\":{\"46\":1}}],[\"元组里面每个元素算一个\",{\"1\":{\"46\":1}}],[\"元组\",{\"0\":{\"44\":1},\"1\":{\"50\":1,\"53\":1,\"120\":1,\"136\":1,\"167\":1}}],[\"向列表添加元素\",{\"0\":{\"137\":1}}],[\"放进去的是key\",{\"1\":{\"136\":1}}],[\"放入字符串\",{\"1\":{\"76\":1}}],[\"开始\",{\"1\":{\"134\":1}}],[\"开辟空间\",{\"1\":{\"20\":1}}],[\"索引从\",{\"1\":{\"134\":1}}],[\"给定下面列表\",{\"1\":{\"133\":1}}],[\"结束位置\",{\"1\":{\"130\":1}}],[\"结果即为true\",{\"1\":{\"201\":1}}],[\"结果为true\",{\"1\":{\"201\":1}}],[\"结果小数\",{\"1\":{\"63\":1}}],[\"结果整数\",{\"1\":{\"63\":1}}],[\"结果就会得到浮点数\",{\"1\":{\"59\":1}}],[\"起始位置\",{\"1\":{\"130\":1}}],[\"起的最早的是理想主义者\",{\"1\":{\"76\":1}}],[\"英文输入法\",{\"1\":{\"126\":1}}],[\"隔开\",{\"1\":{\"126\":1,\"168\":1}}],[\"逗号\",{\"1\":{\"126\":1,\"168\":1}}],[\"利用中括号加要查询的\",{\"1\":{\"172\":1}}],[\"利用\",{\"1\":{\"126\":1}}],[\"函数就非常有用\",{\"1\":{\"163\":1}}],[\"函数默认删除列表中的最后一个元素\",{\"1\":{\"142\":1}}],[\"函数\",{\"1\":{\"122\":1}}],[\"函数里面支持我们写入字符串进行提示\",{\"1\":{\"117\":1}}],[\"要求\",{\"1\":{\"122\":1}}],[\"显然\",{\"1\":{\"121\":1}}],[\"显然是不行的\",{\"1\":{\"170\":1}}],[\"显然是不行的🙅\",{\"1\":{\"53\":1}}],[\"显然是不会的\",{\"1\":{\"47\":1}}],[\"显然是不合适的\",{\"1\":{\"20\":1}}],[\"显然是的\",{\"1\":{\"20\":1}}],[\"故而报错\",{\"1\":{\"121\":1}}],[\"转换成列表查看\",{\"1\":{\"163\":2}}],[\"转换之后\",{\"1\":{\"121\":1}}],[\"转义字符\",{\"1\":{\"113\":1}}],[\"其中\",{\"1\":{\"121\":1}}],[\"稍微分析一下\",{\"1\":{\"121\":1}}],[\"伴随的问题\",{\"1\":{\"121\":1}}],[\"方法\",{\"1\":{\"190\":1}}],[\"方法的例子\",{\"1\":{\"174\":1}}],[\"方法的基本语法\",{\"1\":{\"174\":1}}],[\"方法将返回\",{\"1\":{\"174\":1}}],[\"方法会返回与该键关联的值\",{\"1\":{\"174\":1}}],[\"方法时\",{\"1\":{\"174\":1}}],[\"方法二\",{\"0\":{\"121\":1},\"1\":{\"170\":1}}],[\"方法一\",{\"0\":{\"120\":1},\"1\":{\"170\":1}}],[\"适合\",{\"1\":{\"120\":1}}],[\"存在一些问题\",{\"1\":{\"120\":1}}],[\"强制类型转换\",{\"0\":{\"120\":1}}],[\"得知\",{\"1\":{\"119\":1}}],[\"得到两个整数的和\",{\"1\":{\"122\":1}}],[\"得到字符串类型\",{\"1\":{\"121\":1}}],[\"得到把每一个元素拆开\",{\"1\":{\"120\":1}}],[\"得到的数据类型都是字符串\",{\"1\":{\"119\":1}}],[\"得到类型皆为字符串\",{\"0\":{\"119\":1}}],[\"通过提取\",{\"1\":{\"178\":1}}],[\"通过\",{\"1\":{\"119\":1}}],[\"通过上面的代码示例\",{\"1\":{\"119\":1}}],[\"通过变量名代表或引用某个值\",{\"1\":{\"21\":1}}],[\"何况非程序员用户呢\",{\"1\":{\"117\":1}}],[\"程序运行效果\",{\"1\":{\"167\":1}}],[\"程序需要我们输入\",{\"1\":{\"117\":1}}],[\"程序的运行逻辑\",{\"1\":{\"21\":1}}],[\"基本使用\",{\"0\":{\"116\":1}}],[\"读取用户输入\",{\"0\":{\"115\":1}}],[\"怎么办呢\",{\"1\":{\"114\":1}}],[\"形成了一个字符串\",{\"1\":{\"114\":1}}],[\"形成标题的一种格式\",{\"1\":{\"88\":1}}],[\"前再加一个\",{\"1\":{\"113\":1}}],[\"原本使用\",{\"1\":{\"113\":1}}],[\"原子弹仓库的状态吗\",{\"1\":{\"47\":1}}],[\"取不到5\",{\"1\":{\"132\":1}}],[\"取消转义\",{\"1\":{\"113\":1}}],[\"取余的结果和\",{\"1\":{\"70\":1}}],[\"取余运算符\",{\"1\":{\"60\":1}}],[\"制表符\",{\"1\":{\"113\":1}}],[\"换行\",{\"1\":{\"113\":1}}],[\"退格\",{\"1\":{\"113\":1}}],[\"反之对比上面方法二\",{\"1\":{\"170\":1}}],[\"反斜杠符号\",{\"1\":{\"113\":1}}],[\"反转后的数字为\",{\"1\":{\"61\":1}}],[\"含义\",{\"1\":{\"113\":1}}],[\"还是两个独立的字符串\",{\"1\":{\"114\":1}}],[\"还可以用r取消转义\",{\"1\":{\"113\":1}}],[\"还可以使用字符串拼接\",{\"1\":{\"112\":1}}],[\"还需要知道在哪里添加\",{\"1\":{\"47\":1}}],[\"还需要元组\",{\"1\":{\"47\":1}}],[\"柜员边问你边登记\",{\"1\":{\"111\":1}}],[\"提取某个value用\",{\"1\":{\"168\":1}}],[\"提取单个元素\",{\"0\":{\"129\":1}}],[\"提前做好模版后面有需要试可以直接使用\",{\"1\":{\"111\":1}}],[\"提示\",{\"1\":{\"67\":1}}],[\"提示容器\",{\"0\":{\"6\":1}}],[\"暴富\",{\"1\":{\"110\":2}}],[\"发大财\",{\"1\":{\"110\":2}}],[\"格式化\",{\"0\":{\"110\":1}}],[\"将一系列字典存储在列表中\",{\"1\":{\"177\":1}}],[\"将列表进行小到大排序\",{\"1\":{\"150\":1}}],[\"将variable保留到x位小数\",{\"1\":{\"109\":1}}],[\"将字符串全部转换为小写\",{\"1\":{\"86\":1}}],[\"将字符串全部转换为大写\",{\"1\":{\"85\":1}}],[\"直接使用花括号创建\",{\"1\":{\"190\":1}}],[\"直接使用加号拼接\",{\"1\":{\"159\":1}}],[\"直接使用加号\",{\"1\":{\"144\":1}}],[\"直接修改列表本身\",{\"1\":{\"149\":1}}],[\"直接输入原有的类型并得到原有的类型\",{\"1\":{\"119\":1}}],[\"直接读取变量\",{\"1\":{\"109\":1}}],[\"直接检测数据类型\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2}}],[\"保留小数位\",{\"1\":{\"109\":1,\"110\":1}}],[\"保留三位小数\",{\"1\":{\"108\":1}}],[\"保留x位小数\",{\"1\":{\"108\":1}}],[\"保留指定小数位置\",{\"1\":{\"108\":1}}],[\"参数指定\",{\"1\":{\"108\":1}}],[\"序号指定\",{\"1\":{\"108\":1}}],[\"按顺序填充\",{\"1\":{\"108\":1}}],[\"虽然实现了\",{\"1\":{\"107\":1}}],[\"但不同时存在于两个集合中的元素\",{\"1\":{\"194\":1}}],[\"但凡我们想修改元组\",{\"1\":{\"156\":1}}],[\"但字符串加法存在问题\",{\"1\":{\"107\":1}}],[\"但是对于字典\",{\"1\":{\"170\":1}}],[\"但是目前不涉及\",{\"1\":{\"163\":1}}],[\"但是我们实际上我们在我们之前的代码中\",{\"1\":{\"121\":1}}],[\"但是为了让你们更好理解原理\",{\"1\":{\"121\":1}}],[\"但是也伴随着我们需要注意的问题\",{\"1\":{\"121\":1}}],[\"但是上面的代码\",{\"1\":{\"117\":1}}],[\"但是如果想要输出\",{\"1\":{\"113\":1}}],[\"但是很繁琐\",{\"1\":{\"107\":1}}],[\"但是要编写符合题目要求的输出\",{\"1\":{\"67\":1}}],[\"但是不能修改输出\",{\"1\":{\"53\":1}}],[\"但是没必要\",{\"1\":{\"47\":1}}],[\"但是可以使用下划线来分隔其中的单词\",{\"1\":{\"30\":1}}],[\"当运算符两边的两个运算对象其中有一个为true时\",{\"1\":{\"201\":1}}],[\"当运算符两边的两个运算对象都为true时\",{\"1\":{\"201\":1}}],[\"当使用\",{\"1\":{\"174\":1}}],[\"当然也可以用循环\",{\"1\":{\"163\":1}}],[\"当然没有通过上面的分析也可以大概预料到问题\",{\"1\":{\"121\":1}}],[\"当然\",{\"1\":{\"107\":1}}],[\"当我们放东西\",{\"1\":{\"20\":1}}],[\"地面填写进去\",{\"1\":{\"107\":1}}],[\"让我们不同的人名\",{\"1\":{\"107\":1}}],[\"指定删除列表中某个元素\",{\"1\":{\"143\":1}}],[\"指定要插入元素的位置\",{\"1\":{\"134\":1}}],[\"指定分割次数\",{\"1\":{\"105\":1}}],[\"指数运算符\",{\"1\":{\"60\":1}}],[\"以tuple的形式\",{\"1\":{\"185\":1}}],[\"以特定字符为字符串每个字符中间的间隔\",{\"1\":{\"106\":1}}],[\"以特定字符进行分割\",{\"1\":{\"104\":1}}],[\"以下哪个操作会返回浮点数\",{\"1\":{\"65\":1}}],[\"以下哪个运算符用于取余\",{\"1\":{\"65\":1}}],[\"以下哪个表示删除变量\",{\"1\":{\"31\":1}}],[\"以下哪个表示全局变量\",{\"1\":{\"31\":1}}],[\"以下哪个是多变量赋值\",{\"1\":{\"31\":1}}],[\"以下哪个是有效的变量赋值\",{\"1\":{\"31\":1}}],[\"以下哪个变量名是有效的\",{\"1\":{\"31\":1}}],[\"置换前三个减号为\",{\"1\":{\"103\":1}}],[\"去除前后减号\",{\"1\":{\"100\":1}}],[\"去除前后空格\",{\"1\":{\"100\":1}}],[\"去跟踪状态\",{\"1\":{\"47\":1}}],[\"默认情况是判断key在字典中\",{\"1\":{\"186\":1}}],[\"默认值为\",{\"1\":{\"174\":1}}],[\"默认\",{\"1\":{\"150\":1}}],[\"默认从左边开始分割\",{\"1\":{\"104\":1}}],[\"默认空格分割\",{\"1\":{\"104\":1}}],[\"默认把所有空格都换成\",{\"1\":{\"103\":1}}],[\"默认去掉字符串右边的空白字符\",{\"1\":{\"102\":1}}],[\"默认去掉字符串左边的空白字符\",{\"1\":{\"101\":1}}],[\"默认去掉目标字符串的前后空白字符\",{\"1\":{\"100\":1}}],[\"默认正数为1\",{\"1\":{\"83\":1}}],[\"纯空格则返回\",{\"1\":{\"99\":1}}],[\"纯数字字母字符串\",{\"1\":{\"96\":1}}],[\"全部用tab\",{\"1\":{\"206\":1}}],[\"全小写则返回\",{\"1\":{\"98\":1}}],[\"全大写则返回\",{\"1\":{\"97\":1}}],[\"全国人民代表大会\",{\"1\":{\"21\":1}}],[\"k\",{\"1\":{\"92\":1,\"93\":1}}],[\"keys\",{\"0\":{\"183\":1},\"1\":{\"183\":5,\"186\":1}}],[\"keyerror\",{\"1\":{\"173\":1}}],[\"key2\",{\"1\":{\"50\":1}}],[\"key1\",{\"1\":{\"50\":1}}],[\"key\",{\"0\":{\"169\":1,\"182\":1},\"1\":{\"50\":4,\"168\":4,\"169\":1,\"170\":3,\"172\":1,\"174\":4}}],[\"keyword\",{\"1\":{\"30\":1}}],[\"keywords\",{\"1\":{\"30\":2}}],[\"查询的字符或单词不存在\",{\"1\":{\"92\":1,\"93\":1}}],[\"寻找目标字符或单词在特定字符串中\",{\"1\":{\"92\":1,\"93\":1}}],[\"区分大小写\",{\"1\":{\"91\":1}}],[\"返回5\",{\"1\":{\"201\":1}}],[\"返回新列表\",{\"1\":{\"150\":1}}],[\"返回分割后的列表\",{\"1\":{\"104\":1,\"105\":1}}],[\"返回第一次出现时的下标\",{\"1\":{\"92\":1}}],[\"返回目标单词的第一个字符的下标\",{\"1\":{\"92\":1,\"93\":1}}],[\"返回布尔值\",{\"1\":{\"90\":1}}],[\"返回true或false\",{\"1\":{\"89\":1}}],[\"返回字符串中字符长度或字符数\",{\"1\":{\"77\":1}}],[\"u\",{\"1\":{\"195\":2}}],[\"union\",{\"1\":{\"192\":1}}],[\"unhashable\",{\"1\":{\"169\":1}}],[\"upper\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"user\",{\"1\":{\"116\":2,\"117\":4}}],[\"users\",{\"1\":{\"107\":1,\"112\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1,\"176\":1}}],[\"use\",{\"1\":{\"31\":1}}],[\"省略号省略的是什么\",{\"1\":{\"83\":1}}],[\"正负控制方向\",{\"1\":{\"83\":1}}],[\"控制的是字符提取的方向\",{\"1\":{\"83\":1}}],[\"留空即可\",{\"1\":{\"82\":1}}],[\"或\",{\"1\":{\"201\":1}}],[\"或将列表作为值存储在字典中\",{\"1\":{\"177\":1}}],[\"或许不是按我说的实现\",{\"1\":{\"121\":1}}],[\"或结尾\",{\"1\":{\"82\":1}}],[\"或者你可以指定一个默认值\",{\"1\":{\"174\":1}}],[\"或者一个错误信息字符串\",{\"1\":{\"61\":1}}],[\"或者其中某一次\",{\"1\":{\"53\":1}}],[\"或者三个井号空格\",{\"1\":{\"1\":1}}],[\"则列表降序排列\",{\"1\":{\"149\":1}}],[\"则指定删除列表中的\",{\"1\":{\"143\":1}}],[\"则删除整个变量\",{\"1\":{\"141\":1}}],[\"则元素将被添加到列表的末尾\",{\"1\":{\"134\":1}}],[\"则需要创建一个新的字符串\",{\"1\":{\"112\":1}}],[\"则以参数进行分割\",{\"1\":{\"104\":1}}],[\"则去掉右边的指定字符\",{\"1\":{\"102\":1}}],[\"则去掉左边的指定字符\",{\"1\":{\"101\":1}}],[\"则报错\",{\"1\":{\"93\":1}}],[\"则返回这个默认值\",{\"1\":{\"174\":1}}],[\"则返回降序排序\",{\"1\":{\"150\":1}}],[\"则返回false\",{\"1\":{\"94\":1,\"95\":1}}],[\"则返回\",{\"1\":{\"92\":1,\"96\":1}}],[\"则会变成反方向\",{\"1\":{\"83\":1}}],[\"则可以省略开头和\",{\"1\":{\"82\":1}}],[\"则视为作答正确\",{\"1\":{\"67\":1}}],[\"优化\",{\"0\":{\"82\":1}}],[\"优先级最高\",{\"1\":{\"59\":2}}],[\"记得\",{\"1\":{\"80\":1,\"81\":1}}],[\"记录📝看了哪些帖子\",{\"1\":{\"47\":1}}],[\"语法\",{\"1\":{\"80\":1,\"81\":1}}],[\"获取字典的键对值\",{\"1\":{\"185\":1}}],[\"获取字典中的所有值\",{\"1\":{\"184\":1}}],[\"获取字典中的所有键\",{\"1\":{\"183\":1}}],[\"获取字符\",{\"1\":{\"81\":3,\"82\":2}}],[\"获取列表长度\",{\"1\":{\"135\":1}}],[\"获取列表中某个元素第一次出现的位置\",{\"0\":{\"147\":1}}],[\"获取列表中某个元素的重复次数\",{\"0\":{\"146\":1}}],[\"获取列表中连续且特定间隔的元素\",{\"0\":{\"131\":1}}],[\"获取列表中连续的几个元素\",{\"0\":{\"130\":1}}],[\"获取列表中的某个元素\",{\"0\":{\"127\":1}}],[\"获取户输入\",{\"1\":{\"121\":1}}],[\"获取用户输入两个值\",{\"1\":{\"133\":1}}],[\"获取用户输入来看两个整数\",{\"1\":{\"122\":1}}],[\"获取用户输入\",{\"1\":{\"116\":1,\"119\":1,\"121\":2}}],[\"获取rofn\",{\"1\":{\"83\":1}}],[\"获取多个不连续字符\",{\"0\":{\"81\":1}}],[\"获取一串连续字符\",{\"0\":{\"80\":1}}],[\"获取单个字符\",{\"0\":{\"79\":1}}],[\"获取关键词列表\",{\"1\":{\"30\":1}}],[\"三引号\",{\"1\":{\"121\":1}}],[\"三引号还可以用来注释\",{\"1\":{\"76\":1}}],[\"三种方法\",{\"1\":{\"108\":1,\"110\":1}}],[\"三个冒号结束\",{\"1\":{\"1\":1}}],[\"三个冒号+md\",{\"1\":{\"1\":1}}],[\"凡是你不能清晰写下来的东西\",{\"1\":{\"76\":1}}],[\"否则\",{\"1\":{\"178\":1}}],[\"否则返回\",{\"1\":{\"97\":1,\"98\":1,\"99\":1}}],[\"否则一切会很乱\",{\"1\":{\"76\":1}}],[\"否则不能完全包裹字符串内容\",{\"1\":{\"76\":1}}],[\"再去优化\",{\"1\":{\"76\":1}}],[\"再开始打\",{\"1\":{\"1\":1}}],[\"先算and右边的\",{\"1\":{\"201\":1}}],[\"先这样来\",{\"1\":{\"121\":1}}],[\"先实现功能\",{\"1\":{\"76\":1}}],[\"先以无序理解即可\",{\"1\":{\"50\":1}}],[\"而元组的\",{\"1\":{\"170\":1}}],[\"而通过\",{\"1\":{\"121\":1}}],[\"而\",{\"1\":{\"111\":1}}],[\"而且另一个问题就是\",{\"1\":{\"107\":1}}],[\"而不是每个人都从头创建一个新字符串\",{\"1\":{\"107\":1}}],[\"而真正的成功者\",{\"1\":{\"76\":1}}],[\"而胆子最大的是那些冒险家\",{\"1\":{\"76\":1}}],[\"疯狂往里冲的是韭菜\",{\"1\":{\"76\":1}}],[\"害怕错过一切\",{\"1\":{\"76\":1}}],[\"跑的最快的是骗子\",{\"1\":{\"76\":1}}],[\"黄家宝\",{\"1\":{\"76\":1}}],[\"深者见深\",{\"1\":{\"76\":1}}],[\"浅者见浅\",{\"1\":{\"76\":1}}],[\"单独一行直接运行\",{\"1\":{\"161\":1}}],[\"单个元素修改\",{\"1\":{\"136\":1}}],[\"单个位置传入\",{\"1\":{\"110\":1}}],[\"单个花括号\",{\"1\":{\"108\":1}}],[\"单双引号混用\",{\"1\":{\"76\":1}}],[\"单引号\",{\"1\":{\"76\":1}}],[\"双引号或者三引号\",{\"1\":{\"76\":1}}],[\"特殊字符来组成的一个序列\",{\"1\":{\"75\":1}}],[\"特点\",{\"1\":{\"20\":1}}],[\"等于并集减去交集\",{\"1\":{\"194\":1}}],[\"等于\",{\"1\":{\"71\":1}}],[\"等同于\",{\"1\":{\"63\":6}}],[\"小技巧\",{\"1\":{\"121\":1}}],[\"小于\",{\"1\":{\"71\":1}}],[\"小试牛刀\",{\"0\":{\"61\":1,\"122\":1,\"133\":1,\"161\":1},\"1\":{\"178\":1}}],[\"大卫\",{\"1\":{\"167\":1}}],[\"大概率实现的是去掉字符串左右两边的引号\",{\"1\":{\"121\":1}}],[\"大概\",{\"1\":{\"121\":1}}],[\"大于\",{\"1\":{\"71\":1}}],[\"大小写英文\",{\"1\":{\"30\":1}}],[\"大小\",{\"1\":{\"19\":1}}],[\"q\",{\"1\":{\"71\":13}}],[\"次幂\",{\"1\":{\"70\":1}}],[\"测试二\",{\"1\":{\"167\":1}}],[\"测试一\",{\"1\":{\"167\":1}}],[\"测试\",{\"1\":{\"68\":1,\"69\":1,\"70\":1}}],[\"测试部分代码\",{\"1\":{\"67\":1}}],[\"减去\",{\"1\":{\"68\":1}}],[\"减法运算符\",{\"1\":{\"60\":1}}],[\"创建集合\",{\"0\":{\"190\":1}}],[\"创建元组\",{\"0\":{\"154\":1}}],[\"创建字符串\",{\"0\":{\"76\":1}}],[\"创建两个数字\",{\"1\":{\"68\":1,\"69\":1,\"70\":1}}],[\"创建变量并输出\",{\"1\":{\"31\":1}}],[\"编程语言中通常\",{\"1\":{\"128\":1}}],[\"编程题\",{\"0\":{\"67\":1}}],[\"编写一段\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"后要用括号\",{\"1\":{\"110\":1}}],[\"后\",{\"1\":{\"66\":2}}],[\"作为结果\",{\"1\":{\"66\":1}}],[\"会返回在set1或在set2中\",{\"1\":{\"194\":1}}],[\"会返回在set1中但不在set2中的元素\",{\"1\":{\"193\":1}}],[\"会把整个list都放进去\",{\"1\":{\"138\":1}}],[\"会被省略掉\",{\"1\":{\"83\":1}}],[\"会得到\",{\"1\":{\"66\":1,\"121\":1}}],[\"会自动将其转换为列表\",{\"1\":{\"162\":1}}],[\"会自动去重\",{\"1\":{\"53\":1}}],[\"会自动去掉重复的\",{\"1\":{\"53\":1}}],[\"会自动生成文件夹\",{\"1\":{\"1\":1}}],[\"填空\",{\"0\":{\"66\":1}}],[\"无则添加\",{\"1\":{\"175\":1}}],[\"无则加勉\",{\"1\":{\"175\":1}}],[\"无法确定\",{\"1\":{\"65\":3}}],[\"无序性\",{\"1\":{\"50\":1,\"53\":1}}],[\"报错\",{\"1\":{\"65\":3}}],[\"🙆✅\",{\"1\":{\"65\":2}}],[\"整数\",{\"1\":{\"65\":2,\"110\":1}}],[\"整型\",{\"1\":{\"37\":1}}],[\"执行表达式\",{\"1\":{\"66\":1}}],[\"执行\",{\"1\":{\"65\":6,\"66\":6}}],[\"选择题\",{\"0\":{\"65\":1}}],[\"试一试上面的例子\",{\"1\":{\"62\":1}}],[\"判断某个元素是否存在于列表中\",{\"0\":{\"145\":1}}],[\"判断字符串是否为纯空格\",{\"1\":{\"99\":1}}],[\"判断字符串是不是字母全小写\",{\"1\":{\"98\":1}}],[\"判断字符串是不是纯数字或纯字母\",{\"1\":{\"96\":1}}],[\"判断字符串是不是纯数字字符串\",{\"1\":{\"94\":1}}],[\"判断字符串是不是纯字母字符串\",{\"1\":{\"95\":1}}],[\"判断字符串中的字母是否全大写\",{\"1\":{\"97\":1}}],[\"判断两个运算对象是否不相同\",{\"1\":{\"62\":1}}],[\"判断两个运算对象是否相同\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否小于或等于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否小于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否大于或等于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否大于第二个运算对象\",{\"1\":{\"62\":1}}],[\"<zip\",{\"1\":{\"163\":2}}],[\"<string>\",{\"1\":{\"121\":1}}],[\"<module>\",{\"1\":{\"107\":1,\"112\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"173\":1,\"176\":1}}],[\"<=\",{\"1\":{\"62\":3,\"66\":1}}],[\"<\",{\"1\":{\"62\":3,\"71\":2,\"200\":1}}],[\"<class\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"55\":1,\"154\":1,\"158\":2}}],[\"比较数字的大小\",{\"1\":{\"202\":1}}],[\"比较它们的大小并打印出相应的比较结果\",{\"1\":{\"71\":1}}],[\"比较运算\",{\"0\":{\"71\":1}}],[\"比较运算符\",{\"0\":{\"62\":1}}],[\"比较值的大小\",{\"0\":{\"62\":1}}],[\"比如你有一个系统\",{\"1\":{\"47\":1}}],[\"比如社交平台上的一个日志功能\",{\"1\":{\"47\":1}}],[\"比如\",{\"1\":{\"43\":1,\"46\":1,\"50\":1,\"53\":1}}],[\"为了在字符串中得到\",{\"1\":{\"113\":1}}],[\"为\",{\"1\":{\"61\":3}}],[\"为什么会是这个结果呢\",{\"1\":{\"158\":1}}],[\"为什么会导致上面的报错呢\",{\"1\":{\"121\":1}}],[\"为什么列表不行\",{\"1\":{\"53\":1}}],[\"为什么🧐有列表后\",{\"1\":{\"47\":1}}],[\"示例代码\",{\"1\":{\"113\":1}}],[\"示例\",{\"1\":{\"61\":1}}],[\"两个都是值\",{\"1\":{\"170\":1}}],[\"两个列表相加\",{\"0\":{\"144\":1}}],[\"两个整数\",{\"1\":{\"61\":1}}],[\"两个井号空格\",{\"1\":{\"1\":1}}],[\"≤\",{\"1\":{\"61\":2}}],[\"请你编写\",{\"1\":{\"61\":1}}],[\"第二种的\",{\"1\":{\"170\":1}}],[\"第二种方法虽然可以实现创建字典\",{\"1\":{\"170\":1}}],[\"第二个位置传入要替换的新字符\",{\"1\":{\"103\":1}}],[\"第二个新数字是原数字的反转\",{\"1\":{\"61\":1}}],[\"第三个位置默认是+1\",{\"1\":{\"131\":1}}],[\"第一个位置必须是\",{\"1\":{\"170\":1}}],[\"第一个位置的编号是\",{\"1\":{\"128\":1}}],[\"第一个位置传入待替换的\",{\"1\":{\"103\":1}}],[\"第一个新数字是原数字的两位数中的各个数字的和\",{\"1\":{\"61\":1}}],[\"第一次出现的下标\",{\"1\":{\"92\":1,\"93\":1}}],[\"计算特定字符或单词在目标字符串中存在的次数\",{\"1\":{\"91\":1}}],[\"计算并打印出\",{\"1\":{\"70\":1}}],[\"计算并打印出它们的乘积和除法结果\",{\"1\":{\"69\":1}}],[\"计算并打印出它们的和以及\",{\"1\":{\"68\":1}}],[\"计算商并去除其小数部分\",{\"1\":{\"60\":1}}],[\"计算余数\",{\"1\":{\"60\":1}}],[\"乘法运算符\",{\"1\":{\"60\":1}}],[\"例子\",{\"1\":{\"60\":1,\"62\":1,\"63\":1,\"113\":1,\"133\":1}}],[\"例如\",{\"1\":{\"20\":1,\"143\":1,\"163\":1}}],[\"描述\",{\"1\":{\"60\":1,\"62\":1,\"63\":1,\"130\":1,\"201\":1}}],[\"运行到5也是true\",{\"1\":{\"201\":1}}],[\"运行之后顺序可能和输入的顺序不一样\",{\"1\":{\"53\":1}}],[\"运算符实现\",{\"1\":{\"191\":1,\"192\":1,\"193\":1}}],[\"运算符\",{\"1\":{\"60\":1,\"62\":1,\"63\":1}}],[\"算术运算符\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"规律\",{\"1\":{\"59\":1}}],[\"除了使用replace\",{\"1\":{\"112\":1}}],[\"除非强制转换类型为字符串\",{\"1\":{\"107\":1}}],[\"除法最后是小数\",{\"1\":{\"63\":1}}],[\"除法取整运算符\",{\"1\":{\"60\":1}}],[\"除法运算符\",{\"1\":{\"60\":1}}],[\"除法涉及精度问题\",{\"1\":{\"59\":2}}],[\"除去文章title\",{\"1\":{\"1\":1}}],[\"最后一位就是0\",{\"1\":{\"83\":1}}],[\"最后的结果就是float\",{\"1\":{\"59\":1}}],[\"最后才是赋值\",{\"1\":{\"21\":1}}],[\"0和false是一样的\",{\"1\":{\"201\":1}}],[\"0b4\",{\"1\":{\"176\":1}}],[\"0x104f0d400>\",{\"1\":{\"163\":1}}],[\"0x10454a200>\",{\"1\":{\"163\":1}}],[\"000\",{\"1\":{\"108\":1,\"109\":1,\"110\":3}}],[\"0th\",{\"1\":{\"108\":1}}],[\"01234567o\",{\"1\":{\"94\":1}}],[\"01234567\",{\"1\":{\"94\":1}}],[\"0123456789\",{\"1\":{\"81\":2,\"82\":1}}],[\"0开始往\",{\"1\":{\"83\":1}}],[\"02468\",{\"1\":{\"81\":1,\"82\":1}}],[\"0\",{\"1\":{\"59\":7,\"60\":1,\"63\":3,\"65\":5,\"66\":2,\"69\":1,\"79\":1,\"81\":1,\"83\":2,\"108\":5,\"112\":2,\"114\":1,\"121\":1,\"128\":1,\"129\":2,\"130\":1,\"131\":3,\"134\":1,\"136\":5,\"142\":1,\"147\":1,\"156\":2,\"157\":1,\"161\":3,\"162\":1,\"170\":2,\"176\":1,\"201\":6}}],[\"出现重复的不会报错\",{\"1\":{\"53\":1}}],[\"互异性\",{\"1\":{\"53\":1}}],[\"具有不确定性\",{\"1\":{\"53\":1}}],[\"举个例子\",{\"1\":{\"53\":1,\"170\":1}}],[\"举个例子🌰\",{\"0\":{\"20\":1}}],[\"需要两个都true\",{\"1\":{\"201\":1}}],[\"需要提供一个键\",{\"1\":{\"174\":1}}],[\"需要再换回tuple\",{\"1\":{\"162\":1}}],[\"需要指定列表中需要删除的单个元素或多个元素\",{\"1\":{\"141\":1}}],[\"需要在\",{\"1\":{\"113\":1}}],[\"需要换一个人名或者地区\",{\"1\":{\"107\":1}}],[\"需要不可变的数据类型\",{\"1\":{\"53\":1}}],[\"需要返回的是一个地点的经纬度\",{\"1\":{\"47\":1}}],[\"确定性\",{\"1\":{\"53\":1}}],[\"点\",{\"1\":{\"53\":1}}],[\"注意是\",{\"1\":{\"126\":1}}],[\"注意\",{\"1\":{\"53\":2,\"83\":1,\"130\":1}}],[\"注意⚠️\",{\"1\":{\"40\":1}}],[\"集合的对称差集\",{\"0\":{\"194\":1}}],[\"集合的差集\",{\"0\":{\"193\":1}}],[\"集合的并集\",{\"0\":{\"192\":1}}],[\"集合的交集\",{\"0\":{\"191\":1}}],[\"集合的每一个值都是确定的\",{\"1\":{\"53\":1}}],[\"集合的特性\",{\"0\":{\"53\":1}}],[\"集合顺序没有改变\",{\"1\":{\"53\":1}}],[\"集合是没有顺序的\",{\"1\":{\"53\":1}}],[\"集合\",{\"0\":{\"51\":1},\"1\":{\"120\":1,\"136\":1}}],[\"删改\",{\"1\":{\"50\":1}}],[\"删除特定的键对值\",{\"1\":{\"182\":1}}],[\"删除列表中的元素\",{\"0\":{\"140\":1}}],[\"删除是无法指定下标的删除元素\",{\"1\":{\"53\":1}}],[\"删除数据\",{\"1\":{\"53\":1}}],[\"删除\",{\"1\":{\"40\":1,\"43\":1,\"46\":1,\"47\":1,\"155\":1}}],[\"所有的空序列\",{\"1\":{\"200\":1}}],[\"所有的非空值就是\",{\"1\":{\"200\":1}}],[\"所存在的问题\",{\"1\":{\"107\":1}}],[\"所拥有的所有数据类型\",{\"1\":{\"50\":1}}],[\"所以先把元组转换成列表\",{\"1\":{\"161\":1}}],[\"所以必须要在逆序的时候改成\",{\"1\":{\"131\":1}}],[\"所以应该是从\",{\"1\":{\"83\":1}}],[\"所以会需要接受不同类型的引号\",{\"1\":{\"76\":1}}],[\"所以最后的结果类型\",{\"1\":{\"59\":1}}],[\"所以最后得到浮点数\",{\"1\":{\"59\":1}}],[\"所以他们可以说\",{\"1\":{\"21\":1}}],[\"所以\",{\"1\":{\"20\":1,\"121\":2,\"158\":1,\"170\":2}}],[\"布尔值\",{\"0\":{\"200\":1},\"1\":{\"65\":2}}],[\"布尔型\",{\"0\":{\"54\":1},\"1\":{\"53\":1,\"120\":1,\"136\":1}}],[\"布尔\",{\"1\":{\"50\":1}}],[\"组成\",{\"1\":{\"50\":1}}],[\"values\",{\"0\":{\"184\":1},\"1\":{\"184\":5,\"185\":3,\"186\":1}}],[\"value之间只能用\",{\"1\":{\"170\":1}}],[\"valueerror\",{\"1\":{\"93\":1}}],[\"value2\",{\"1\":{\"50\":1}}],[\"value1\",{\"1\":{\"50\":1}}],[\"value\",{\"0\":{\"145\":1,\"169\":1},\"1\":{\"50\":3,\"133\":1,\"168\":3,\"169\":2,\"170\":3,\"174\":3,\"201\":2}}],[\"variable\",{\"1\":{\"109\":1,\"176\":1}}],[\"var\",{\"1\":{\"31\":7}}],[\"有则改之\",{\"1\":{\"175\":1}}],[\"有空间\",{\"1\":{\"170\":1}}],[\"有什么优缺点\",{\"1\":{\"170\":1}}],[\"有意加上单引号或者双引号\",{\"1\":{\"121\":1}}],[\"有点小问题\",{\"1\":{\"117\":1}}],[\"有些前期基本用不到\",{\"1\":{\"50\":1}}],[\"有序性\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"有序标题和无序标题\",{\"0\":{\"5\":1}}],[\"字母元素\",{\"1\":{\"96\":1}}],[\"字典常见方法\",{\"0\":{\"181\":1}}],[\"字典列表\",{\"0\":{\"178\":1},\"1\":{\"177\":1}}],[\"字典数据删除\",{\"0\":{\"176\":1}}],[\"字典修改或添加数据原则\",{\"1\":{\"175\":1}}],[\"字典内每一项都有两个元素组成\",{\"1\":{\"168\":1}}],[\"字典结构嵌套字典\",{\"0\":{\"177\":1}}],[\"字典结构\",{\"0\":{\"168\":1,\"169\":1}}],[\"字典存在意义\",{\"1\":{\"167\":1}}],[\"字典的组成\",{\"1\":{\"50\":1}}],[\"字典的特性\",{\"0\":{\"50\":1}}],[\"字典\",{\"0\":{\"48\":1},\"1\":{\"120\":1,\"136\":1}}],[\"字符\",{\"1\":{\"103\":1}}],[\"字符放到字符串中\",{\"1\":{\"40\":1}}],[\"字符串强制转换成列表\",{\"1\":{\"126\":1}}],[\"字符串转义\",{\"0\":{\"113\":1}}],[\"字符串是不可变的\",{\"1\":{\"112\":1}}],[\"字符串是由字母\",{\"1\":{\"75\":1}}],[\"字符串格式化\",{\"0\":{\"107\":1}}],[\"字符串中但凡出现非数字\",{\"1\":{\"96\":1}}],[\"字符串中但凡有一个字符不是字母\",{\"1\":{\"95\":1}}],[\"字符串中但凡有一个字符不是数字\",{\"1\":{\"94\":1}}],[\"字符串中的字符获取\",{\"0\":{\"78\":1}}],[\"字符串开头第一个字母大写\",{\"1\":{\"87\":1}}],[\"字符串倒序\",{\"0\":{\"83\":1}}],[\"字符串长度\",{\"0\":{\"77\":1}}],[\"字符串的连接\",{\"0\":{\"114\":1}}],[\"字符串的不可变性\",{\"0\":{\"112\":1}}],[\"字符串的内置方法\",{\"0\":{\"84\":1}}],[\"字符串的第三个位置\",{\"1\":{\"83\":1}}],[\"字符串的定义\",{\"0\":{\"75\":1}}],[\"字符串的三大特性\",{\"0\":{\"40\":1}}],[\"字符串被创建出来之后就不能改变\",{\"1\":{\"40\":1}}],[\"字符串\",{\"0\":{\"38\":1,\"74\":1},\"1\":{\"50\":1,\"53\":1,\"65\":2,\"110\":1,\"120\":1,\"136\":1,\"167\":1}}],[\"合适就好\",{\"1\":{\"47\":1}}],[\"经纬度会改变吗\",{\"1\":{\"47\":1}}],[\"肯定是刚刚好可以存放一个\",{\"1\":{\"47\":1}}],[\"就像我们查询电话簿的时候\",{\"1\":{\"173\":1}}],[\"就像在银行当中\",{\"1\":{\"111\":1}}],[\"就不能再用\",{\"1\":{\"163\":1}}],[\"就应运而生了\",{\"1\":{\"107\":1}}],[\"就需要重新创建一个全新的字符串\",{\"1\":{\"107\":1}}],[\"就是浮点数\",{\"1\":{\"59\":1}}],[\"就是这个空间\",{\"1\":{\"21\":1}}],[\"就类似于\",{\"1\":{\"47\":1,\"121\":1}}],[\"就得重新创建一个新的元组\",{\"1\":{\"47\":1}}],[\"内存\",{\"1\":{\"47\":1}}],[\"来得到\",{\"1\":{\"178\":1}}],[\"来配对这些列表的元素\",{\"1\":{\"163\":1}}],[\"来获取\",{\"1\":{\"147\":1}}],[\"来跟踪并且知道\",{\"1\":{\"47\":1}}],[\"来存储数据\",{\"1\":{\"20\":1}}],[\"来存放数据并且说这是信封\",{\"1\":{\"20\":1}}],[\"用并集减去交集\",{\"1\":{\"195\":1}}],[\"用运算符^实现\",{\"1\":{\"194\":1}}],[\"用中括号访问\",{\"0\":{\"172\":1}}],[\"用字典dict函数创建字典\",{\"0\":{\"170\":1}}],[\"用于反转运算对象的状态\",{\"1\":{\"201\":1}}],[\"用于检测两个以上的条件是否满足\",{\"1\":{\"201\":1}}],[\"用于将多个可迭代对象\",{\"1\":{\"163\":1}}],[\"用于在列表的指定位置插入一个元素\",{\"1\":{\"134\":1}}],[\"用于算术计算\",{\"1\":{\"60\":1}}],[\"用户输入格式\",{\"1\":{\"122\":1}}],[\"用户如何实现\",{\"1\":{\"119\":1}}],[\"用户日志📔\",{\"1\":{\"47\":1}}],[\"用\",{\"1\":{\"110\":1,\"147\":1,\"168\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"用列表有点浪费资源了\",{\"1\":{\"47\":1}}],[\"用列表可以吗\",{\"1\":{\"47\":1}}],[\"用减号代替空格\",{\"1\":{\"1\":1}}],[\"领导没油水了～hhhhh\",{\"1\":{\"47\":1}}],[\"只要是不可变的数据类型都可以放在\",{\"1\":{\"170\":1}}],[\"只要有间隔都会大写\",{\"1\":{\"88\":1}}],[\"只会是字符串\",{\"1\":{\"170\":1}}],[\"只会去除连续的减号知道遇见其他字符\",{\"1\":{\"100\":1}}],[\"只会记着最后一个值\",{\"1\":{\"20\":1}}],[\"只能使用一个\",{\"1\":{\"122\":1}}],[\"只能重新再创建一个仓库\",{\"1\":{\"47\":1}}],[\"只能存放一个原子弹\",{\"1\":{\"47\":1}}],[\"并集\",{\"1\":{\"192\":1}}],[\"并且想要根据它们的相应元素创建一个新的迭代器\",{\"1\":{\"163\":1}}],[\"并且你可以直接把你的物品\",{\"1\":{\"47\":1}}],[\"并没有创建\",{\"1\":{\"121\":1}}],[\"并输出\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2}}],[\"仓库创建之后\",{\"1\":{\"47\":1}}],[\"仓库管理员为什么知道仓库是否有位置\",{\"1\":{\"47\":1}}],[\"仓库管理员会告诉你\",{\"1\":{\"47\":1}}],[\"仓库很大\",{\"1\":{\"47\":1}}],[\"这是\",{\"1\":{\"174\":1}}],[\"这是你想要插入列表的元素\",{\"1\":{\"134\":1}}],[\"这个变量\",{\"1\":{\"121\":1}}],[\"这个地方\",{\"1\":{\"121\":1}}],[\"这个时候有可能会想到使用字符串的加法\",{\"1\":{\"107\":1}}],[\"这个时候作为课代表的你需要怎么办\",{\"1\":{\"20\":1}}],[\"这样我们就可以直接问仓库管理员\",{\"1\":{\"47\":1}}],[\"现有的物品也很多\",{\"1\":{\"47\":1}}],[\"现在是一个包含元组的迭代器\",{\"1\":{\"163\":1}}],[\"现在有一个原子弹的仓库\",{\"1\":{\"47\":1}}],[\"现在有一个仓库\",{\"1\":{\"47\":1}}],[\"现在改变\",{\"1\":{\"31\":2}}],[\"假设有两个列表\",{\"1\":{\"163\":1}}],[\"假设我们现在需要存储如下文本\",{\"1\":{\"76\":1}}],[\"假设输入的数字\",{\"1\":{\"61\":3}}],[\"假设你有一个两位的整数\",{\"1\":{\"61\":1}}],[\"假设2\",{\"1\":{\"47\":1}}],[\"假设1\",{\"1\":{\"47\":1}}],[\"假设\",{\"1\":{\"47\":1}}],[\"假如你有两个小孩\",{\"1\":{\"31\":1}}],[\"假如\",{\"1\":{\"20\":1}}],[\"软件\",{\"1\":{\"47\":1}}],[\"上面的提取方法存在的问题\",{\"0\":{\"173\":1}}],[\"上面的代码中如果用了列表\",{\"1\":{\"163\":1}}],[\"上面的代码看似解决了我们所遇到的问题\",{\"1\":{\"121\":1}}],[\"上面第二行代码\",{\"1\":{\"170\":1}}],[\"上面方法一的方法\",{\"1\":{\"170\":1}}],[\"上面两种创建字典的方法\",{\"1\":{\"170\":1}}],[\"上面tup有两个元素\",{\"1\":{\"46\":1}}],[\"上面lst有两个元素\",{\"1\":{\"43\":1}}],[\"仅包含基础数据类型\",{\"1\":{\"43\":1}}],[\"改变\",{\"1\":{\"43\":1,\"46\":1}}],[\"可选\",{\"1\":{\"174\":1}}],[\"可能还没有入场\",{\"1\":{\"76\":1}}],[\"可以用\",{\"1\":{\"170\":1}}],[\"可以更好的适配字典的各种数据类型情况\",{\"1\":{\"170\":1}}],[\"可以使用循环来遍历这个迭代器\",{\"1\":{\"163\":1}}],[\"可以使用\",{\"1\":{\"163\":1}}],[\"可以使用的对象\",{\"1\":{\"136\":1}}],[\"可以直接去掉\",{\"1\":{\"158\":1}}],[\"可以修改列表里的内容\",{\"1\":{\"126\":1}}],[\"可以去掉指定字符\",{\"1\":{\"100\":1}}],[\"可以对集合添加\",{\"1\":{\"53\":1}}],[\"可以添加\",{\"1\":{\"50\":1}}],[\"可以\",{\"1\":{\"47\":1}}],[\"可以同时使用\",{\"0\":{\"26\":1}}],[\"可变意味着\",{\"1\":{\"47\":1}}],[\"可变性\",{\"1\":{\"43\":1,\"50\":1,\"53\":1,\"126\":1}}],[\"列表中的元素可以被修改\",{\"1\":{\"155\":1}}],[\"列表中\",{\"1\":{\"155\":1}}],[\"列表和元组的区别\",{\"1\":{\"155\":1}}],[\"列表和元组的对比\",{\"0\":{\"155\":1}}],[\"列表和元组到底用哪一个呢\",{\"1\":{\"47\":1}}],[\"列表排序\",{\"0\":{\"148\":1}}],[\"列表长度\",{\"0\":{\"135\":1}}],[\"列表下标的组成\",{\"0\":{\"128\":1}}],[\"列表的切片赋值\",{\"0\":{\"132\":1}}],[\"列表的\",{\"1\":{\"126\":1}}],[\"列表的三大特性\",{\"0\":{\"43\":1}}],[\"列表内的元素用\",{\"1\":{\"126\":1}}],[\"列表结构\",{\"0\":{\"126\":1}}],[\"列表可变\",{\"1\":{\"53\":1}}],[\"列表可以\",{\"1\":{\"43\":1}}],[\"列表更合适\",{\"1\":{\"47\":1}}],[\"列表里面每个元素算一个\",{\"1\":{\"43\":1}}],[\"列表\",{\"0\":{\"41\":1},\"1\":{\"120\":1,\"136\":1,\"147\":1,\"167\":1}}],[\"子字符\",{\"1\":{\"40\":1}}],[\"也就类似于数学表达式中括号可以直接省去\",{\"1\":{\"158\":1}}],[\"也就是\",{\"1\":{\"53\":1}}],[\"也就是没有下标\",{\"1\":{\"53\":1}}],[\"也就是里面的每一个元素都可以被称为\",{\"1\":{\"40\":1}}],[\"也可以转换成元组\",{\"1\":{\"163\":2}}],[\"也可以传参数指定要删除元素的下标\",{\"1\":{\"142\":1}}],[\"也可以传入参数\",{\"1\":{\"105\":1}}],[\"也可以是档案袋\",{\"1\":{\"20\":1}}],[\"也要去思考选择项以外的答案\",{\"1\":{\"76\":1}}],[\"都可以\",{\"1\":{\"113\":1}}],[\"都可以是字符串的元素\",{\"1\":{\"40\":1}}],[\"都像模版\",{\"1\":{\"111\":1}}],[\"都是你还没有真正理解的东西\",{\"1\":{\"76\":1}}],[\"都将成为字符串的类型\",{\"1\":{\"40\":1}}],[\"任务要求\",{\"1\":{\"121\":1}}],[\"任务列表\",{\"0\":{\"5\":1}}],[\"任意数据类型\",{\"1\":{\"43\":1,\"46\":1,\"50\":1}}],[\"任意字符\",{\"1\":{\"40\":1}}],[\"添加集合元素\",{\"0\":{\"196\":1}}],[\"添加多个元素\",{\"0\":{\"139\":1}}],[\"添加单个元素\",{\"0\":{\"138\":1}}],[\"添加进去\",{\"1\":{\"47\":1}}],[\"添加\",{\"1\":{\"40\":1,\"43\":1,\"46\":1,\"47\":1,\"155\":1}}],[\"引号里面出现的都算一个下标\",{\"1\":{\"40\":1}}],[\"下面是一个使用\",{\"1\":{\"174\":1}}],[\"下的逗号\",{\"1\":{\"126\":1}}],[\"下标分别是\",{\"1\":{\"43\":1,\"46\":1}}],[\"下标从\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"下标从0开始\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"下划线\",{\"0\":{\"8\":1}}],[\"浮点数\",{\"1\":{\"37\":1,\"65\":2,\"110\":1}}],[\">=18\",{\"1\":{\"203\":4}}],[\">=\",{\"1\":{\"62\":3,\"65\":1,\"203\":4}}],[\">\",{\"1\":{\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"55\":1,\"62\":3,\"71\":2,\"121\":1,\"154\":1,\"158\":2,\"194\":1,\"200\":1}}],[\">>>9\",{\"1\":{\"121\":2}}],[\">>>2\",{\"1\":{\"121\":1}}],[\">>>num\",{\"1\":{\"121\":1}}],[\">>>string\",{\"1\":{\"121\":3}}],[\">>>true\",{\"1\":{\"120\":1,\"121\":1}}],[\">>>1+1\",{\"1\":{\"121\":1}}],[\">>>12\",{\"1\":{\"120\":1,\"121\":1}}],[\">>>1\",{\"1\":{\"119\":1}}],[\">>>\",{\"1\":{\"37\":8,\"39\":4,\"42\":4,\"45\":4,\"49\":4,\"52\":4,\"117\":2,\"119\":5,\"120\":4,\"121\":24}}],[\"待补充代码\",{\"1\":{\"31\":1}}],[\"警告\",{\"1\":{\"31\":1}}],[\"joined\",{\"1\":{\"106\":2}}],[\"join\",{\"0\":{\"106\":1},\"1\":{\"106\":2}}],[\"juice\",{\"1\":{\"31\":5}}],[\"jaden\",{\"1\":{\"31\":10}}],[\"does\",{\"1\":{\"112\":1,\"156\":1}}],[\"don\",{\"1\":{\"31\":1}}],[\"div\",{\"1\":{\"70\":2}}],[\"division\",{\"1\":{\"69\":4}}],[\"difference\",{\"1\":{\"68\":4,\"193\":1,\"194\":1}}],[\"dictionary\",{\"0\":{\"166\":1},\"1\":{\"174\":1}}],[\"dict\",{\"0\":{\"48\":1},\"1\":{\"49\":2,\"121\":1,\"170\":7,\"183\":1,\"184\":1,\"185\":1}}],[\"d\",{\"1\":{\"49\":3,\"50\":1,\"65\":13,\"110\":6,\"170\":5}}],[\"data\",{\"1\":{\"37\":2,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1,\"176\":1}}],[\"drink\",{\"1\":{\"31\":2}}],[\"destroy\",{\"1\":{\"31\":1}}],[\"design\",{\"2\":{\"12\":1}}],[\"deleted\",{\"1\":{\"176\":1}}],[\"delete\",{\"1\":{\"31\":1}}],[\"del\",{\"0\":{\"141\":1},\"1\":{\"30\":1,\"31\":1,\"141\":3,\"176\":2}}],[\"default\",{\"1\":{\"174\":2}}],[\"defined\",{\"1\":{\"121\":2,\"141\":1,\"176\":1}}],[\"def\",{\"1\":{\"30\":1,\"31\":1}}],[\"demo1\",{\"1\":{\"107\":1}}],[\"demo\",{\"1\":{\"1\":1}}],[\"n换行\",{\"1\":{\"113\":1}}],[\"n的话会导致字符串换行\",{\"1\":{\"113\":1}}],[\"nthis\",{\"1\":{\"113\":2}}],[\"nforthis\",{\"1\":{\"113\":3}}],[\"new\",{\"1\":{\"103\":2,\"108\":8,\"110\":6,\"112\":2,\"159\":2,\"161\":2}}],[\"next\",{\"1\":{\"81\":1}}],[\"n\",{\"1\":{\"70\":8,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"113\":2,\"120\":2,\"126\":1,\"132\":2,\"136\":1,\"195\":2}}],[\"nameerror\",{\"1\":{\"121\":3,\"141\":1,\"176\":1}}],[\"name=\",{\"1\":{\"108\":4}}],[\"name\",{\"1\":{\"49\":2,\"76\":1,\"107\":2,\"108\":5,\"109\":2,\"117\":4,\"121\":2,\"132\":5,\"141\":1,\"167\":2,\"174\":1,\"176\":1,\"178\":3,\"180\":3,\"182\":2,\"183\":3,\"184\":1,\"185\":3,\"186\":6}}],[\"named\",{\"1\":{\"31\":2}}],[\"num2\",{\"1\":{\"122\":1}}],[\"num1\",{\"1\":{\"122\":1}}],[\"numbers2\",{\"1\":{\"144\":2}}],[\"numbers1\",{\"1\":{\"144\":2}}],[\"numbers\",{\"1\":{\"130\":2,\"131\":2,\"132\":6,\"133\":1,\"134\":3,\"135\":2,\"136\":17,\"138\":8,\"139\":4,\"141\":10,\"142\":8,\"143\":4,\"145\":3,\"146\":2,\"147\":2,\"149\":5,\"168\":2,\"169\":5}}],[\"number\",{\"1\":{\"76\":1,\"81\":1,\"163\":4,\"167\":2}}],[\"num\",{\"1\":{\"37\":10,\"61\":5,\"121\":1,\"163\":2}}],[\"no\",{\"1\":{\"83\":1}}],[\"not\",{\"1\":{\"30\":1,\"80\":1,\"93\":1,\"107\":1,\"112\":1,\"121\":2,\"141\":1,\"143\":1,\"156\":1,\"174\":3,\"176\":2,\"201\":3}}],[\"nonlocal\",{\"1\":{\"30\":1}}],[\"none\",{\"1\":{\"30\":1,\"31\":1,\"174\":3}}],[\"问题\",{\"1\":{\"107\":1}}],[\"问题来了\",{\"1\":{\"47\":1}}],[\"问\",{\"1\":{\"31\":1}}],[\"弟弟的杯子装了果汁\",{\"1\":{\"31\":1}}],[\"弟弟叫\",{\"1\":{\"31\":1}}],[\"你想要检索的键\",{\"1\":{\"174\":1}}],[\"你可以发现\",{\"1\":{\"158\":1}}],[\"你能说掷骰子是确定性事件吗\",{\"1\":{\"53\":1}}],[\"你掷骰子\",{\"1\":{\"53\":1}}],[\"你创建原子弹的仓库\",{\"1\":{\"47\":1}}],[\"你每当需要添加数据的时候\",{\"1\":{\"47\":1}}],[\"你不知道还有没有位置可以存放\",{\"1\":{\"47\":1}}],[\"你不小心把哥哥的杯子装了可乐\",{\"1\":{\"31\":1}}],[\"你要向仓库添加物品\",{\"1\":{\"47\":1}}],[\"你是班级当中的课代表\",{\"1\":{\"20\":1}}],[\"家中仅剩一杯果汁\",{\"1\":{\"31\":1}}],[\"哥哥和弟弟都有专属的杯子\",{\"1\":{\"31\":1}}],[\"哥哥叫\",{\"1\":{\"31\":1}}],[\"想喝可乐\",{\"1\":{\"31\":1}}],[\"想喝果汁\",{\"1\":{\"31\":1}}],[\"如列表\",{\"1\":{\"163\":1}}],[\"如传入参数\",{\"1\":{\"104\":1}}],[\"如原数字为\",{\"1\":{\"61\":1}}],[\"如果是确定的优先使用中括号提取\",{\"1\":{\"178\":1}}],[\"如果是查找单词\",{\"1\":{\"92\":1,\"93\":1}}],[\"如果单独设定在\",{\"1\":{\"174\":1}}],[\"如果key不存在则会返回默认值none\",{\"1\":{\"174\":1}}],[\"如果key用列表则会报错\",{\"1\":{\"169\":1}}],[\"如果未提供此参数\",{\"1\":{\"174\":1}}],[\"如果键不存在时返回的值\",{\"1\":{\"174\":1}}],[\"如果键不存在\",{\"1\":{\"174\":1}}],[\"如果该键在字典中不存在\",{\"1\":{\"174\":1}}],[\"如果你有两个或更多的列表\",{\"1\":{\"163\":1}}],[\"如果你运行集合很多次\",{\"1\":{\"53\":1}}],[\"如果元组只有一个元素\",{\"1\":{\"158\":3}}],[\"如果元素不在列表中则会报错\",{\"1\":{\"147\":1}}],[\"如果设置为\",{\"1\":{\"150\":1}}],[\"如果里面指定\",{\"1\":{\"149\":1}}],[\"如果有重复也只是去除其中一个\",{\"1\":{\"143\":1}}],[\"如果不指定删除的元素\",{\"1\":{\"141\":1}}],[\"如果指定的索引超出了列表的当前长度\",{\"1\":{\"134\":1}}],[\"如果指定参数\",{\"1\":{\"100\":1,\"101\":1,\"102\":1}}],[\"如果改变字符串中的元素\",{\"1\":{\"112\":1}}],[\"如果更复杂的字符串就不合适了\",{\"1\":{\"107\":1}}],[\"如果只去除前后减号\",{\"1\":{\"100\":1}}],[\"如果直接使用正数序号调换位置\",{\"1\":{\"83\":1}}],[\"如果使用正方向序号\",{\"1\":{\"83\":1}}],[\"如果我们改成\",{\"1\":{\"83\":1}}],[\"如果我们要提取的字符是从开头到结尾\",{\"1\":{\"82\":1}}],[\"如果\",{\"1\":{\"66\":3,\"92\":1,\"93\":1}}],[\"如果其中有一个浮点数\",{\"1\":{\"59\":1}}],[\"如果输入中有一个数是float\",{\"1\":{\"59\":1}}],[\"如果存储的数据和数量不变\",{\"1\":{\"47\":1}}],[\"如果存储的数据或数量是可变的\",{\"1\":{\"47\":1}}],[\"如何实现\",{\"1\":{\"195\":1}}],[\"如何用已有的知识去完成未知的新任务\",{\"1\":{\"167\":1}}],[\"如何用以往学过的知识构建一个具有用户输入查询功能的电话簿\",{\"1\":{\"167\":1}}],[\"如何创建一个电话簿\",{\"0\":{\"167\":1}}],[\"如何创建变量\",{\"0\":{\"21\":1}}],[\"如何解决呢\",{\"1\":{\"158\":1}}],[\"如何解决这个问题呢\",{\"1\":{\"119\":1}}],[\"如何解决\",{\"1\":{\"117\":1}}],[\"如何交换哥哥与弟弟杯中的果汁\",{\"1\":{\"31\":1}}],[\"如整数或字符串\",{\"1\":{\"31\":1}}],[\"ydn\",{\"1\":{\"112\":1}}],[\"yewente\",{\"1\":{\"107\":1}}],[\"yc\",{\"1\":{\"90\":1}}],[\"your\",{\"1\":{\"117\":2,\"167\":2}}],[\"younger\",{\"1\":{\"31\":2}}],[\"you\",{\"1\":{\"31\":3,\"170\":1}}],[\"y\",{\"1\":{\"31\":4,\"69\":6,\"132\":2,\"154\":2,\"156\":1}}],[\"yield\",{\"1\":{\"30\":1}}],[\"之后右序\",{\"1\":{\"50\":1}}],[\"之后\",{\"1\":{\"31\":2,\"66\":1}}],[\"❌true\",{\"1\":{\"66\":1}}],[\"❌\",{\"1\":{\"31\":3,\"65\":1}}],[\"✅❌\",{\"1\":{\"65\":1}}],[\"✅\",{\"1\":{\"31\":3,\"65\":12}}],[\"一般用于测试条件中\",{\"1\":{\"200\":1}}],[\"一共有两个值一个值是\",{\"1\":{\"170\":1}}],[\"一共有2\",{\"1\":{\"1\":1}}],[\"一种是你在获取用户输入之前直接提前创建一个叫做\",{\"1\":{\"121\":1}}],[\"一个是要插入这个位置的值\",{\"1\":{\"133\":1}}],[\"一个是要插入的位置\",{\"1\":{\"133\":1}}],[\"一个花括号以上\",{\"1\":{\"108\":1}}],[\"一个整数\",{\"1\":{\"61\":1}}],[\"一个变量可以同时被赋予多个值\",{\"1\":{\"31\":1}}],[\"一杯可乐\",{\"1\":{\"31\":1}}],[\"一旦赋值就不能改变\",{\"1\":{\"31\":1}}],[\"表示他们是同一个代码块\",{\"1\":{\"206\":1}}],[\"表示判断中的是与否\",{\"1\":{\"200\":1}}],[\"表示字典\",{\"1\":{\"168\":1}}],[\"表示列表\",{\"1\":{\"126\":1}}],[\"表示没有值或空值\",{\"1\":{\"31\":1}}],[\"表达式应用\",{\"0\":{\"202\":1}}],[\"表达式\",{\"1\":{\"21\":2}}],[\"错\",{\"1\":{\"31\":11}}],[\"xinwechat\",{\"1\":{\"176\":2}}],[\"xiamen\",{\"1\":{\"107\":4,\"108\":16,\"109\":2}}],[\"xxx\",{\"1\":{\"136\":2}}],[\"xf\",{\"1\":{\"108\":1,\"109\":1,\"110\":1}}],[\"x\",{\"1\":{\"31\":26,\"42\":2,\"45\":2,\"69\":6,\"154\":2,\"156\":1}}],[\"对称差集可以用其他三种集合操作来实现吗\",{\"1\":{\"195\":1}}],[\"对称差集\",{\"1\":{\"194\":1}}],[\"对以下元组进行排序\",{\"1\":{\"161\":1}}],[\"对应的\",{\"1\":{\"50\":1}}],[\"对\",{\"1\":{\"31\":11,\"70\":1}}],[\"对齐\",{\"0\":{\"9\":1}}],[\"中括号和\",{\"1\":{\"178\":1}}],[\"中括号内用\",{\"1\":{\"130\":1}}],[\"中括号内数字指定元素位置\",{\"1\":{\"129\":1}}],[\"中括号\",{\"1\":{\"126\":1}}],[\"中不同的数据类型不能直接相加\",{\"1\":{\"107\":1}}],[\"中\",{\"1\":{\"31\":2,\"65\":5,\"66\":3}}],[\"中的结果是什么\",{\"1\":{\"65\":1}}],[\"中的关键字\",{\"1\":{\"31\":1}}],[\"中的变量名区分大小写\",{\"1\":{\"30\":1}}],[\"中的人大代表\",{\"1\":{\"21\":1}}],[\"在字典中存储字典\",{\"0\":{\"180\":1},\"1\":{\"177\":1}}],[\"在字典中存储列表\",{\"0\":{\"179\":1},\"1\":{\"177\":1}}],[\"在第二个调用中\",{\"1\":{\"174\":1}}],[\"在第一个\",{\"1\":{\"174\":1}}],[\"在提取不存在的key时会报错\",{\"1\":{\"173\":1}}],[\"在元组中\",{\"1\":{\"155\":1}}],[\"在列表的特定位置插入元素\",{\"0\":{\"134\":1}}],[\"在使用input时会给原本输入的内容加上引号变成str\",{\"1\":{\"121\":1}}],[\"在运行的时候并不能很直观的知道\",{\"1\":{\"117\":1}}],[\"在程序运行的过程当中\",{\"1\":{\"43\":1,\"46\":1}}],[\"在python中\",{\"1\":{\"31\":7}}],[\"在\",{\"1\":{\"31\":2,\"65\":6,\"66\":3,\"107\":1}}],[\"练习\",{\"0\":{\"31\":1,\"64\":1}}],[\"would\",{\"1\":{\"176\":1}}],[\"world\",{\"1\":{\"31\":1}}],[\"welcome\",{\"1\":{\"107\":4,\"108\":24,\"109\":2}}],[\"web\",{\"2\":{\"12\":1,\"13\":1,\"16\":1,\"33\":1,\"57\":1,\"73\":1,\"124\":1,\"152\":1,\"165\":1,\"188\":1,\"198\":1,\"205\":1,\"208\":1}}],[\"wrong\",{\"1\":{\"76\":1}}],[\"why\",{\"1\":{\"47\":1,\"53\":1,\"170\":1}}],[\"while\",{\"1\":{\"30\":1}}],[\"wants\",{\"1\":{\"31\":2}}],[\"with\",{\"1\":{\"30\":1,\"31\":2}}],[\"rsplit\",{\"0\":{\"105\":1},\"1\":{\"105\":4}}],[\"rstrip\",{\"0\":{\"102\":1},\"1\":{\"102\":1}}],[\"rthis\",{\"1\":{\"104\":3,\"105\":4}}],[\"rnforthis\",{\"1\":{\"104\":1}}],[\"rnf\",{\"1\":{\"104\":3,\"105\":3}}],[\"right\",{\"1\":{\"102\":1}}],[\"r\",{\"1\":{\"92\":1,\"106\":2,\"113\":5,\"126\":2,\"136\":2}}],[\"reverse=true\",{\"1\":{\"149\":2}}],[\"reverse=false\",{\"0\":{\"149\":1,\"150\":1},\"1\":{\"150\":1}}],[\"reverse\",{\"1\":{\"131\":1,\"150\":1}}],[\"recent\",{\"1\":{\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"173\":1,\"176\":1}}],[\"region\",{\"1\":{\"107\":2}}],[\"replace\",{\"0\":{\"103\":1},\"1\":{\"103\":3}}],[\"remainder\",{\"1\":{\"70\":2}}],[\"remove\",{\"0\":{\"143\":1},\"1\":{\"31\":1,\"143\":3}}],[\"result\",{\"1\":{\"68\":1,\"83\":1,\"107\":2}}],[\"return\",{\"1\":{\"30\":1,\"201\":1}}],[\"raise\",{\"1\":{\"30\":1}}],[\"iterable\",{\"1\":{\"136\":1}}],[\"items\",{\"0\":{\"185\":1},\"1\":{\"185\":2}}],[\"item\",{\"1\":{\"112\":1,\"156\":1}}],[\"i\",{\"1\":{\"76\":3,\"91\":1,\"104\":5,\"105\":5,\"106\":3,\"119\":6,\"126\":1,\"136\":1}}],[\"imac\",{\"1\":{\"107\":1,\"112\":1}}],[\"image\",{\"1\":{\"35\":1,\"43\":1,\"59\":1,\"75\":1,\"76\":1,\"83\":2,\"117\":2,\"128\":1,\"130\":1,\"131\":1,\"132\":3,\"136\":1,\"138\":1,\"145\":1,\"155\":1,\"173\":1,\"175\":1,\"176\":1,\"186\":1,\"190\":1,\"200\":1,\"203\":1}}],[\"import\",{\"1\":{\"30\":1,\"31\":1}}],[\"indentation\",{\"1\":{\"206\":1}}],[\"index\",{\"0\":{\"93\":1,\"134\":1,\"147\":1},\"1\":{\"93\":2,\"134\":3,\"147\":2}}],[\"insert\",{\"0\":{\"134\":1},\"1\":{\"134\":3}}],[\"input\",{\"0\":{\"116\":1,\"117\":1,\"118\":1,\"119\":1},\"1\":{\"108\":2,\"116\":5,\"117\":6,\"119\":5,\"120\":3,\"121\":20,\"122\":1}}],[\"including\",{\"1\":{\"80\":1}}],[\"intersection\",{\"1\":{\"191\":1}}],[\"int\",{\"0\":{\"36\":1},\"1\":{\"37\":7,\"49\":2,\"107\":1,\"120\":2,\"121\":2,\"158\":1,\"169\":4}}],[\"in\",{\"0\":{\"145\":1,\"186\":1},\"1\":{\"30\":1,\"31\":1,\"59\":9,\"107\":1,\"112\":1,\"119\":3,\"120\":9,\"121\":31,\"132\":12,\"136\":1,\"141\":1,\"145\":2,\"156\":1,\"163\":1,\"169\":1,\"173\":1,\"176\":1,\"186\":3,\"201\":2}}],[\"if\",{\"0\":{\"206\":1},\"1\":{\"30\":1,\"71\":2}}],[\"isspace\",{\"0\":{\"99\":1},\"1\":{\"99\":2}}],[\"islower\",{\"0\":{\"98\":1},\"1\":{\"98\":1}}],[\"isupper\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"isalnum\",{\"0\":{\"96\":1},\"1\":{\"96\":2}}],[\"isalpha\",{\"0\":{\"95\":1},\"1\":{\"95\":2}}],[\"isdigit\",{\"0\":{\"94\":1},\"1\":{\"94\":2}}],[\"is\",{\"1\":{\"30\":2,\"31\":3,\"37\":4,\"39\":2,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"71\":7,\"107\":4,\"108\":2,\"109\":2,\"110\":15,\"121\":2,\"141\":1,\"167\":2,\"176\":1}}],[\"favorite\",{\"1\":{\"179\":2}}],[\"false\",{\"1\":{\"30\":1,\"42\":2,\"45\":2,\"52\":2,\"53\":2,\"55\":1,\"62\":1,\"65\":3,\"66\":2,\"89\":1,\"90\":1,\"94\":1,\"95\":1,\"96\":2,\"97\":2,\"98\":1,\"99\":2,\"145\":1,\"150\":1,\"180\":2,\"186\":1,\"200\":2,\"201\":13,\"203\":1}}],[\"f控制输入类型\",{\"1\":{\"110\":1}}],[\"found\",{\"1\":{\"93\":1}}],[\"forthis\",{\"1\":{\"114\":2}}],[\"format\",{\"0\":{\"108\":1,\"111\":1},\"1\":{\"107\":1,\"108\":15,\"111\":1}}],[\"for\",{\"1\":{\"30\":1,\"31\":1,\"91\":2,\"92\":4,\"93\":1,\"113\":1,\"163\":1}}],[\"f\",{\"0\":{\"109\":1,\"111\":1},\"1\":{\"71\":3,\"106\":1,\"109\":2,\"110\":1,\"111\":1,\"113\":1,\"126\":1,\"136\":1,\"163\":1}}],[\"floor\",{\"1\":{\"70\":2}}],[\"float\",{\"0\":{\"36\":1},\"1\":{\"37\":7}}],[\"file\",{\"1\":{\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1,\"176\":2}}],[\"filled\",{\"1\":{\"31\":1}}],[\"find\",{\"0\":{\"92\":1},\"1\":{\"92\":4}}],[\"finally\",{\"1\":{\"30\":1}}],[\"from\",{\"1\":{\"30\":1}}],[\"meant\",{\"1\":{\"170\":1}}],[\"messagetemp\",{\"1\":{\"176\":1}}],[\"message\",{\"1\":{\"170\":2,\"176\":1}}],[\"mentoring\",{\"0\":{\"14\":1}}],[\"mr\",{\"1\":{\"167\":1}}],[\"most\",{\"1\":{\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"173\":1,\"176\":1}}],[\"money\",{\"1\":{\"107\":4,\"108\":2,\"109\":4,\"110\":15}}],[\"more\",{\"1\":{\"30\":1}}],[\"math\",{\"1\":{\"179\":3}}],[\"ma\",{\"1\":{\"173\":3,\"174\":3}}],[\"madongmei\",{\"1\":{\"168\":1,\"169\":4,\"175\":2}}],[\"maxsplit用于控制分割几次\",{\"1\":{\"104\":1}}],[\"maxsplit\",{\"1\":{\"104\":1,\"105\":2}}],[\"many\",{\"1\":{\"81\":1}}],[\"missing\",{\"1\":{\"83\":1}}],[\"m\",{\"1\":{\"70\":8,\"76\":3,\"106\":1}}],[\"myvar\",{\"1\":{\"31\":1}}],[\"myvar2\",{\"1\":{\"31\":1}}],[\"my\",{\"1\":{\"31\":3}}],[\"gaxa\",{\"1\":{\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1,\"176\":1}}],[\"grade\",{\"1\":{\"129\":4,\"131\":6,\"172\":2,\"173\":3,\"174\":4,\"175\":4,\"176\":10,\"178\":5,\"180\":3,\"182\":2,\"183\":3,\"184\":1,\"185\":3,\"186\":3}}],[\"greater\",{\"1\":{\"71\":2}}],[\"github\",{\"1\":{\"107\":1,\"112\":1}}],[\"global\",{\"1\":{\"30\":1,\"31\":2}}],[\"get\",{\"0\":{\"174\":1},\"1\":{\"30\":1,\"167\":1,\"174\":9,\"178\":3}}],[\"guide\",{\"0\":{\"1\":1}}],[\"tencent\",{\"1\":{\"176\":2}}],[\"template\",{\"1\":{\"108\":12}}],[\"tab\",{\"1\":{\"132\":3}}],[\"t制表\",{\"1\":{\"113\":1}}],[\"tthis\",{\"1\":{\"113\":5}}],[\"tfor\",{\"1\":{\"113\":5}}],[\"title\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"tips\",{\"1\":{\"60\":1}}],[\"think\",{\"1\":{\"132\":1}}],[\"this\",{\"1\":{\"113\":2}}],[\"than\",{\"1\":{\"71\":5}}],[\"there\",{\"1\":{\"31\":1}}],[\"their\",{\"1\":{\"31\":1}}],[\"the\",{\"1\":{\"30\":1,\"31\":6,\"79\":4,\"80\":3,\"81\":1,\"131\":1,\"143\":1,\"167\":2,\"176\":1}}],[\"tup2\",{\"1\":{\"159\":2,\"163\":2}}],[\"tup1\",{\"1\":{\"159\":2,\"162\":2,\"163\":2}}],[\"tup\",{\"1\":{\"45\":3,\"46\":1,\"49\":2,\"154\":3,\"156\":3,\"157\":6,\"158\":4,\"159\":2,\"161\":5,\"162\":2}}],[\"tuple\",{\"0\":{\"44\":1,\"153\":1},\"1\":{\"45\":2,\"121\":1,\"154\":1,\"156\":1,\"158\":1,\"161\":1,\"162\":1}}],[\"typeerror\",{\"1\":{\"107\":1,\"112\":1,\"136\":1,\"156\":1,\"169\":1}}],[\"type\",{\"1\":{\"37\":8,\"39\":3,\"42\":3,\"45\":3,\"49\":3,\"52\":3,\"55\":1,\"119\":3,\"120\":3,\"121\":8,\"136\":1,\"141\":1,\"154\":1,\"156\":1,\"158\":2,\"169\":2,\"170\":1,\"173\":1}}],[\"typora\",{\"0\":{\"1\":1},\"2\":{\"13\":1,\"16\":1,\"33\":1,\"57\":1,\"73\":1,\"124\":1,\"152\":1,\"165\":1,\"188\":1,\"198\":1,\"205\":1,\"208\":1}}],[\"t\",{\"1\":{\"31\":1,\"37\":6,\"39\":3,\"42\":3,\"45\":3,\"49\":3,\"52\":3,\"106\":1,\"113\":1,\"126\":1,\"132\":2,\"136\":1}}],[\"two\",{\"1\":{\"31\":1}}],[\"traceback\",{\"1\":{\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"173\":1,\"176\":1}}],[\"try\",{\"1\":{\"30\":1}}],[\"true\",{\"1\":{\"30\":1,\"42\":2,\"45\":2,\"55\":2,\"62\":5,\"65\":3,\"66\":1,\"89\":1,\"90\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":2,\"99\":2,\"120\":1,\"121\":1,\"136\":2,\"145\":1,\"150\":1,\"169\":4,\"180\":2,\"182\":1,\"183\":1,\"184\":3,\"185\":3,\"186\":5,\"200\":4,\"201\":14,\"203\":3}}],[\"to\",{\"1\":{\"30\":1,\"31\":3,\"71\":2,\"80\":1,\"81\":1,\"88\":2,\"89\":2,\"90\":2,\"91\":1,\"107\":5,\"108\":24,\"109\":2,\"126\":2,\"170\":2,\"176\":1}}],[\"object\",{\"1\":{\"112\":1,\"156\":1,\"163\":2}}],[\"o\",{\"1\":{\"104\":2,\"105\":2,\"106\":2,\"126\":2,\"132\":2,\"136\":2}}],[\"old\",{\"1\":{\"103\":2}}],[\"outpu\",{\"1\":{\"142\":1}}],[\"output时\",{\"1\":{\"170\":1}}],[\"output\",{\"1\":{\"23\":1,\"24\":1,\"26\":1,\"28\":1,\"29\":1,\"37\":2,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"53\":2,\"55\":1,\"61\":1,\"62\":1,\"63\":2,\"77\":1,\"80\":1,\"83\":3,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":2,\"100\":4,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":4,\"108\":5,\"109\":2,\"110\":3,\"112\":2,\"113\":5,\"114\":2,\"116\":1,\"117\":1,\"126\":1,\"134\":1,\"135\":1,\"136\":4,\"138\":2,\"139\":1,\"141\":2,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"149\":1,\"154\":1,\"156\":1,\"157\":4,\"158\":2,\"159\":1,\"161\":1,\"162\":1,\"163\":3,\"168\":1,\"169\":2,\"170\":2,\"173\":1,\"174\":1,\"175\":1,\"176\":3,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"200\":1,\"201\":1,\"203\":2}}],[\"out\",{\"1\":{\"59\":7,\"119\":3,\"120\":5,\"121\":16,\"132\":7,\"201\":2}}],[\"one\",{\"1\":{\"31\":2}}],[\"only\",{\"1\":{\"31\":1,\"107\":1,\"136\":1}}],[\"other\",{\"1\":{\"31\":1}}],[\"own\",{\"1\":{\"31\":1}}],[\"or只需要一个true\",{\"1\":{\"201\":1}}],[\"or\",{\"1\":{\"30\":1,\"201\":8,\"203\":2}}],[\"ofts\",{\"1\":{\"81\":1}}],[\"of\",{\"1\":{\"30\":1,\"31\":2}}],[\"的选择依据\",{\"1\":{\"178\":1}}],[\"的各种情况并不能完全支持\",{\"1\":{\"170\":1}}],[\"的类型是任意的\",{\"1\":{\"169\":1}}],[\"的相应元素配对并返回一个元组的迭代器\",{\"1\":{\"163\":1}}],[\"的变量\",{\"1\":{\"121\":1}}],[\"的功能\",{\"1\":{\"121\":1}}],[\"的妙用\",{\"1\":{\"121\":1}}],[\"的特点后\",{\"1\":{\"119\":1}}],[\"的特点\",{\"0\":{\"118\":1}}],[\"的优缺点\",{\"0\":{\"111\":1}}],[\"的\",{\"1\":{\"70\":1}}],[\"的结果\",{\"1\":{\"68\":1}}],[\"的结果是\",{\"1\":{\"66\":6}}],[\"的结果是什么\",{\"1\":{\"65\":4}}],[\"的结果是什么类型\",{\"1\":{\"65\":2}}],[\"的结果是多少\",{\"1\":{\"65\":4}}],[\"的结合\",{\"1\":{\"30\":1}}],[\"的内容也会改变\",{\"1\":{\"31\":1}}],[\"的内置函数名称做变量\",{\"1\":{\"30\":1}}],[\"的列表内容\",{\"1\":{\"31\":1}}],[\"的值是\",{\"1\":{\"66\":3}}],[\"的值也会改变\",{\"1\":{\"31\":1}}],[\"的值\",{\"1\":{\"31\":1}}],[\"不存在时所指定的返回内容\",{\"1\":{\"174\":1}}],[\"不就是上面所说的\",{\"1\":{\"158\":1}}],[\"不支持多个元素\",{\"1\":{\"138\":1}}],[\"不会报错\",{\"1\":{\"134\":1}}],[\"不包括结束位置的元素\",{\"1\":{\"130\":1}}],[\"不是我们想要的\",{\"1\":{\"121\":1}}],[\"不适合\",{\"1\":{\"120\":1}}],[\"不可以使用的对象\",{\"1\":{\"136\":1}}],[\"不可以改变其中的任何元素\",{\"1\":{\"112\":1}}],[\"不可变的数据类型才可以当做数据的\",{\"1\":{\"50\":1}}],[\"不可变性\",{\"1\":{\"40\":1,\"46\":1}}],[\"不能被赋值为另一个\",{\"1\":{\"170\":1}}],[\"不能是其它数据类型\",{\"1\":{\"170\":1}}],[\"不能提前做好模版\",{\"1\":{\"111\":1}}],[\"不能对字符串修改\",{\"1\":{\"40\":1}}],[\"不成立\",{\"1\":{\"83\":1}}],[\"不浪费\",{\"1\":{\"47\":1}}],[\"不然\",{\"1\":{\"47\":1}}],[\"不需要\",{\"1\":{\"47\":1}}],[\"不要混用\",{\"1\":{\"206\":1}}],[\"不要出现如下方法\",{\"1\":{\"31\":1}}],[\"不要使用\",{\"1\":{\"30\":1}}],[\"不喜欢用对方的杯子\",{\"1\":{\"31\":1}}],[\"不也是在我们当前所处的空间中\",{\"1\":{\"20\":1}}],[\"hanmeimei=99\",{\"1\":{\"170\":3}}],[\"hanmeimei\",{\"1\":{\"126\":1,\"168\":1,\"169\":4,\"170\":4,\"172\":2,\"173\":1,\"174\":1,\"175\":2}}],[\"have\",{\"1\":{\"31\":2}}],[\"huangjiabao\",{\"1\":{\"107\":1,\"112\":1}}],[\"h\",{\"1\":{\"106\":1,\"126\":1,\"132\":2,\"136\":1}}],[\"how\",{\"1\":{\"31\":1,\"81\":1}}],[\"home\",{\"1\":{\"31\":1}}],[\"hi\",{\"1\":{\"107\":4,\"108\":24,\"109\":2}}],[\"hidden\",{\"1\":{\"31\":1}}],[\"hinc\",{\"1\":{\"0\":1}}],[\"hence\",{\"1\":{\"176\":1}}],[\"hello\",{\"1\":{\"31\":2,\"39\":2,\"42\":2,\"45\":2,\"52\":2,\"53\":2,\"76\":2,\"77\":1,\"79\":1,\"80\":1,\"112\":2,\"121\":2}}],[\"help\",{\"1\":{\"30\":2}}],[\"here\",{\"1\":{\"30\":1}}],[\"系统关键词不能做变量名使用\",{\"1\":{\"30\":1}}],[\"且不能用数字开头\",{\"1\":{\"30\":1}}],[\"数字大小控制步长\",{\"1\":{\"83\":1}}],[\"数字的乘法和除法\",{\"0\":{\"69\":1}}],[\"数字变换\",{\"0\":{\"61\":1}}],[\"数字\",{\"1\":{\"50\":1,\"53\":1,\"75\":1,\"120\":1}}],[\"数字型的特点\",{\"0\":{\"59\":1}}],[\"数字型\",{\"0\":{\"36\":1,\"58\":1},\"1\":{\"167\":1}}],[\"数字和与差\",{\"0\":{\"68\":1}}],[\"数字和\",{\"1\":{\"30\":1}}],[\"数据已经被提取\",{\"1\":{\"163\":1}}],[\"数据类型\",{\"0\":{\"34\":1,\"35\":1}}],[\"数据\",{\"1\":{\"20\":1}}],[\"多条件检查\",{\"0\":{\"203\":1}}],[\"多个修改的对象也可以是字符串\",{\"1\":{\"136\":1}}],[\"多个元素修改下\",{\"1\":{\"136\":1}}],[\"多个元素修改情况下\",{\"1\":{\"136\":1}}],[\"多个元素修改\",{\"1\":{\"136\":1}}],[\"多个位置传入\",{\"1\":{\"110\":1}}],[\"多个花括号指定位置\",{\"1\":{\"108\":1}}],[\"多个变量同时赋予不同的值\",{\"0\":{\"29\":1}}],[\"多个变量同时赋予相同的值\",{\"0\":{\"28\":1}}],[\"多少个空格都可以\",{\"1\":{\"99\":1}}],[\"多媒体\",{\"0\":{\"11\":1}}],[\"进行指定分割\",{\"1\":{\"105\":1}}],[\"进阶的赋值方法\",{\"0\":{\"27\":1}}],[\"进去之后\",{\"1\":{\"20\":1}}],[\"lower\",{\"0\":{\"86\":1},\"1\":{\"86\":1}}],[\"love\",{\"1\":{\"26\":2,\"114\":11}}],[\"llo\",{\"1\":{\"80\":1}}],[\"last\",{\"1\":{\"79\":2,\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"173\":1,\"176\":1}}],[\"lambda\",{\"1\":{\"30\":1}}],[\"letter\",{\"1\":{\"163\":6}}],[\"len\",{\"1\":{\"77\":1,\"79\":1,\"81\":3,\"83\":2,\"135\":1}}],[\"lesson3\",{\"1\":{\"112\":1}}],[\"less\",{\"1\":{\"71\":3}}],[\"left\",{\"1\":{\"31\":1,\"101\":1}}],[\"lst3\",{\"1\":{\"104\":2,\"105\":2}}],[\"lst2\",{\"1\":{\"104\":2,\"105\":2}}],[\"lst1\",{\"1\":{\"104\":2,\"105\":2}}],[\"lstrip\",{\"0\":{\"101\":1},\"1\":{\"101\":1}}],[\"lst\",{\"1\":{\"42\":3,\"43\":1,\"161\":3}}],[\"library\",{\"1\":{\"176\":2}}],[\"liu\",{\"1\":{\"167\":1}}],[\"lilei是变量\",{\"1\":{\"170\":1}}],[\"lilei=98\",{\"1\":{\"170\":2}}],[\"lilei\",{\"1\":{\"126\":1,\"157\":2,\"168\":2,\"169\":4,\"170\":7,\"172\":1,\"173\":1,\"174\":2,\"175\":3}}],[\"line\",{\"1\":{\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1,\"176\":1}}],[\"like\",{\"1\":{\"31\":1}}],[\"list2\",{\"1\":{\"163\":4}}],[\"list1\",{\"1\":{\"163\":4}}],[\"list\",{\"0\":{\"41\":1,\"125\":1,\"150\":1},\"1\":{\"30\":1,\"42\":2,\"120\":2,\"121\":1,\"126\":3,\"131\":1,\"132\":2,\"134\":1,\"149\":1,\"150\":1,\"161\":1,\"163\":2,\"169\":1,\"170\":2,\"183\":1,\"184\":1,\"185\":1}}],[\"lucem\",{\"1\":{\"0\":1}}],[\"~~~~~^^^^^^\",{\"1\":{\"173\":1}}],[\"~~~~~~~^^^^^\",{\"1\":{\"136\":1}}],[\"~~~^^^\",{\"1\":{\"156\":1}}],[\"~\",{\"1\":{\"26\":1}}],[\"和81\",{\"1\":{\"61\":1}}],[\"和62\",{\"1\":{\"61\":1}}],[\"和19\",{\"1\":{\"61\":1}}],[\"和\",{\"0\":{\"26\":1,\"111\":1},\"1\":{\"31\":1,\"50\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"111\":1,\"113\":1,\"168\":1,\"169\":1}}],[\"输入提示\",{\"0\":{\"117\":1}}],[\"输入两个数字\",{\"1\":{\"71\":1}}],[\"输入\",{\"1\":{\"61\":1,\"122\":1}}],[\"输入代码\",{\"1\":{\"1\":1}}],[\"输出计算结果\",{\"1\":{\"122\":1}}],[\"输出示例\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"输出\",{\"1\":{\"61\":1,\"122\":1}}],[\"输出效果如下\",{\"1\":{\"31\":1}}],[\"输出效果\",{\"1\":{\"31\":1}}],[\"输出结尾方式\",{\"0\":{\"25\":1}}],[\"修改lst\",{\"1\":{\"161\":1}}],[\"修改列表中的元素\",{\"0\":{\"136\":1}}],[\"修改\",{\"0\":{\"25\":1},\"1\":{\"47\":1}}],[\"修改多个变量同时输出的间隔\",{\"0\":{\"24\":1}}],[\"error\",{\"1\":{\"206\":1}}],[\"exp\",{\"1\":{\"201\":2}}],[\"expression\",{\"1\":{\"170\":1}}],[\"extend\",{\"1\":{\"139\":1}}],[\"exclusive\",{\"1\":{\"31\":1}}],[\"except\",{\"1\":{\"30\":1}}],[\"eval\",{\"1\":{\"121\":23}}],[\"equal\",{\"1\":{\"71\":2}}],[\"e\",{\"1\":{\"65\":1}}],[\"each\",{\"1\":{\"31\":1}}],[\"element\",{\"0\":{\"134\":1},\"1\":{\"134\":3,\"143\":2}}],[\"elder\",{\"1\":{\"31\":2}}],[\"else\",{\"1\":{\"30\":1,\"71\":2}}],[\"elif\",{\"1\":{\"30\":1,\"71\":2}}],[\"english\",{\"1\":{\"179\":1}}],[\"enter\",{\"1\":{\"30\":1,\"117\":2,\"133\":2,\"167\":2}}],[\"endswith\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"end=\",{\"1\":{\"26\":1,\"114\":1}}],[\"end\",{\"0\":{\"25\":1,\"26\":1},\"1\":{\"80\":3,\"81\":3}}],[\"et\",{\"1\":{\"0\":1}}],[\"间隔\",{\"1\":{\"24\":3}}],[\"答案显然是可以的\",{\"1\":{\"23\":1}}],[\"c6f75b68835a096ebee7933989e7770c\",{\"1\":{\"176\":1}}],[\"clear\",{\"1\":{\"176\":1}}],[\"class1\",{\"1\":{\"180\":3}}],[\"class02\",{\"1\":{\"126\":1}}],[\"class01\",{\"1\":{\"126\":1}}],[\"class\",{\"1\":{\"30\":1,\"179\":2}}],[\"cell\",{\"1\":{\"121\":1}}],[\"city=\",{\"1\":{\"108\":4}}],[\"city\",{\"1\":{\"108\":5,\"109\":2}}],[\"chinese\",{\"1\":{\"179\":1}}],[\"children\",{\"1\":{\"31\":1}}],[\"character\",{\"1\":{\"79\":4,\"80\":1}}],[\"check\",{\"1\":{\"37\":2}}],[\"call\",{\"1\":{\"107\":1,\"112\":1,\"121\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"173\":1,\"176\":1}}],[\"capitalize\",{\"0\":{\"87\":1},\"1\":{\"87\":1}}],[\"cava\",{\"1\":{\"31\":1}}],[\"cannot\",{\"1\":{\"170\":1}}],[\"can\",{\"1\":{\"31\":1,\"107\":1,\"136\":1}}],[\"cup\",{\"1\":{\"31\":4}}],[\"cups\",{\"1\":{\"31\":3}}],[\"cuea\",{\"0\":{\"14\":1}}],[\"computer\",{\"1\":{\"179\":1}}],[\"com\",{\"1\":{\"176\":2}}],[\"coder\",{\"1\":{\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1}}],[\"code\",{\"1\":{\"132\":1}}],[\"count控制替换次数\",{\"1\":{\"103\":1}}],[\"count\",{\"0\":{\"91\":1,\"146\":1},\"1\":{\"91\":2,\"103\":1,\"146\":1}}],[\"correct\",{\"1\":{\"76\":1}}],[\"containers\",{\"1\":{\"176\":1}}],[\"contain\",{\"1\":{\"170\":1}}],[\"continue\",{\"1\":{\"30\":1}}],[\"concatenate\",{\"1\":{\"107\":1}}],[\"condition\",{\"1\":{\"55\":3}}],[\"coke\",{\"1\":{\"31\":1}}],[\"cola\",{\"1\":{\"31\":3}}],[\"c\",{\"1\":{\"23\":2,\"24\":2,\"26\":2,\"28\":2,\"29\":2,\"31\":4,\"61\":2,\"65\":13,\"66\":3,\"132\":2,\"163\":6,\"176\":3,\"178\":1,\"179\":2,\"180\":3}}],[\"be\",{\"1\":{\"176\":1}}],[\"before\",{\"1\":{\"136\":8,\"138\":4,\"139\":2,\"141\":4,\"142\":4,\"143\":2}}],[\"bbb\",{\"1\":{\"138\":2,\"139\":2}}],[\"b删除前一个字符\",{\"1\":{\"113\":1}}],[\"born\",{\"1\":{\"113\":6,\"114\":2}}],[\"bornfor\",{\"1\":{\"113\":3}}],[\"bornforthis\",{\"1\":{\"80\":1,\"81\":1,\"83\":1,\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":2,\"90\":2,\"91\":4,\"92\":6,\"93\":2,\"100\":8,\"101\":2,\"102\":2,\"103\":4,\"104\":6,\"105\":6,\"106\":1,\"107\":4,\"112\":1,\"113\":1,\"114\":1,\"126\":1,\"136\":1,\"167\":3}}],[\"bornff\",{\"1\":{\"113\":2}}],[\"bornf\",{\"1\":{\"105\":1}}],[\"borthis\",{\"1\":{\"113\":2}}],[\"bor\",{\"1\":{\"113\":3}}],[\"bo\",{\"1\":{\"89\":1,\"90\":1}}],[\"bool\",{\"0\":{\"54\":1,\"199\":1},\"1\":{\"55\":1,\"120\":2,\"121\":1,\"169\":4,\"201\":1}}],[\"both\",{\"1\":{\"31\":1}}],[\"brothers\",{\"1\":{\"31\":2}}],[\"brother\",{\"1\":{\"31\":4}}],[\"break\",{\"1\":{\"30\":1}}],[\"b\",{\"1\":{\"23\":2,\"24\":2,\"26\":2,\"28\":2,\"29\":2,\"31\":4,\"42\":2,\"45\":2,\"61\":2,\"63\":14,\"65\":13,\"66\":3,\"68\":7,\"83\":1,\"89\":1,\"104\":4,\"105\":3,\"106\":1,\"113\":1,\"120\":3,\"121\":2,\"126\":1,\"132\":2,\"136\":3,\"163\":6,\"176\":3,\"178\":1,\"179\":1,\"180\":2}}],[\"add\",{\"0\":{\"196\":1},\"1\":{\"196\":1}}],[\"application\",{\"1\":{\"176\":1}}],[\"append\",{\"0\":{\"138\":1},\"1\":{\"138\":2}}],[\"able\",{\"1\":{\"176\":1}}],[\"abc\",{\"1\":{\"132\":2}}],[\"abcdefg0\",{\"1\":{\"95\":1,\"96\":2,\"97\":1,\"98\":1,\"99\":1}}],[\"abcdefg\",{\"1\":{\"95\":1}}],[\"aaa\",{\"1\":{\"138\":4,\"139\":2}}],[\"after\",{\"1\":{\"136\":7,\"138\":4,\"139\":2,\"141\":4,\"142\":4,\"143\":2}}],[\"aello\",{\"1\":{\"112\":1}}],[\"am\",{\"1\":{\"104\":5,\"105\":5,\"106\":1}}],[\"aiyc\",{\"1\":{\"88\":2,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"143\":2}}],[\"ai悦创\",{\"1\":{\"76\":2}}],[\"a1\",{\"1\":{\"61\":3}}],[\"a0\",{\"1\":{\"61\":3}}],[\"age2\",{\"1\":{\"203\":6}}],[\"age1\",{\"1\":{\"203\":6}}],[\"age\",{\"1\":{\"49\":2,\"178\":3}}],[\"alexa\",{\"1\":{\"39\":2,\"42\":2,\"43\":2,\"45\":2,\"46\":2,\"49\":2,\"76\":5,\"77\":1,\"79\":1,\"80\":1,\"108\":25,\"109\":2,\"112\":2,\"116\":2,\"117\":2,\"167\":1}}],[\"alex\",{\"1\":{\"31\":1}}],[\"accidentally\",{\"1\":{\"31\":1}}],[\"at\",{\"1\":{\"31\":1,\"163\":2}}],[\"austin$jaden$alex$cava\",{\"1\":{\"31\":1}}],[\"austin\",{\"1\":{\"31\":10}}],[\"await\",{\"1\":{\"30\":1}}],[\"assign\",{\"1\":{\"136\":1}}],[\"assignment\",{\"1\":{\"112\":1,\"156\":1,\"170\":1}}],[\"assert\",{\"1\":{\"30\":1,\"68\":2,\"69\":2,\"70\":2,\"71\":3}}],[\"assests\",{\"1\":{\"1\":1}}],[\"async\",{\"1\":{\"30\":1}}],[\"as\",{\"1\":{\"30\":1}}],[\"an\",{\"1\":{\"136\":1}}],[\"and\",{\"1\":{\"30\":1,\"31\":6,\"201\":8,\"203\":2}}],[\"any\",{\"1\":{\"30\":1}}],[\"a\",{\"1\":{\"23\":2,\"24\":2,\"26\":2,\"28\":2,\"29\":2,\"30\":1,\"31\":4,\"42\":2,\"45\":2,\"61\":3,\"63\":35,\"65\":13,\"66\":3,\"68\":7,\"106\":1,\"112\":3,\"121\":2,\"132\":2,\"136\":2,\"163\":6,\"176\":3,\"178\":1,\"179\":1,\"180\":2,\"182\":2,\"183\":1,\"184\":3,\"185\":3,\"186\":3,\"200\":2}}],[\"探究\",{\"0\":{\"22\":1}}],[\"从右往左\",{\"1\":{\"201\":1}}],[\"从右到左\",{\"1\":{\"21\":1,\"40\":1,\"43\":3,\"46\":3}}],[\"从3开始往右运行\",{\"1\":{\"201\":1}}],[\"从上面题目完成后应该要\",{\"1\":{\"167\":1}}],[\"从上面的代码可以得知\",{\"1\":{\"121\":1}}],[\"从上到下\",{\"1\":{\"21\":1}}],[\"从字符串右边进行分割\",{\"1\":{\"105\":1}}],[\"从字面意思去理解\",{\"0\":{\"19\":1}}],[\"从一开始数\",{\"1\":{\"77\":1}}],[\"从左到右1\",{\"1\":{\"43\":1,\"46\":1}}],[\"从左到右0\",{\"1\":{\"43\":1,\"46\":1}}],[\"从左到右\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"从输出的结果可以看出\",{\"1\":{\"23\":1}}],[\"类似删除键\",{\"1\":{\"113\":1}}],[\"类似数学表达\",{\"1\":{\"21\":1}}],[\"类似的有\",{\"1\":{\"20\":1}}],[\"=99\",{\"1\":{\"170\":1}}],[\"=98\",{\"1\":{\"170\":2}}],[\"=list\",{\"1\":{\"132\":1}}],[\"===\",{\"1\":{\"201\":1}}],[\"==\",{\"1\":{\"62\":3,\"65\":1,\"66\":2,\"68\":2,\"69\":2,\"70\":2,\"71\":1,\"170\":2}}],[\"=\",{\"1\":{\"21\":1,\"23\":3,\"24\":3,\"26\":3,\"28\":3,\"29\":1,\"31\":19,\"37\":4,\"39\":2,\"42\":2,\"43\":1,\"45\":2,\"46\":1,\"49\":2,\"50\":1,\"52\":2,\"53\":2,\"55\":1,\"60\":8,\"61\":5,\"62\":3,\"63\":31,\"65\":1,\"66\":6,\"68\":4,\"69\":4,\"70\":4,\"71\":2,\"76\":6,\"77\":1,\"79\":1,\"80\":3,\"81\":7,\"82\":3,\"83\":6,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":2,\"100\":4,\"101\":1,\"102\":1,\"103\":3,\"104\":4,\"105\":4,\"106\":2,\"107\":10,\"108\":15,\"109\":5,\"110\":9,\"112\":5,\"113\":10,\"114\":3,\"116\":1,\"117\":1,\"120\":3,\"121\":16,\"126\":3,\"129\":1,\"130\":1,\"131\":2,\"132\":4,\"133\":1,\"134\":1,\"135\":1,\"136\":9,\"138\":2,\"139\":1,\"141\":2,\"142\":2,\"143\":1,\"144\":2,\"145\":1,\"146\":1,\"147\":1,\"149\":1,\"154\":1,\"156\":3,\"157\":1,\"158\":6,\"159\":3,\"161\":4,\"162\":1,\"163\":9,\"168\":1,\"169\":3,\"170\":6,\"172\":1,\"173\":1,\"174\":2,\"175\":3,\"176\":1,\"178\":4,\"179\":1,\"180\":4,\"182\":1,\"183\":2,\"184\":2,\"185\":2,\"186\":3,\"190\":1,\"191\":2,\"192\":2,\"193\":2,\"194\":2,\"195\":4,\"196\":2,\"200\":1,\"201\":2,\"203\":4}}],[\"初始化赋值语句\",{\"1\":{\"21\":1}}],[\"人\",{\"1\":{\"47\":2}}],[\"人民群众\",{\"1\":{\"21\":1}}],[\"人大代表\",{\"1\":{\"21\":1}}],[\"我想在上面的输出添加末尾加一个\",{\"1\":{\"114\":1}}],[\"我代表的是广大人民群众的意志\",{\"1\":{\"21\":1}}],[\"我们试图访问键\",{\"1\":{\"174\":1}}],[\"我们访问了键\",{\"1\":{\"174\":1}}],[\"我们的赋值是需要把一个值赋值给一个变量\",{\"1\":{\"170\":1}}],[\"我们现在有以下联系人\",{\"1\":{\"167\":1}}],[\"我们常规在数学计算中括号是在运算的时候用来保证优先级和在适当的情况下\",{\"1\":{\"158\":1}}],[\"我们可知\",{\"1\":{\"158\":1}}],[\"我们可以知道\",{\"1\":{\"119\":1}}],[\"我们可以修改这个默认空格间隔么\",{\"1\":{\"23\":1}}],[\"我们更希望有类似模版\",{\"1\":{\"107\":1}}],[\"我们如何在\",{\"1\":{\"76\":1}}],[\"我们有时候不仅仅要看选择项以内的答案\",{\"1\":{\"76\":1}}],[\"我们需要通过以下规则产生两个新的数字\",{\"1\":{\"61\":1}}],[\"我们需要设立一个专门的人员跟踪\",{\"1\":{\"47\":1}}],[\"我们也不能说集合是有序的\",{\"1\":{\"53\":1}}],[\"我们讲究\",{\"1\":{\"47\":1}}],[\"我们是不是需要有一个类似仓库管理员的\",{\"1\":{\"47\":1}}],[\"我们说的不可变\",{\"1\":{\"40\":1}}],[\"我们叫它什么名字\",{\"1\":{\"21\":1}}],[\"我们为什么不一开始直接为每一个学生分配一个信封呢\",{\"1\":{\"20\":1}}],[\"我们应该把刘奕彤\",{\"1\":{\"20\":1}}],[\"他们的权利不是自己获取的\",{\"1\":{\"21\":1}}],[\"是value\",{\"1\":{\"170\":1}}],[\"是一一对应\",{\"1\":{\"169\":1}}],[\"是一个迭代器地址\",{\"1\":{\"163\":1}}],[\"是一个zip对象\",{\"1\":{\"163\":1}}],[\"是一个内置函数\",{\"1\":{\"163\":1}}],[\"是一个列表的基本方法\",{\"1\":{\"134\":1}}],[\"是什么类型\",{\"1\":{\"158\":1}}],[\"是会报错\",{\"1\":{\"156\":1}}],[\"是由一系列的\",{\"1\":{\"50\":1}}],[\"是由广大人民群众投票选举出来的\",{\"1\":{\"21\":1}}],[\"是否有空间\",{\"1\":{\"47\":1}}],[\"是否有位置\",{\"1\":{\"47\":2}}],[\"是统计一个用户在一周之内看了哪些用户的帖子\",{\"1\":{\"47\":1}}],[\"是在代码运行的过程当中\",{\"1\":{\"40\":1}}],[\"是python中的特殊类型\",{\"1\":{\"31\":1}}],[\"是同一个变量\",{\"1\":{\"31\":1}}],[\"是不是会一直变动\",{\"1\":{\"47\":1}}],[\"是不是在我们当前所处的空间当中开辟空间\",{\"1\":{\"20\":1}}],[\"是不是有大小了呢\",{\"1\":{\"20\":1}}],[\"是不是变化了\",{\"1\":{\"20\":1}}],[\"是不是鼓起来了\",{\"1\":{\"20\":1}}],[\"值\",{\"1\":{\"21\":2}}],[\"泥人\",{\"1\":{\"21\":1}}],[\"泥人可以代表说是女娲的后人\",{\"1\":{\"21\":1}}],[\"泥人没有生命\",{\"1\":{\"21\":1}}],[\"此时在聘请一个就显得浪费了\",{\"1\":{\"47\":1}}],[\"此时我们是不是需要聘请一个仓库管理员\",{\"1\":{\"47\":1}}],[\"此时\",{\"1\":{\"21\":1}}],[\"赋值给另一个值吗\",{\"1\":{\"170\":1}}],[\"赋值运算符\",{\"0\":{\"63\":1}}],[\"赋值语句\",{\"0\":{\"21\":1}}],[\"赋予给泥人生命\",{\"1\":{\"21\":1}}],[\"女娲\",{\"1\":{\"21\":1}}],[\"女娲挥了挥手柳条\",{\"1\":{\"21\":1}}],[\"女娲捏了泥人\",{\"1\":{\"21\":1}}],[\"冰箱\",{\"1\":{\"20\":1}}],[\"信封在一开始是扁的\",{\"1\":{\"20\":1}}],[\"信息框\",{\"0\":{\"6\":1}}],[\"那么元素本身的类型\",{\"1\":{\"158\":1}}],[\"那么三引号呢\",{\"1\":{\"76\":1}}],[\"那么执行\",{\"1\":{\"66\":1}}],[\"那么你的代码应当输出两个数字\",{\"1\":{\"61\":3}}],[\"那么你想存放两个的时候\",{\"1\":{\"47\":1}}],[\"那么就不需要一个多余的\",{\"1\":{\"47\":1}}],[\"那么肯定选用元组更合适\",{\"1\":{\"47\":1}}],[\"那么则用列表更合适\",{\"1\":{\"47\":1}}],[\"那么信封\",{\"1\":{\"20\":1}}],[\"那么\",{\"1\":{\"20\":1,\"23\":1,\"47\":1,\"92\":1,\"93\":1,\"163\":1}}],[\"总不能直接把每个月的月考成绩单直接给老师\",{\"1\":{\"20\":1}}],[\"老师要看刘奕彤\",{\"1\":{\"20\":1}}],[\"某一天\",{\"1\":{\"20\":1}}],[\"刘奕彤\",{\"1\":{\"20\":1}}],[\"马冬梅\",{\"1\":{\"20\":1}}],[\"李雷\",{\"1\":{\"20\":1,\"167\":3}}],[\"每个元组都由两个列表的相应元素组成\",{\"1\":{\"163\":1}}],[\"每个单词的首字母大写\",{\"1\":{\"88\":1}}],[\"每个值之间默认以空格间隔\",{\"1\":{\"23\":1}}],[\"每个月需要统计班级中每个学生的月考成绩\",{\"1\":{\"20\":1}}],[\"每张纸上都会依次记录每个学生的成绩越到成绩\",{\"1\":{\"20\":1}}],[\"月考成绩会每个月一张纸\",{\"1\":{\"20\":1}}],[\"量\",{\"1\":{\"19\":1}}],[\"变化\",{\"1\":{\"19\":1}}],[\"变\",{\"1\":{\"19\":1}}],[\"变量必须提前创建好\",{\"1\":{\"109\":1}}],[\"变量只能存储基本数据类型的值\",{\"1\":{\"31\":1}}],[\"变量在使用之前必须被赋值\",{\"1\":{\"31\":1}}],[\"变量的命名规则\",{\"0\":{\"30\":1}}],[\"变量的值会被覆盖\",{\"1\":{\"20\":1}}],[\"变量名可以是\",{\"1\":{\"31\":1}}],[\"变量名可以以数字开始\",{\"1\":{\"31\":1}}],[\"变量名区分大小写\",{\"1\":{\"31\":1}}],[\"变量名不能包含空格\",{\"1\":{\"30\":1}}],[\"变量名\",{\"1\":{\"21\":2}}],[\"变量不就是在计算机的内存当中开辟空间\",{\"1\":{\"20\":1}}],[\"变量\",{\"0\":{\"17\":1},\"1\":{\"21\":3,\"121\":1,\"167\":1,\"170\":1}}],[\"生活中的例子\",{\"0\":{\"18\":1}}],[\"生成链接\",{\"1\":{\"1\":1}}],[\"理解变量\",{\"0\":{\"18\":1}}],[\"physics\",{\"1\":{\"179\":1}}],[\"phone\",{\"1\":{\"167\":2,\"168\":2,\"169\":5}}],[\"perhaps\",{\"1\":{\"170\":1}}],[\"py\",{\"1\":{\"107\":1,\"112\":1,\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1,\"176\":1}}],[\"pycharm\",{\"1\":{\"107\":1,\"112\":1}}],[\"python代码缩进问题\",{\"1\":{\"206\":1}}],[\"pythonfile\",{\"1\":{\"136\":1,\"141\":1,\"156\":1,\"169\":1,\"170\":1,\"173\":1}}],[\"python所拥有的所有数据类型\",{\"1\":{\"43\":1}}],[\"python拥有的所有数据类型都可以作为元素之一\",{\"1\":{\"43\":1,\"46\":1}}],[\"python中变量的类型是静态的\",{\"1\":{\"31\":1}}],[\"python\",{\"1\":{\"26\":2,\"30\":3,\"31\":3,\"50\":2,\"61\":1,\"65\":6,\"66\":3,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"76\":1,\"107\":1,\"132\":1,\"176\":1},\"2\":{\"15\":1,\"32\":1,\"56\":1,\"72\":1,\"123\":1,\"151\":1,\"164\":1,\"187\":1,\"197\":1,\"204\":1,\"207\":1}}],[\"ps\",{\"1\":{\"80\":1,\"81\":1}}],[\"para\",{\"1\":{\"76\":1,\"77\":2,\"79\":6,\"80\":2}}],[\"paragraph\",{\"1\":{\"76\":1}}],[\"pass\",{\"1\":{\"30\":1}}],[\"p\",{\"1\":{\"71\":13,\"132\":2}}],[\"pop\",{\"0\":{\"142\":1,\"182\":1},\"1\":{\"142\":3,\"182\":1}}],[\"position\",{\"1\":{\"108\":2,\"133\":1}}],[\"power\",{\"1\":{\"70\":4}}],[\"pocula\",{\"1\":{\"0\":1}}],[\"product\",{\"1\":{\"69\":4}}],[\"print\",{\"0\":{\"22\":1,\"25\":1},\"1\":{\"23\":2,\"24\":1,\"26\":1,\"28\":1,\"29\":1,\"31\":4,\"37\":6,\"39\":3,\"42\":3,\"45\":3,\"49\":3,\"52\":3,\"53\":2,\"55\":2,\"61\":1,\"62\":12,\"63\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":6,\"77\":1,\"79\":4,\"80\":1,\"81\":3,\"82\":2,\"83\":5,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":1,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":2,\"100\":4,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":4,\"108\":15,\"109\":2,\"110\":9,\"112\":1,\"113\":5,\"114\":6,\"116\":2,\"117\":1,\"126\":1,\"129\":2,\"130\":1,\"131\":5,\"134\":1,\"135\":1,\"136\":8,\"138\":4,\"139\":2,\"141\":5,\"142\":4,\"143\":2,\"144\":1,\"145\":2,\"146\":1,\"147\":1,\"149\":2,\"154\":1,\"157\":4,\"158\":2,\"159\":1,\"161\":1,\"162\":1,\"163\":7,\"168\":1,\"169\":2,\"170\":2,\"172\":1,\"173\":2,\"174\":3,\"175\":1,\"176\":6,\"178\":3,\"179\":1,\"180\":2,\"182\":1,\"183\":2,\"184\":2,\"185\":2,\"186\":3,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"200\":3,\"201\":2,\"203\":4}}],[\"symmetric\",{\"1\":{\"194\":1}}],[\"syntaxerror\",{\"1\":{\"170\":1}}],[\"science\",{\"1\":{\"179\":1}}],[\"specified\",{\"1\":{\"174\":3}}],[\"split\",{\"0\":{\"104\":1},\"1\":{\"104\":4}}],[\"sorted\",{\"0\":{\"150\":1,\"162\":1},\"1\":{\"150\":1,\"162\":3}}],[\"sort\",{\"0\":{\"149\":1},\"1\":{\"149\":3,\"161\":1}}],[\"s2\",{\"1\":{\"114\":3,\"201\":2}}],[\"s1\",{\"1\":{\"114\":9,\"201\":2}}],[\"shenzhen\",{\"1\":{\"108\":4}}],[\"shanghai\",{\"1\":{\"108\":4}}],[\"sihtrofnro\",{\"1\":{\"83\":1}}],[\"sihtrofnrob\",{\"1\":{\"83\":1}}],[\"students\",{\"1\":{\"178\":5}}],[\"student3\",{\"1\":{\"178\":2,\"180\":2}}],[\"student2\",{\"1\":{\"126\":1,\"178\":2,\"180\":2}}],[\"student1\",{\"1\":{\"126\":1,\"178\":2,\"180\":2,\"182\":3,\"183\":2,\"184\":2,\"185\":2,\"186\":6}}],[\"studentcoder\",{\"1\":{\"107\":1,\"112\":1}}],[\"steps\",{\"1\":{\"81\":1}}],[\"startswith\",{\"0\":{\"89\":1},\"1\":{\"89\":2}}],[\"start\",{\"1\":{\"80\":2,\"81\":2}}],[\"strip\",{\"0\":{\"100\":1},\"1\":{\"100\":4}}],[\"string3\",{\"1\":{\"107\":2}}],[\"string2\",{\"1\":{\"103\":2,\"107\":2}}],[\"string1\",{\"1\":{\"103\":2,\"107\":2}}],[\"string\",{\"1\":{\"39\":5,\"42\":2,\"45\":2,\"49\":2,\"52\":2,\"76\":2,\"80\":3,\"81\":11,\"82\":3,\"83\":8,\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":4,\"90\":4,\"91\":4,\"92\":6,\"93\":2,\"94\":4,\"95\":4,\"96\":4,\"97\":2,\"98\":2,\"99\":4,\"100\":8,\"101\":2,\"102\":2,\"103\":4,\"104\":5,\"105\":5,\"106\":5,\"107\":7,\"108\":34,\"109\":4,\"110\":15,\"112\":4,\"121\":10,\"126\":2}}],[\"str\",{\"0\":{\"38\":1,\"119\":1},\"1\":{\"39\":2,\"107\":3,\"112\":1,\"119\":3,\"121\":1,\"169\":1}}],[\"support\",{\"1\":{\"112\":1,\"156\":1,\"176\":1}}],[\"suppose\",{\"1\":{\"31\":1}}],[\"substring\",{\"1\":{\"93\":1}}],[\"sum\",{\"1\":{\"68\":4}}],[\"swap\",{\"1\":{\"31\":1}}],[\"s\",{\"1\":{\"31\":3,\"106\":1,\"110\":10,\"112\":3,\"113\":15,\"120\":3,\"121\":34,\"126\":1,\"136\":1}}],[\"search\",{\"1\":{\"167\":2}}],[\"sequence\",{\"0\":{\"145\":1}}],[\"self\",{\"1\":{\"116\":1}}],[\"select\",{\"1\":{\"80\":1,\"81\":7,\"82\":4,\"83\":10}}],[\"selecting\",{\"1\":{\"79\":4,\"80\":1}}],[\"set会自动去除后面和前面重复的\",{\"1\":{\"201\":1}}],[\"set2\",{\"1\":{\"53\":2,\"191\":2,\"192\":2,\"193\":2,\"194\":2,\"195\":3,\"196\":1}}],[\"set1\",{\"1\":{\"52\":3,\"53\":2,\"190\":1,\"191\":2,\"192\":2,\"193\":2,\"194\":2,\"195\":3,\"196\":3}}],[\"set\",{\"0\":{\"51\":1,\"189\":1},\"1\":{\"52\":2,\"121\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1}}],[\"secret\",{\"1\":{\"31\":1}}],[\"sep=\",{\"1\":{\"24\":1,\"26\":1,\"81\":1,\"103\":1,\"104\":1,\"105\":1}}],[\"sep\",{\"0\":{\"24\":1,\"26\":1},\"1\":{\"23\":1,\"81\":2,\"104\":2,\"105\":2,\"106\":1}}],[\"session\",{\"0\":{\"14\":1}}],[\"sacra\",{\"1\":{\"0\":1}}],[\"公式\",{\"0\":{\"10\":1}}],[\"95\",{\"1\":{\"129\":1,\"131\":1,\"175\":2,\"176\":3,\"178\":1,\"180\":1}}],[\"98\",{\"1\":{\"129\":2,\"131\":1,\"170\":5,\"172\":1,\"173\":1,\"174\":3,\"175\":1,\"176\":2,\"178\":1,\"180\":1,\"182\":2,\"183\":1,\"184\":3,\"185\":3,\"186\":3}}],[\"98分\",{\"1\":{\"20\":1}}],[\"9和1的和\",{\"1\":{\"61\":1}}],[\"91的反转\",{\"1\":{\"61\":1}}],[\"91\",{\"1\":{\"61\":1}}],[\"9999\",{\"1\":{\"66\":1}}],[\"99\",{\"1\":{\"61\":1,\"129\":1,\"131\":1,\"170\":3,\"172\":1,\"173\":1,\"174\":1,\"175\":2,\"176\":3,\"178\":1}}],[\"96分\",{\"1\":{\"20\":1}}],[\"9\",{\"0\":{\"10\":1,\"93\":1,\"114\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1},\"1\":{\"59\":4,\"60\":4,\"61\":1,\"65\":2,\"66\":1,\"83\":1,\"130\":1,\"131\":1,\"132\":1,\"158\":1,\"161\":3,\"162\":1,\"176\":1,\"196\":2}}],[\"89\",{\"1\":{\"180\":1}}],[\"89分\",{\"1\":{\"20\":1}}],[\"80\",{\"1\":{\"129\":1,\"131\":1}}],[\"81\",{\"1\":{\"70\":1}}],[\"8\",{\"0\":{\"9\":1,\"92\":1,\"113\":1,\"137\":1,\"138\":1,\"139\":1,\"163\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1},\"1\":{\"59\":4,\"60\":1,\"61\":1,\"66\":2,\"68\":1,\"121\":1,\"130\":1,\"131\":1,\"132\":2,\"136\":1,\"161\":3,\"162\":1,\"191\":1,\"192\":2,\"193\":1,\"194\":2,\"195\":2,\"196\":1,\"200\":1}}],[\"72\",{\"1\":{\"121\":1}}],[\"7th\",{\"1\":{\"80\":1}}],[\"7\",{\"0\":{\"8\":1,\"54\":1,\"55\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"91\":1,\"112\":1,\"136\":1,\"160\":1,\"161\":1,\"162\":1,\"176\":1,\"196\":1},\"1\":{\"59\":2,\"65\":2,\"66\":2,\"130\":1,\"131\":2,\"132\":1,\"161\":3,\"162\":1}}],[\"666\",{\"1\":{\"110\":2}}],[\"6th\",{\"1\":{\"80\":1}}],[\"6+\",{\"1\":{\"50\":1}}],[\"6\",{\"0\":{\"7\":1,\"31\":1,\"51\":1,\"52\":1,\"53\":1,\"90\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"135\":1,\"159\":1,\"175\":1,\"195\":1},\"1\":{\"53\":1,\"59\":2,\"60\":1,\"65\":1,\"80\":1,\"122\":1,\"130\":2,\"131\":1,\"132\":2,\"133\":2,\"134\":2,\"135\":1,\"136\":11,\"138\":6,\"139\":3,\"141\":5,\"142\":5,\"143\":3,\"144\":2,\"145\":1,\"146\":1,\"147\":1,\"149\":3,\"159\":2,\"161\":3,\"162\":1,\"191\":1,\"192\":2,\"193\":1,\"194\":2,\"195\":2,\"196\":1,\"201\":2}}],[\"6号标题\",{\"1\":{\"1\":1}}],[\"500次都是\",{\"1\":{\"53\":1}}],[\"5\",{\"0\":{\"6\":1,\"30\":1,\"48\":1,\"49\":1,\"50\":1,\"63\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"134\":1,\"158\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"186\":1,\"194\":1},\"1\":{\"31\":1,\"37\":2,\"59\":2,\"63\":1,\"65\":8,\"66\":4,\"68\":1,\"69\":1,\"70\":1,\"71\":2,\"83\":1,\"120\":2,\"122\":1,\"130\":2,\"131\":2,\"132\":4,\"133\":2,\"134\":2,\"135\":2,\"136\":11,\"138\":6,\"139\":3,\"141\":5,\"142\":6,\"143\":3,\"144\":2,\"145\":1,\"146\":1,\"147\":1,\"149\":3,\"159\":2,\"161\":3,\"162\":1,\"190\":1,\"191\":3,\"192\":3,\"193\":2,\"194\":2,\"195\":2,\"196\":3,\"200\":1,\"201\":9}}],[\"4b975e58c46c58ce379c1852275bb5cf\",{\"1\":{\"176\":1}}],[\"45\",{\"1\":{\"121\":2}}],[\"44\",{\"1\":{\"121\":1}}],[\"40\",{\"1\":{\"107\":1}}],[\"4\",{\"0\":{\"5\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"62\":1,\"71\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":1,\"88\":1,\"111\":1,\"131\":1,\"133\":1,\"157\":1,\"170\":1,\"185\":1,\"193\":1},\"1\":{\"59\":4,\"60\":2,\"62\":2,\"63\":2,\"65\":12,\"66\":3,\"71\":1,\"119\":4,\"120\":2,\"130\":2,\"131\":3,\"132\":5,\"133\":2,\"134\":2,\"141\":1,\"157\":1,\"159\":2,\"161\":3,\"162\":1,\"190\":1,\"191\":1,\"192\":2,\"193\":2,\"194\":2,\"195\":2,\"196\":2}}],[\"图片\",{\"0\":{\"4\":1}}],[\"38\",{\"1\":{\"121\":1}}],[\"37\",{\"1\":{\"121\":2}}],[\"36\",{\"1\":{\"121\":1}}],[\"35\",{\"1\":{\"121\":2}}],[\"3456\",{\"1\":{\"168\":1,\"169\":4}}],[\"34\",{\"1\":{\"121\":1}}],[\"33\",{\"1\":{\"121\":2}}],[\"3333\",{\"1\":{\"65\":1}}],[\"32\",{\"1\":{\"121\":1}}],[\"31\",{\"1\":{\"121\":2}}],[\"30\",{\"1\":{\"121\":1,\"144\":2}}],[\"39\",{\"1\":{\"112\":1,\"121\":2}}],[\"3f\",{\"1\":{\"108\":2,\"109\":1,\"110\":2}}],[\"3rd\",{\"1\":{\"79\":1,\"80\":1,\"143\":1}}],[\"3月的成绩抄写到单独的一张纸上\",{\"1\":{\"20\":1}}],[\"3月的成绩\",{\"1\":{\"20\":1}}],[\"3\",{\"0\":{\"4\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"26\":1,\"41\":1,\"42\":1,\"43\":1,\"47\":1,\"61\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":2,\"71\":1,\"77\":1,\"81\":1,\"87\":1,\"110\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":2,\"130\":1,\"132\":1,\"143\":1,\"156\":1,\"169\":1,\"174\":1,\"180\":1,\"184\":1,\"192\":1,\"202\":1,\"203\":1},\"1\":{\"23\":2,\"24\":2,\"29\":2,\"31\":5,\"49\":2,\"50\":1,\"52\":2,\"53\":4,\"59\":4,\"60\":4,\"61\":1,\"62\":6,\"65\":13,\"66\":6,\"69\":1,\"81\":1,\"103\":1,\"104\":1,\"105\":1,\"119\":4,\"120\":2,\"121\":10,\"129\":1,\"130\":2,\"131\":2,\"132\":4,\"133\":3,\"134\":3,\"135\":1,\"136\":14,\"138\":6,\"139\":3,\"141\":4,\"142\":6,\"143\":3,\"144\":2,\"145\":1,\"146\":2,\"147\":1,\"149\":3,\"158\":9,\"159\":2,\"161\":3,\"162\":1,\"163\":6,\"190\":1,\"191\":1,\"192\":2,\"193\":2,\"194\":2,\"195\":2,\"196\":2,\"201\":4}}],[\"代码运行后\",{\"1\":{\"158\":1}}],[\"代码实现呢\",{\"1\":{\"76\":1}}],[\"代码模版\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"代码示例\",{\"0\":{\"37\":1,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"55\":1}}],[\"代码\",{\"0\":{\"3\":1},\"1\":{\"61\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"27\",{\"1\":{\"121\":2}}],[\"25\",{\"1\":{\"121\":2}}],[\"23\",{\"1\":{\"121\":2}}],[\"29\",{\"1\":{\"121\":4}}],[\"28\",{\"1\":{\"121\":3}}],[\"22\",{\"0\":{\"106\":1},\"1\":{\"121\":2}}],[\"24\",{\"1\":{\"65\":1,\"121\":1}}],[\"20240124235649487\",{\"1\":{\"203\":1}}],[\"20240124230807747\",{\"1\":{\"200\":1}}],[\"20240122235113623\",{\"1\":{\"190\":1}}],[\"20240122234830051\",{\"1\":{\"186\":1}}],[\"20240122231842997\",{\"1\":{\"176\":1}}],[\"20240103230249845\",{\"1\":{\"175\":1}}],[\"20240103225717283\",{\"1\":{\"173\":1}}],[\"20240102231518401\",{\"1\":{\"155\":1}}],[\"20231231084254336\",{\"1\":{\"145\":1}}],[\"20231231082941897\",{\"1\":{\"138\":1}}],[\"20231231081734946\",{\"1\":{\"136\":1}}],[\"20231230090452598\",{\"1\":{\"132\":1}}],[\"20231230085840306\",{\"1\":{\"132\":1}}],[\"20231230085730652\",{\"1\":{\"132\":1}}],[\"20231230084653457\",{\"1\":{\"131\":1}}],[\"20231230084607435\",{\"1\":{\"130\":1}}],[\"20231230083906988\",{\"1\":{\"128\":1}}],[\"20231228221150020\",{\"1\":{\"117\":1}}],[\"20231228220912772\",{\"1\":{\"117\":1}}],[\"20231221214427299\",{\"1\":{\"83\":1}}],[\"20231221214402328\",{\"1\":{\"83\":1}}],[\"20231218095008709\",{\"1\":{\"76\":1}}],[\"20231218093224921\",{\"1\":{\"75\":1}}],[\"20231218084943233\",{\"1\":{\"59\":1}}],[\"20231217084933264\",{\"1\":{\"35\":1,\"43\":1}}],[\"201902\",{\"1\":{\"126\":1}}],[\"201901\",{\"1\":{\"126\":1}}],[\"20\",{\"0\":{\"104\":1},\"1\":{\"65\":1,\"121\":1,\"144\":2}}],[\"2和6的和\",{\"1\":{\"61\":1}}],[\"26的反转\",{\"1\":{\"61\":1}}],[\"26\",{\"1\":{\"61\":1,\"121\":2}}],[\"21\",{\"0\":{\"105\":1},\"1\":{\"61\":2,\"65\":1,\"121\":1}}],[\"2myvar\",{\"1\":{\"31\":1}}],[\"2月\",{\"1\":{\"20\":2}}],[\"2\",{\"0\":{\"3\":1,\"20\":1,\"21\":1,\"24\":1,\"29\":1,\"38\":1,\"39\":1,\"40\":2,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"60\":1,\"66\":1,\"69\":1,\"76\":1,\"80\":1,\"86\":1,\"109\":1,\"117\":1,\"120\":1,\"127\":1,\"128\":1,\"129\":2,\"130\":1,\"131\":1,\"139\":1,\"142\":1,\"150\":1,\"155\":1,\"162\":1,\"168\":1,\"173\":1,\"179\":1,\"183\":1,\"191\":1,\"201\":1},\"1\":{\"23\":2,\"24\":2,\"29\":2,\"31\":5,\"42\":2,\"45\":2,\"49\":2,\"52\":4,\"53\":7,\"59\":8,\"60\":7,\"62\":10,\"63\":4,\"65\":12,\"66\":5,\"68\":1,\"79\":1,\"80\":1,\"81\":2,\"82\":2,\"91\":2,\"92\":1,\"112\":1,\"119\":4,\"120\":2,\"121\":11,\"130\":3,\"131\":3,\"132\":6,\"133\":2,\"134\":2,\"135\":1,\"136\":9,\"138\":6,\"139\":3,\"141\":6,\"142\":6,\"143\":4,\"144\":2,\"145\":1,\"146\":1,\"147\":1,\"149\":3,\"154\":2,\"156\":2,\"157\":8,\"158\":2,\"159\":2,\"161\":3,\"162\":1,\"163\":6,\"169\":4,\"173\":1,\"176\":1,\"178\":2,\"179\":1,\"190\":1,\"191\":3,\"192\":3,\"193\":2,\"194\":2,\"195\":2,\"196\":3}}],[\"1才能是倒着的\",{\"1\":{\"131\":1}}],[\"190\",{\"1\":{\"107\":4,\"108\":2,\"109\":2,\"110\":6}}],[\"19\",{\"0\":{\"103\":1},\"1\":{\"110\":1,\"121\":2,\"126\":1,\"157\":3,\"178\":1}}],[\"178\",{\"1\":{\"129\":1}}],[\"17\",{\"0\":{\"101\":1},\"1\":{\"120\":2,\"121\":1,\"203\":2}}],[\"154389\",{\"1\":{\"167\":1}}],[\"15\",{\"0\":{\"99\":1},\"1\":{\"120\":2,\"121\":1,\"203\":2}}],[\"131559\",{\"1\":{\"167\":1}}],[\"131452\",{\"1\":{\"167\":1}}],[\"132456\",{\"1\":{\"167\":1}}],[\"13\",{\"0\":{\"97\":1,\"147\":1},\"1\":{\"110\":6,\"120\":1}}],[\"13579\",{\"1\":{\"81\":1,\"82\":1}}],[\"1最后一位开始往回倒\",{\"1\":{\"83\":1}}],[\"1走没有任何值\",{\"1\":{\"83\":1}}],[\"1st\",{\"1\":{\"79\":1,\"108\":1}}],[\"1123\",{\"1\":{\"168\":1,\"169\":4}}],[\"11\",{\"0\":{\"95\":1,\"122\":1,\"145\":1},\"1\":{\"65\":1,\"83\":1,\"120\":2,\"122\":1,\"132\":1}}],[\"16\",{\"0\":{\"100\":1},\"1\":{\"65\":1,\"120\":1,\"121\":2}}],[\"14\",{\"0\":{\"98\":1,\"148\":1,\"149\":1,\"150\":1},\"1\":{\"65\":2,\"120\":2,\"121\":2}}],[\"1和8的和\",{\"1\":{\"61\":1}}],[\"1+1\",{\"1\":{\"59\":2}}],[\"180595\",{\"1\":{\"167\":2}}],[\"18的反转\",{\"1\":{\"61\":1}}],[\"18\",{\"0\":{\"102\":1},\"1\":{\"49\":2,\"61\":1,\"76\":1,\"110\":5,\"120\":2,\"121\":1,\"126\":1,\"178\":2,\"203\":4}}],[\"12\",{\"0\":{\"96\":1,\"146\":1},\"1\":{\"43\":2,\"46\":2,\"61\":2,\"65\":1,\"69\":1,\"77\":1,\"92\":1,\"120\":1,\"121\":4,\"132\":2}}],[\"1234\",{\"1\":{\"168\":2,\"169\":4}}],[\"123456\",{\"1\":{\"167\":2}}],[\"123\",{\"1\":{\"31\":1}}],[\"123abc\",{\"1\":{\"31\":1}}],[\"1开始\",{\"1\":{\"40\":1,\"43\":1,\"46\":1}}],[\"1~1~1\",{\"1\":{\"26\":1}}],[\"1月\",{\"1\":{\"20\":2}}],[\"100\",{\"1\":{\"175\":2}}],[\"10\",{\"0\":{\"11\":1,\"94\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"144\":1},\"1\":{\"59\":1,\"61\":5,\"63\":12,\"65\":1,\"66\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"114\":4,\"120\":1,\"132\":2,\"144\":2,\"145\":1,\"176\":1,\"200\":2}}],[\"1\",{\"0\":{\"2\":1,\"14\":1,\"18\":1,\"19\":2,\"20\":1,\"23\":1,\"28\":1,\"36\":1,\"37\":2,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"55\":1,\"59\":1,\"65\":1,\"68\":1,\"75\":1,\"79\":1,\"85\":1,\"108\":1,\"116\":1,\"119\":1,\"126\":1,\"128\":1,\"138\":1,\"141\":1,\"149\":1,\"154\":1,\"161\":1,\"167\":1,\"172\":1,\"178\":1,\"182\":1,\"190\":1,\"200\":1,\"203\":1},\"1\":{\"23\":2,\"24\":2,\"26\":3,\"28\":4,\"29\":2,\"31\":5,\"37\":4,\"42\":8,\"43\":2,\"45\":8,\"46\":2,\"49\":10,\"52\":8,\"53\":12,\"59\":2,\"60\":6,\"62\":6,\"63\":2,\"65\":2,\"66\":3,\"70\":1,\"79\":2,\"81\":2,\"82\":1,\"83\":9,\"92\":2,\"107\":1,\"108\":5,\"112\":1,\"119\":2,\"120\":2,\"121\":15,\"130\":1,\"131\":6,\"132\":9,\"133\":2,\"134\":2,\"135\":1,\"136\":9,\"138\":6,\"139\":3,\"141\":5,\"142\":5,\"143\":3,\"144\":2,\"145\":2,\"146\":4,\"147\":4,\"149\":9,\"156\":2,\"157\":2,\"158\":4,\"159\":2,\"161\":3,\"162\":1,\"163\":6,\"169\":1,\"170\":2,\"190\":1,\"191\":3,\"192\":3,\"193\":2,\"194\":2,\"195\":2,\"196\":3}}],[\"链接\",{\"0\":{\"7\":1},\"1\":{\"1\":1}}],[\"链接名\",{\"1\":{\"1\":1}}],[\"+数字来输入\",{\"1\":{\"110\":1}}],[\"+1\",{\"1\":{\"80\":1,\"81\":1}}],[\"+=\",{\"1\":{\"63\":4}}],[\"+\",{\"1\":{\"1\":1,\"60\":2,\"61\":2,\"63\":1,\"65\":5,\"68\":2,\"107\":7,\"112\":1,\"114\":3,\"129\":1,\"144\":1,\"158\":2,\"159\":1}}],[\"复制粘贴\",{\"1\":{\"1\":1}}],[\"插入图片\",{\"1\":{\"1\":1}}],[\"```python\",{\"1\":{\"1\":1}}],[\"拓展开始\",{\"1\":{\"1\":1}}],[\"标题\",{\"1\":{\"1\":1}}],[\"文章标题\",{\"0\":{\"2\":1}}],[\"文章内开始第一行要打三个\",{\"1\":{\"1\":1}}],[\"文件名不要使用中文\",{\"1\":{\"1\":1}}],[\"纪录由此开始\",{\"1\":{\"0\":1}}],[\"剑桥大学工程系\",{\"1\":{\"0\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2},\"/\":{\"documentCount\":223,\"nextId\":223,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-51dc1b1e\",\"2\":\"v-51dc1b1e#_1-article-title\",\"3\":\"v-51dc1b1e#_2-code\",\"4\":\"v-51dc1b1e#_3-image\",\"5\":\"v-51dc1b1e#_4-ordered-and-unordered-headings-task-list\",\"6\":\"v-51dc1b1e#_5-information-box-tip-container\",\"7\":\"v-51dc1b1e#_6-links\",\"8\":\"v-51dc1b1e#_7-underline\",\"9\":\"v-51dc1b1e#_8-alignment\",\"10\":\"v-51dc1b1e#_9-formulas\",\"11\":\"v-51dc1b1e#_10-multimedia\",\"12\":\"v-51dc1b1e@0\",\"13\":\"v-51dc1b1e@1\",\"14\":\"v-0c806187\",\"15\":\"v-0c806187#session-1-–-introduction-dec-22nd\",\"16\":\"v-0c806187@0\",\"17\":\"v-0c806187@1\",\"18\":\"v-97fd02aa\",\"19\":\"v-97fd02aa#_1-understanding-variables-—-examples-from-life\",\"20\":\"v-97fd02aa#_1-1-literal-understanding\",\"21\":\"v-97fd02aa#_1-2-an-example-🌰\",\"22\":\"v-97fd02aa#_2-how-to-create-variables-—-assignment-statements\",\"23\":\"v-97fd02aa#_3-exploring-print\",\"24\":\"v-97fd02aa#_3-1-printing-multiple-data-at-once\",\"25\":\"v-97fd02aa#_3-2-modifying-the-separation-of-multiple-variables-printed-simultaneously\",\"26\":\"v-97fd02aa#_3-3-modifying-end-changes-the-output-ending-style\",\"27\":\"v-97fd02aa#_3-4-end-and-sep-can-be-used-simultaneously\",\"28\":\"v-97fd02aa#_4-advanced-assignment-methods\",\"29\":\"v-97fd02aa#_4-1-assigning-the-same-value-to-multiple-variables-simultaneously\",\"30\":\"v-97fd02aa#_4-2-assigning-different-values-to-multiple-variables-simultaneously\",\"31\":\"v-97fd02aa#_5-naming-rules-for-variables\",\"32\":\"v-97fd02aa#_6-exercises\",\"33\":\"v-97fd02aa@0\",\"34\":\"v-97fd02aa@1\",\"35\":\"v-0be6faf8\",\"36\":\"v-0be6faf8#data-types\",\"37\":\"v-0be6faf8#_1-numeric-types-int-float\",\"38\":\"v-0be6faf8#_1-1-code-examples\",\"39\":\"v-0be6faf8#_2-strings-str\",\"40\":\"v-0be6faf8#_2-1-code-example\",\"41\":\"v-0be6faf8#_2-2-three-characteristics-of-strings\",\"42\":\"v-0be6faf8#_3-lists-list\",\"43\":\"v-0be6faf8#_3-1-code-example\",\"44\":\"v-0be6faf8#_3-2-three-characteristics-of-lists\",\"45\":\"v-0be6faf8#_4-tuples-tuple\",\"46\":\"v-0be6faf8#_4-1-code-example\",\"47\":\"v-0be6faf8#_4-2-three-characteristics-of-tuples\",\"48\":\"v-0be6faf8#_4-3-tuple-vs-list\",\"49\":\"v-0be6faf8#_5-dictionary-dict\",\"50\":\"v-0be6faf8#_5-1-code-example\",\"51\":\"v-0be6faf8#_5-2-characteristics-of-a-dictionary\",\"52\":\"v-0be6faf8#_6-set-set\",\"53\":\"v-0be6faf8#_6-1-code-example\",\"54\":\"v-0be6faf8#_6-2-characteristics-of-a-set\",\"55\":\"v-0be6faf8#_7-boolean-bool\",\"56\":\"v-0be6faf8#_7-1-code-example\",\"57\":\"v-0be6faf8@0\",\"58\":\"v-0be6faf8@1\",\"59\":\"v-1dcd066f\",\"60\":\"v-1dcd066f#_1-characteristics-of-numeric-types\",\"61\":\"v-1dcd066f#_2-arithmetic-operators\",\"62\":\"v-1dcd066f#_3-a-little-practice-numeric-transformation\",\"63\":\"v-1dcd066f#_4-comparison-operators-comparing-the-values\",\"64\":\"v-1dcd066f#_5-assignment-operators\",\"65\":\"v-1dcd066f#_7-3-1-sum-and-difference-of-numbers\",\"66\":\"v-1dcd066f#_7-3-2-multiplication-and-division-of-numbers\",\"67\":\"v-1dcd066f#_7-3-3-remainder-and-power-operation\",\"68\":\"v-1dcd066f#_7-3-4-comparison-operations\",\"69\":\"v-1dcd066f@0\",\"70\":\"v-1dcd066f@1\",\"71\":\"v-6ea29539\",\"72\":\"v-6ea29539#_1-definition-of-strings\",\"73\":\"v-6ea29539#_2-creating-strings\",\"74\":\"v-6ea29539#_3-string-length\",\"75\":\"v-6ea29539#_4-getting-characters-from-a-string\",\"76\":\"v-6ea29539#_4-1-getting-a-single-character\",\"77\":\"v-6ea29539#_4-2-getting-a-range-of-characters\",\"78\":\"v-6ea29539#_4-3-getting-multiple-discontinuous-characters\",\"79\":\"v-6ea29539#_4-4-optimization\",\"80\":\"v-6ea29539#_4-5-string-reversal\",\"81\":\"v-6ea29539#_5-string-built-in-methods\",\"82\":\"v-6ea29539#_5-1-upper\",\"83\":\"v-6ea29539#_5-2-lower\",\"84\":\"v-6ea29539#_5-3-capitalize\",\"85\":\"v-6ea29539#_5-4-title\",\"86\":\"v-6ea29539#_5-5-startswith\",\"87\":\"v-6ea29539#_5-6-endswith\",\"88\":\"v-6ea29539#_5-7-count\",\"89\":\"v-6ea29539#_5-8-find\",\"90\":\"v-6ea29539#_5-9-index\",\"91\":\"v-6ea29539#_5-10-isdigit\",\"92\":\"v-6ea29539#_5-11-isalpha\",\"93\":\"v-6ea29539#_5-13-isupper\",\"94\":\"v-6ea29539#_5-14-islower\",\"95\":\"v-6ea29539#_5-15-isspace\",\"96\":\"v-6ea29539#_5-16-strip\",\"97\":\"v-6ea29539#_5-17-lstrip\",\"98\":\"v-6ea29539#_5-18-rstrip\",\"99\":\"v-6ea29539#_5-19-replace\",\"100\":\"v-6ea29539#_5-20-split\",\"101\":\"v-6ea29539#_5-21-rsplit\",\"102\":\"v-6ea29539#_5-22-join\",\"103\":\"v-6ea29539#_6-string-formatting\",\"104\":\"v-6ea29539#_6-1-format\",\"105\":\"v-6ea29539#_6-2-f\",\"106\":\"v-6ea29539#_6-3-formatting\",\"107\":\"v-6ea29539#_6-4-f-and-format-advantages-and-disadvantages\",\"108\":\"v-6ea29539#_7-immutability-of-strings\",\"109\":\"v-6ea29539#_8-string-escaping\",\"110\":\"v-6ea29539#_9-string-concatenation\",\"111\":\"v-6ea29539#_10-reading-user-input\",\"112\":\"v-6ea29539#_10-1-input-basic-usage\",\"113\":\"v-6ea29539#_10-2-input-input-prompt\",\"114\":\"v-6ea29539#_10-3-input-characteristics\",\"115\":\"v-6ea29539#_10-3-1-input-type-is-string-str\",\"116\":\"v-6ea29539#_10-3-2-method-one-forced-type-conversion\",\"117\":\"v-6ea29539#_10-3-3-method-two-use-eval\",\"118\":\"v-6ea29539#_11-trying-out\",\"119\":\"v-6ea29539@0\",\"120\":\"v-6ea29539@1\",\"121\":\"v-317387cd\",\"122\":\"v-317387cd#_1-list-structure\",\"123\":\"v-317387cd#_2-accessing-elements-in-a-list\",\"124\":\"v-317387cd#_2-1-composition-of-list-indices\",\"125\":\"v-317387cd#_2-2-extracting-a-single-element\",\"126\":\"v-317387cd#_2-3-getting-a-range-of-elements-in-a-list\",\"127\":\"v-317387cd#_2-4-getting-elements-with-a-specific-interval-in-a-list\",\"128\":\"v-317387cd#_3-list-slicing-assignment\",\"129\":\"v-317387cd#_4-trying-it-out\",\"130\":\"v-317387cd#_5-inserting-elements-at-a-specific-position-insert-index-element\",\"131\":\"v-317387cd#_6-list-length\",\"132\":\"v-317387cd#_7-modifying-elements-in-a-list\",\"133\":\"v-317387cd#_8-adding-elements-to-a-list\",\"134\":\"v-317387cd#_8-1-adding-a-single-element-append\",\"135\":\"v-317387cd#_8-2-adding-multiple-elements\",\"136\":\"v-317387cd#_9-deleting-elements-from-a-list\",\"137\":\"v-317387cd#_9-1-del\",\"138\":\"v-317387cd#_9-2-pop\",\"139\":\"v-317387cd#_9-3-remove\",\"140\":\"v-317387cd#_10-combining-two-lists\",\"141\":\"v-317387cd#_11-checking-if-an-element-exists-in-a-list-value-in-sequence\",\"142\":\"v-317387cd#_12-getting-the-repeat-count-of-an-element-in-a-list-count\",\"143\":\"v-317387cd#_13-get-the-first-occurrence-position-of-an-element-in-a-list-index\",\"144\":\"v-317387cd#_14-sorting-a-list\",\"145\":\"v-317387cd#_14-1-sort-reverse-false\",\"146\":\"v-317387cd#_14-2-sorted-list-reverse-false\",\"147\":\"v-317387cd@0\",\"148\":\"v-317387cd@1\",\"149\":\"v-15fe50de\",\"150\":\"v-15fe50de#_1-creating-a-tuple\",\"151\":\"v-15fe50de#_2-comparing-lists-and-tuples\",\"152\":\"v-15fe50de#_3-immutability-of-tuples\",\"153\":\"v-15fe50de#_4-indexing-and-slicing-tuples\",\"154\":\"v-15fe50de#_5-tuple-characteristics\",\"155\":\"v-15fe50de#_6-concatenating-tuples\",\"156\":\"v-15fe50de#_7-sorting-tuples\",\"157\":\"v-15fe50de#_7-1-using-basic-knowledge\",\"158\":\"v-15fe50de#_7-2-using-sorted\",\"159\":\"v-15fe50de#_8-using-zip\",\"160\":\"v-15fe50de#_8-1-introduction\",\"161\":\"v-15fe50de@0\",\"162\":\"v-15fe50de@1\",\"163\":\"v-6ab5c137\",\"164\":\"v-6ab5c137#_1-how-to-create-a-phone-book\",\"165\":\"v-6ab5c137#_2-dictionary-structure\",\"166\":\"v-6ab5c137#_3-dictionary-key-value\",\"167\":\"v-6ab5c137#_4-creating-a-dictionary-using-the-dict-function\",\"168\":\"v-6ab5c137#_5-accessing-dictionary-data\",\"169\":\"v-6ab5c137#_5-1-using-square-brackets\",\"170\":\"v-6ab5c137#_5-2-issue-with-the-above-extraction-method\",\"171\":\"v-6ab5c137#_5-3-using-get-to-solve\",\"172\":\"v-6ab5c137#_6-updating-dictionary-data\",\"173\":\"v-6ab5c137#_7-deleting-dictionary-data\",\"174\":\"v-6ab5c137#_8-dictionary-structure-nesting-dictionaries\",\"175\":\"v-6ab5c137#_8-1-dictionary-in-a-list\",\"176\":\"v-6ab5c137#_8-2-storing-a-list-in-a-dictionary\",\"177\":\"v-6ab5c137#_8-3-storing-a-dictionary-in-a-dictionary\",\"178\":\"v-6ab5c137#_9-common-dictionary-methods\",\"179\":\"v-6ab5c137#_9-1-pop-key\",\"180\":\"v-6ab5c137#_9-2-keys\",\"181\":\"v-6ab5c137#_9-3-values\",\"182\":\"v-6ab5c137#_9-4-items\",\"183\":\"v-6ab5c137#_9-5-in\",\"184\":\"v-6ab5c137@0\",\"185\":\"v-6ab5c137@1\",\"186\":\"v-749e1e02\",\"187\":\"v-749e1e02#_1-creating-a-set\",\"188\":\"v-749e1e02#_2-set-intersection\",\"189\":\"v-749e1e02#_3-set-union\",\"190\":\"v-749e1e02#_4-set-difference\",\"191\":\"v-749e1e02#_5-set-symmetric-difference\",\"192\":\"v-749e1e02#_6-reflection\",\"193\":\"v-749e1e02#_7-add-adding-elements-to-a-set\",\"194\":\"v-749e1e02@0\",\"195\":\"v-749e1e02@1\",\"196\":\"v-48615805\",\"197\":\"v-48615805#_1-boolean-values\",\"198\":\"v-48615805#_2-logical-operators\",\"199\":\"v-48615805#_3-expression-application-—-conditional-testing\",\"200\":\"v-48615805#_3-1-multiple-conditions-checking\",\"201\":\"v-48615805@0\",\"202\":\"v-48615805@1\",\"203\":\"v-2a197548\",\"204\":\"v-2a197548@0\",\"205\":\"v-2a197548@1\",\"206\":\"v-86530824\",\"207\":\"v-86530824#submission-instructions\",\"208\":\"v-86530824#question-01-hello-you\",\"209\":\"v-86530824#question-02-some-have-gone-and-some-remain\",\"210\":\"v-86530824#question-03-penny-pinching\",\"211\":\"v-86530824#question-04-mad-as-a-hatter-thin-as-a-dime\",\"212\":\"v-86530824#question-05-bmi-calculator\",\"213\":\"v-86530824#part-a\",\"214\":\"v-86530824#part-b\",\"215\":\"v-86530824#question-06-don-t-believe-the-gacha\",\"216\":\"v-86530824#question-07-collective-timetables\",\"217\":\"v-86530824@0\",\"218\":\"v-86530824@1\",\"219\":\"v-12140137\",\"220\":\"v-71f414cc\",\"221\":\"v-fc67f334\",\"222\":\"v-3389deea\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,16],\"1\":[2,78],\"2\":[3],\"3\":[2],\"4\":[2],\"5\":[7],\"6\":[5],\"7\":[2],\"8\":[2],\"9\":[2],\"10\":[2],\"11\":[2],\"12\":[null,null,2],\"13\":[null,null,2],\"14\":[4],\"15\":[6],\"16\":[null,null,1],\"17\":[null,null,2],\"18\":[1],\"19\":[6],\"20\":[3,6],\"21\":[5,107],\"22\":[7,80],\"23\":[3],\"24\":[7,39],\"25\":[10,12],\"26\":[8],\"27\":[9,14],\"28\":[4],\"29\":[10,8],\"30\":[9,10],\"31\":[5,83],\"32\":[2,155],\"33\":[null,null,1],\"34\":[null,null,2],\"35\":[2],\"36\":[2,2],\"37\":[6],\"38\":[3,21],\"39\":[4],\"40\":[4,18],\"41\":[5,56],\"42\":[4],\"43\":[4,26],\"44\":[6,60],\"45\":[4],\"46\":[4,26],\"47\":[6,52],\"48\":[5,168],\"49\":[4],\"50\":[4,26],\"51\":[6,61],\"52\":[4],\"53\":[4,22],\"54\":[6,110],\"55\":[4],\"56\":[4,11],\"57\":[null,null,1],\"58\":[null,null,2],\"59\":[2],\"60\":[5,37],\"61\":[3,36],\"62\":[6,82],\"63\":[6,41],\"64\":[3,34],\"65\":[9,37],\"66\":[8,35],\"67\":[6,54],\"68\":[5,45],\"69\":[null,null,1],\"70\":[null,null,2],\"71\":[1],\"72\":[4,14],\"73\":[3,124],\"74\":[3,24],\"75\":[6],\"76\":[6,16],\"77\":[7,36],\"78\":[6,36],\"79\":[2,29],\"80\":[4,78],\"81\":[5],\"82\":[4,13],\"83\":[4,13],\"84\":[4,13],\"85\":[4,22],\"86\":[3,23],\"87\":[4,26],\"88\":[4,28],\"89\":[4,36],\"90\":[4,35],\"91\":[4,23],\"92\":[4,45],\"93\":[4,19],\"94\":[4,19],\"95\":[4,21],\"96\":[4,39],\"97\":[4,20],\"98\":[4,20],\"99\":[4,32],\"100\":[4,47],\"101\":[4,41],\"102\":[4,28],\"103\":[3,79],\"104\":[4,53],\"105\":[3,37],\"106\":[3,44],\"107\":[7,29],\"108\":[4,70],\"109\":[3,70],\"110\":[3,35],\"111\":[4],\"112\":[5,11],\"113\":[5,48],\"114\":[4],\"115\":[9,43],\"116\":[8,48],\"117\":[7,148],\"118\":[3,27],\"119\":[null,null,1],\"120\":[null,null,2],\"121\":[1],\"122\":[3,56],\"123\":[6],\"124\":[6,12],\"125\":[5,22],\"126\":[9,31],\"127\":[10,37],\"128\":[4,40],\"129\":[4,33],\"130\":[11,51],\"131\":[3,19],\"132\":[6,77],\"133\":[6],\"134\":[8,30],\"135\":[5,15],\"136\":[6],\"137\":[3,55],\"138\":[4,36],\"139\":[4,41],\"140\":[4,20],\"141\":[11,16],\"142\":[13,11],\"143\":[14,28],\"144\":[4],\"145\":[5,27],\"146\":[6,28],\"147\":[null,null,1],\"148\":[null,null,2],\"149\":[1],\"150\":[4,21],\"151\":[5,28],\"152\":[4,43],\"153\":[5,11],\"154\":[3,33],\"155\":[3,23],\"156\":[3],\"157\":[5,37],\"158\":[5,34],\"159\":[4],\"160\":[3,83],\"161\":[null,null,1],\"162\":[null,null,2],\"163\":[1],\"164\":[7,89],\"165\":[3,35],\"166\":[4,66],\"167\":[8,134],\"168\":[4],\"169\":[5,18],\"170\":[8,52],\"171\":[6,74],\"172\":[4,31],\"173\":[4,59],\"174\":[5,16],\"175\":[6,51],\"176\":[7,16],\"177\":[6,19],\"178\":[4],\"179\":[5,18],\"180\":[4,19],\"181\":[4,19],\"182\":[4,24],\"183\":[3,29],\"184\":[null,null,1],\"185\":[null,null,2],\"186\":[1],\"187\":[4,19],\"188\":[3,26],\"189\":[3,28],\"190\":[3,30],\"191\":[4,45],\"192\":[2,32],\"193\":[7,16],\"194\":[null,null,1],\"195\":[null,null,2],\"196\":[1],\"197\":[3,33],\"198\":[3,78],\"199\":[5,18],\"200\":[5,21],\"201\":[null,null,1],\"202\":[null,null,2],\"203\":[1],\"204\":[null,null,1],\"205\":[null,null,2],\"206\":[2],\"207\":[2,89],\"208\":[5,58],\"209\":[7,113],\"210\":[4,53],\"211\":[8,69],\"212\":[4,43],\"213\":[3,33],\"214\":[3,57],\"215\":[7,97],\"216\":[4,59],\"217\":[null,null,1],\"218\":[null,null,2],\"219\":[2],\"220\":[1],\"221\":[2],\"222\":[1]},\"averageFieldLength\":[4.503814980048335,42.75508571489073,0.6288601179914232],\"storedFields\":{\"0\":{\"h\":\"Intro Page\",\"t\":[\"Student of Cambridge University, Engineering\",\"“Hinc lucem et pocula sacra.”\",\"From here the journey starts.\"]},\"1\":{\"h\":\"Typora guide\",\"t\":[\"Do not use Chinese characters for file names.\",\"Use hyphens instead of spaces.\",\"Start the first line of the article with three dashes ---.\",\"Headings should be formatted with two or three hash symbols followed by a space. Headings range from level 2 to level 6, excluding the article title.\",\"Begin and end an extended section with three colons ::: and md-demo.\",\"Use triple backticks with the language identifier to input code:\",\"print(\\\"hello bornforthis\\\") \",\"To insert an image, copy-paste it, and it will automatically generate a folder named assets.\",\"Create links using the format [link name](link).\"]},\"2\":{\"h\":\"1. Article Title\"},\"3\":{\"h\":\"2. Code\"},\"4\":{\"h\":\"3. Image\"},\"5\":{\"h\":\"4. Ordered and Unordered Headings, Task List\"},\"6\":{\"h\":\"5. Information Box/Tip Container\"},\"7\":{\"h\":\"6. Links\"},\"8\":{\"h\":\"7. Underline\"},\"9\":{\"h\":\"8. Alignment\"},\"10\":{\"h\":\"9. Formulas\"},\"11\":{\"h\":\"10. Multimedia\"},\"12\":{\"c\":[\"Web design\"]},\"13\":{\"c\":[\"web\",\"typora\"]},\"14\":{\"h\":\"CUEA mentoring session 1\"},\"15\":{\"h\":\"Session 1 – Introduction (Dec. 22nd)\"},\"16\":{\"c\":[\"Python\"]},\"17\":{\"c\":[\"web\",\"typora\"]},\"18\":{\"h\":\"Variables\"},\"19\":{\"h\":\"1. Understanding Variables — Examples from Life\"},\"20\":{\"h\":\"1.1 Literal Understanding\",\"t\":[\"变 (Biàn): Change\",\"量 (Liàng): Size\"]},\"21\":{\"h\":\"1.2 An Example 🌰\",\"t\":[\"Imagine you are the class monitor and you need to track the monthly exam scores of each student in the class. Each month, there's a sheet of paper with scores listed for each student, such as:\",\"Li Lei 98 points\",\"Ma Dongmei 89 points\",\"Liu Yitong 96 points\",\"......\",\"One day, the teacher asks to see Liu Yitong's scores for January, February, and March. As the class monitor, what do you do? — You can't just give the teacher all the monthly exam sheets; that would be inappropriate.\",\"You should copy Liu Yitong's scores for January, February, and March onto a separate sheet of paper and then give it to the teacher.\",\"So, why not initially assign an envelope (or a file) for each student? The envelope starts flat, and when we put things (data) into it, does it not expand? — Does it not change? Does it not have size? Clearly, it does.\",\"So, an envelope is like a variable that allocates space in the computer's memory to store data.\",\"Characteristics: The value of a variable can be overwritten, remembering only the last value.\"]},\"22\":{\"h\":\"2. How to Create Variables — Assignment Statements\",\"t\":[\"Variable: Represents or references a value using a variable name.\",\"Nuwa molded a clay figurine, which had no life. Then Nuwa waved a willow branch, giving life to the clay figurine. Now, the clay figurine represents Nuwa's descendant. \\\"Variable: clay figurine, Value: Nuwa.\\\"\",\"Members of the National People's Congress are elected by the masses through voting. They represent the will of the vast majority of the people. So, they can say, \\\"I represent the will of the masses.\\\" \\\"Variable: NPC representative, Value: the people.\\\"\",\"Initializing Assignment Statement: Variable Name = Expression\",\"Variable Name: This is the space; we call it by a name.\",\"Expression: Similar to a mathematical expression.\",\"Program logic: From top to bottom, from right to left, and finally, assignment.\"]},\"23\":{\"h\":\"3. Exploring print\"},\"24\":{\"h\":\"3.1 Printing Multiple Data at Once\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c) # ---output--- 1 2 3 \",\"From the output, it can be seen that print outputs multiple variables simultaneously, with each value separated by a default space.\",\"Now, can we modify this default space? — The answer is obviously yes.\",\"Use sep.\"]},\"25\":{\"h\":\"3.2 Modifying the Separation of Multiple Variables Printed Simultaneously\",\"t\":[\"a = 1 b = 2 c = 3 print(a, b, c, sep=' interval ') # ---output--- 1 interval 2 interval 3 \"]},\"26\":{\"h\":\"3.3 Modifying end Changes the Output Ending Style\"},\"27\":{\"h\":\"3.4 end and sep Can Be Used Simultaneously\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep=\\\"~\\\", end=\\\" love Python\\\") # ---output--- 1~1~1 love Python \"]},\"28\":{\"h\":\"4. Advanced Assignment Methods\"},\"29\":{\"h\":\"4.1 Assigning the Same Value to Multiple Variables Simultaneously\",\"t\":[\"a = b = c = 1 print(a, b, c) # ---output--- 1 1 1 \"]},\"30\":{\"h\":\"4.2 Assigning Different Values to Multiple Variables Simultaneously\",\"t\":[\"a, b, c = 1, 2, 3 print(a, b, c) # ---output--- 1 2 3 \"]},\"31\":{\"h\":\"5. Naming Rules for Variables\",\"t\":[\"A combination of uppercase and lowercase English letters, numbers, and _, and cannot start with a number.\",\"System keywords cannot be used as variable names. \\\"Get keyword list: help('keywords')\",\"Variable names are case-sensitive in Python.\",\"Variable names cannot contain spaces, but underscores can be used to separate words.\",\"Avoid using Python's built-in function names as variables.\",\"Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not \"]},\"32\":{\"h\":\"6. Exercises\",\"t\":[\"In Python, variable names can start with a number.\",\"[ ] True\",\"[x] False\",\"In Python, which of the following variable names is valid?\",\"[ ] 2myVar\",\"[x] myVar2\",\"[ ] my-var\",\"[ ] my var\",\"In Python, variable names are case-sensitive.\",\"[x] True\",\"[ ] False\",\"In Python, my_var and myVar represent the same variable.\",\"[ ] True\",\"[x] False\",\"Variable names can be Python keywords.\",\"[ ] True\",\"[x] False\",\"None is a special type in Python, representing no value or an empty value.\",\"[x] True\",\"[ ] False\",\"Which of the following is a valid variable assignment in Python?\",\"[ ] 123abc = \\\"hello\\\"\",\"[ ] for = \\\"world\\\"\",\"[x] _hidden = \\\"secret\\\"\",\"[ ] import = 123\",\"In Python, a variable can be assigned multiple values simultaneously.\",\"[ ] True\",\"[x] False\",\"Which of the following is a multi-variable assignment in Python?\",\"[x] a, b, c = 1, 2, 3\",\"[ ] a = 1, b = 2, c = 3\",\"[ ] a; b; c = 1; 2; 3\",\"[ ] a = 1; b = 2; c = 3;\",\"A variable must be assigned before using it.\",\"[x] True\",\"[ ] False\",\"In Python, the type of a variable is static and cannot be changed once assigned.\",\"[ ] True\",\"[x] False\",\"Which represents a global variable in Python?\",\"[ ] var = \\\"hello\\\"\",\"[ ] global var ✅\",\"[x] var(global) ❌\",\"[ ] def var():\",\"Which represents deleting a variable in Python?\",\"[ ] delete x\",\"[ ] del x ✅\",\"[x] remove x ❌\",\"[ ] destroy x\",\"After x = 5, changing the value of y will also change the value of x.\",\"[ ] True\",\"[x] False\",\"After x = [1, 2, 3], changing the content of y will also change the content of x.\",\"[ ] True ✅\",\"[x] False ❌\",\"In Python, variables can only store values of basic data types, such as integers or strings.\",\"[ ] True\",\"[x] False\",\"Juice Exchange\",\"Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don't like to use each other's cups.\",\"There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother's cup with cola and the younger brother's cup with juice.\",\"Question: How do you swap the juice in the brothers' cups?\",\"en\",\"Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don't like to use each other's cups. There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother's cup with cola and the younger brother's cup with juice. How can you swap the juice in the brothers' cups?\",\"！！！\",\"Don’t use the following methods！！！\",\"Austin = \\\"Coke\\\" Jaden = \\\"juice\\\" print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) # 待补充代码 print(\\\"Austin\\\", Jaden) print(\\\"Jaden\\\", Austin) \",\"Create variables\",\"Output：\",\"Austin Jaden Alex Cava \",\"Output：\",\"Austin$Jaden$Alex$Cava% \"]},\"33\":{\"c\":[\"Python\"]},\"34\":{\"c\":[\"web\",\"typora\"]},\"35\":{\"h\":\"Data Types\"},\"36\":{\"h\":\"Data Types\",\"t\":[\"image-20231222204535588\"]},\"37\":{\"h\":\"1. Numeric Types [int, float]\"},\"38\":{\"h\":\"1.1 Code Examples\",\"t\":[\"Integer\",\"int_num = 1 t = type(int_num) # check data type print(int_num) print(\\\"int num type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output 1 int num type is:>>> <class 'int'> Directly check data type and print:>>> <class 'int'> \",\"Float\",\"float_num = 1.5 t = type(float_num) # check data type print(float_num) print(\\\"float num type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output 1.5 float num type is:>>> <class 'float'> Directly check data type and print:>>> <class 'float'> \"]},\"39\":{\"h\":\"2. Strings [str]\"},\"40\":{\"h\":\"2.1 Code Example\",\"t\":[\"string = \\\"Hello Alexa\\\" t = type(string) print(string) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output Hello Alexa string type is:>>> <class 'str'> Directly check data type and print:>>> <class 'str'> \"]},\"41\":{\"h\":\"2.2 Three Characteristics of Strings\",\"t\":[\"Orderliness \",\"From left to right, index starts from 0\",\"From right to left, index starts from -1\",\"Anything inside quotes is considered an index\",\"Immutability \",\"Strings cannot be changed after creation\",\"Note: Immutability means that during the execution of the code, strings cannot be modified, added, or deleted\",\"Any Character \",\"Any character that can be entered from the keyboard can be an element of a string\",\"Characters placed in a string become the type of the string, with each element referred to as a \\\"subcharacter\\\"\"]},\"42\":{\"h\":\"3. Lists [list]\"},\"43\":{\"h\":\"3.1 Code Example\",\"t\":[\"lst = [\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False] t = type(lst) print(lst) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output ['Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False] string type is:>>> <class 'list'> Directly check data type and print:>>> <class 'list'> \"]},\"44\":{\"h\":\"3.2 Three Characteristics of Lists\",\"t\":[\"Orderliness \",\"From left to right, index starts from 0\",\"From right to left, index starts from -1\",\"Each element in the list is counted \",\"For example: lst = [\\\"alexa\\\", 12]\",\"In the above list, there are two elements with indices: \",\"\\\"alexa\\\", from left to right 0, from right to left -1\",\"12, from left to right 1, from right to left -1\",\"Mutability: During the program's execution, lists can be \\\"added, changed, deleted\\\"\",\"Any Data Type: Any data type in Python can be an element of a list\",\"All Data Types Owned by Python \\\"Only Include Basic Data Types\\\"\",\"image-20231222204547540\"]},\"45\":{\"h\":\"4. Tuples [tuple]\"},\"46\":{\"h\":\"4.1 Code Example\",\"t\":[\"tup = (\\\"Hello Alexa\\\", 1, 1.1, (\\\"a\\\", \\\"b\\\", 1), [\\\"x\\\", 2], True, False) t = type(tup) print(tup) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output ('Hello Alexa', 1, 1.1, ('a', 'b', 1), ['x', 2], True, False) string type is:>>> <class 'tuple'> Directly check data type and print:>>> <class 'tuple'> \"]},\"47\":{\"h\":\"4.2 Three Characteristics of Tuples\",\"t\":[\"Orderliness \",\"From left to right, index starts from 0\",\"From right to left, index starts from -1\",\"Each element in the tuple is counted \",\"For example: tup = (“alexa”, 12)\",\"In the above tuple, there are two elements with indices: \",\"“alexa”, from left to right 0, from right to left -1\",\"12, from left to right 1, from right to left -1\",\"Immutability: During the program's execution, tuples cannot be \\\"added, changed, deleted\\\"\",\"Any Data Type: Any data type in Python can be an element of a tuple\"]},\"48\":{\"h\":\"4.3 Tuple vs List\",\"t\":[\"Why Choose a Tuple After Having a List?\",\"If the stored data or quantity is variable, such as a log function on a social platform that tracks which posts a user has viewed in a week, then a list is more suitable.\",\"If the stored data and quantity are constant, such as a system (software) that needs to return the latitude and longitude of a location and directly pass it to the user for viewing, then a tuple is definitely more suitable.\",\"Assumption\",\"Assumption 1: Now there is a warehouse, and you want to add items to the warehouse. The warehouse is large, and there may or may not be space available. In this case, do we need to hire a warehouse manager so that we can directly ask the warehouse manager if there is space (is there space/ memory)? The warehouse manager will tell you, and you can directly add your items. \",\"The question is, why does the warehouse manager know if there is space in the warehouse? — Because the warehouse manager will track the status of the warehouse all the time.\",\"Assumption\",\"2: Now there is a warehouse for atomic bombs. After the warehouse is created, only one atomic bomb can be stored. So, do we need to set up a special person to track the status of the atomic bomb warehouse? — No need, it is redundant. (Otherwise, the leader will run out of oil hahaha)\",\"Why?\",\"User logs 📔, will it always change (record 📝 which posts have been viewed)? Do we need a \\\"person\\\" similar to a warehouse manager to track and know if there is space (if there is space/ memory), and also know where to add it? — A list is more appropriate because lists are mutable. \\\"Mutable means: adding, deleting, modifying\\\" \",\"Why is a tuple not suitable? — Because every time you need to add data, you have to create a new tuple. (It's like: you create a warehouse for atomic bombs, it is just enough to store one, so when you want to store two, you can only create a new warehouse again.)\",\"Will the latitude and longitude change? Obviously not, so there is no need for an extra \\\"person\\\" to track the status. — Can a list be used? Yes, but it is unnecessary. \\\"Because we don't need a warehouse manager.\\\" Using a list is a bit wasteful of resources. The functionality of the tuple is just enough.\"]},\"49\":{\"h\":\"5. Dictionary [dict]\"},\"50\":{\"h\":\"5.1 Code Example\",\"t\":[\"d = {\\\"name\\\": \\\"alexa\\\", \\\"age\\\": 18, 1: \\\"int\\\", 1.1: 1, \\\"tup\\\": (1, 2, 3)} t = type(d) print(d) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output {'name': 'alexa', 'age': 18, 1: 'int', 1.1: 1, 'tup': (1, 2, 3)} string type is:>>> <class 'dict'> Directly check data type and print:>>> <class 'dict'> \"]},\"51\":{\"h\":\"5.2 Characteristics of a Dictionary\",\"t\":[\"Unordered (after Python 3.6+, it is ordered) \",\"Understand as unordered for now\",\"Some early basics may not be needed\",\"Composition of a Dictionary: Composed of a series of keys and values d = {\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\",\"Key: \",\"Only immutable data types can be used as keys\",\"For example: strings, numbers, booleans, tuples\",\"Value: Any data type, all data types owned by Python\",\"Mutability: Can add, delete, and change values corresponding to keys\"]},\"52\":{\"h\":\"6. Set [set]\"},\"53\":{\"h\":\"6.1 Code Example\",\"t\":[\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} t = type(set1) print(set1) print(\\\"string type is:>>>\\\", t) print(\\\"Directly check data type and print:>>>\\\", t) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} string type is:>>> <class 'set'> Directly check data type and print:>>> <class 'set'> \"]},\"54\":{\"h\":\"6.2 Characteristics of a Set\",\"t\":[\"Unordered: Sets have no order, meaning there is no index\",\"set1 = {1, 2, \\\"hello\\\", 1.1, (1, 2, 3), False} print(set1) # output {False, 1, 2, 1.1, (1, 2, 3), 'hello'} \",\"The order may change after running, and it might not be the same as the input order\",\"Warning\",\"If you run the set many times or one of the times, the order does not change, we still cannot say that the set is ordered. Why? You throw a die 500 times, and it is always 6. Can you say that throwing a die is a deterministic event? — Obviously not 🙅.\",\"Determinism: \",\"Every value in a set is determined, meaning \\\"immutable data types\\\" are needed\",\"For example: boolean, number, tuple, string\",\"For example: Why doesn't a list work? — Lists are mutable and have indeterminacy\",\"Uniqueness: Repeating values will not cause an error, and duplicates will be automatically removed\",\"set2 = {1, 1, 1, 2, 2, 3} print(set2) # output {1, 2, 3} \",\"Mutability: You can add and delete data in a set, but you cannot modify the output. \\\"Note: It is impossible to specify the index to delete an element\\\"\"]},\"55\":{\"h\":\"7. Boolean [bool]\"},\"56\":{\"h\":\"7.1 Code Example\",\"t\":[\"condition = True # False print(condition) print(type(condition)) # output True <class 'bool'> \"]},\"57\":{\"c\":[\"Python\"]},\"58\":{\"c\":[\"web\",\"typora\"]},\"59\":{\"h\":\"Numeric Type\"},\"60\":{\"h\":\"1. Characteristics of Numeric Types\",\"t\":[\"image-20231222232833034\",\"In [2]: 1+1 Out[2]: 2 In [3]: 1+1.0 Out[3]: 2.0 In [4]: 9-1 Out[4]: 8 In [5]: 9-1.0 Out[5]: 8.0 In [6]: 2*2 Out[6]: 4 In [7]: 2*2.0 Out[7]: 4.0 In [8]: 9/3 Out[8]: 3.0 In [9]: # If one of the numbers is float, the result will be float (highest priority) In [10]: # Division involves precision issues, so the result is a float \",\"Patterns\",\"If one of the numbers is a float, the result will be a float (highest priority).\",\"Division involves precision issues, so the result type is a float.\"]},\"61\":{\"h\":\"2. Arithmetic Operators\",\"t\":[\"Arithmetic Operators: Used for arithmetic calculations.\",\"Operator\",\"Description\",\"Example\",\"+\",\"Addition operator\",\"1 + 1 = 2\",\"-\",\"Subtraction operator\",\"2 - 1 = 1\",\"*\",\"Multiplication operator\",\"2 * 3 = 6\",\"/\",\"Division operator\",\"9 / 3 = 3.0\",\"**\",\"Exponentiation operator\",\"2 ** 3 = 8\",\"%\",\"Modulus operator, calculates remainder\",\"9 % 2 = 1\",\"//\",\"Floor division operator, calculates quotient and removes decimal part\",\"9 // 2 = 4\",\"Note: 9 / 2 = 4......1\"]},\"62\":{\"h\":\"3. A Little Practice: Numeric Transformation\",\"t\":[\"Suppose you have a two-digit integer, and you need to generate two new numbers based on the following rules:\",\"The first new number is the sum of the individual digits of the original number.\",\"The second new number is the reversal of the original number (e.g., if the original number is 21, the reversed number is 12).\",\"Write Python code to implement the above requirements.\",\"a = 12 a0 = a // 10 a1 = a % 10 b = a0 + a1 c = 10 * a1 + a0 print(b, c) # output 3 21 \",\"Input:\",\"An integer num (10 ≤ num ≤ 99)\",\"Output:\",\"Two integers or an error message string.\",\"Example:\",\"Suppose the input number num is 91, then your code should output two numbers: 10 (sum of 9 and 1) and 19 (reversed form of 91).\",\"Suppose the input number num is 26, then your code should output two numbers: 8 (sum of 2 and 6) and 62 (reversed form of 26).\",\"Suppose the input number num is 18, then your code should output two numbers: 9 (sum of 1 and 8) and 81 (reversed form of 18).\"]},\"63\":{\"h\":\"4. Comparison Operators: Comparing the Values\",\"t\":[\"Operator\",\"Description\",\"Example\",\">\",\"Checks if the first operand is greater than the second\",\"print(1 > 2)\",\"<\",\"Checks if the first operand is less than the second\",\"print(1 < 2)\",\">=\",\"Checks if the first operand is greater than or equal to the second\",\"print(3 >= 3)\",\"<=\",\"Checks if the first operand is less than or equal to the second\",\"print(3 <= 4)\",\"==\",\"Checks if the two operands are equal\",\"print(2 == 2)\",\"!=\",\"Checks if the two operands are not equal\",\"print(2 != 1)\",\"Try the examples above and see the results?\",\"print(1 > 2) print(1 < 2) print(3 >= 3) print(3 <= 4) print(2 == 2) print(2 != 1) # output False True True True True True \"]},\"64\":{\"h\":\"5. Assignment Operators\",\"t\":[\"Operator\",\"Description\",\"Example\",\"=\",\"Assigns the value on the right to the variable on the left\",\"a = 1\",\"+=\",\"a += b is equivalent to a = a + b\",\"a += 10\",\"-=\",\"a -= b is equivalent to `a\",\"= a - b |a -= 10 | |*= |a *= bis equivalent toa = a * b |a *= 10 | |/= |a /= bis equivalent toa = a / b |a /= 10 | |**= |a **= bis equivalent toa = a ** b |a **= 10 | |//= |a //= bis equivalent toa = a // b |a //= 10` |\",\"a = 1 a += 10 a -= 10 a *= 10 a /= 10 a **= 10 a //= 10 print(a) # output 0.0 # Division results in a float \"]},\"65\":{\"h\":\"7.3.1 Sum and Difference of Numbers:\",\"t\":[\"Write a Python code snippet that creates two numbers a and b, calculates and prints their sum and the result of subtracting a from b.\",\"Code Template\",\"a = 10 b = 5 Sum = a + b Difference = a - b print(Sum, Difference) # Test assert Sum == a + b assert Difference == a - b \",\"Output Example:\",\"Sum: 8 Difference: 2 \"]},\"66\":{\"h\":\"7.3.2 Multiplication and Division of Numbers\",\"t\":[\"Write a Python code snippet that creates two numbers x and y, calculates and prints their product and division result.\",\"Code Template\",\"x = 10 y = 5 product = x * y division = x / y print(product, division) # Test assert product == x * y assert division == x / y \",\"Output Example:\",\"Product: 12 Division: 3.0 \"]},\"67\":{\"h\":\"7.3.3 Remainder and Power Operation\",\"t\":[\"Write a Python code snippet that creates two numbers m and n, calculates and prints the remainder of m divided by n and m raised to the power of n.\",\"Code Template\",\"m = 10 n = 5 floor_div = m // n power = m ** n print(floor_div, power) # Test assert remainder == m % n assert power == m ** n \",\"**Output Example:\",\"Sure, here's the translation of the provided text into English in Markdown format:\",\"**Code Exercise: Comparisons** ```python Remainder: 1 Power: 81 \"]},\"68\":{\"h\":\"7.3.4 Comparison Operations\",\"t\":[\"Write a Python code snippet that takes two numbers p and q as input, compares their sizes, and prints the corresponding result (greater than, less than, equal to).\",\"Code Template\",\"p = 10 q = 5 if p > q: print(p, \\\" is greater than \\\", q) elif p < q: print(p, \\\" is less than \\\", q) else: print(p, \\\" is equal to \\\", q) if ______: print(f\\\"{p} is greater than {q}\\\") assert p > q elif ______: print(f\\\"{p} is less than {q}\\\") assert p < q else: print(f\\\"{p} is equal to {q}\\\") assert p == q \",\"Output Example:\",\"4 is less than 5 \"]},\"69\":{\"c\":[\"Python\"]},\"70\":{\"c\":[\"web\",\"typora\"]},\"71\":{\"h\":\"Strings\"},\"72\":{\"h\":\"1. Definition of Strings\",\"t\":[\"A string is a sequence composed of letters, numbers, and special characters.\",\"image-20231222232933858\"]},\"73\":{\"h\":\"2. Creating Strings\",\"t\":[\"— Using single quotes, double quotes, or triple quotes.\",\"name = \\\"alexa\\\" number = '18' paragraph = '''Hello, I'm Alexa ''' para = \\\"\\\"\\\"Hello Alexa \\\"\\\"\\\" \",\"Mixing single and double quotes, so you may need to accept different types of quotes, otherwise, you cannot fully encapsulate the string content.\",\"string = 'I'm Alexa # wrong string = \\\"I'm Alexa\\\" # correct \",\"What about triple quotes?\",\"Let's say we need to store the following text in Python code:\",\"We sometimes need to not only look at the answers within the options but also think about the answers outside the options. — AI Yuechuang Shallow ones see shallow, deep ones see deep. — Huang Jiabao The earliest risers are idealists, the fastest runners are scammers, and the bravest are adventurers who are afraid of missing everything and rushing in are leeks. And the real success, may not have entered yet. Implement the function first, then optimize, otherwise, everything will be chaotic. — AI Yuechuang Anything you can't write clearly is something you haven't really understood. \",\"How do we implement this in Python code as a string?\",\"Triple quotes can also be used for comments\",\"image-20231222233001673\"]},\"74\":{\"h\":\"3. String Length\",\"t\":[\"Use len(): Returns the length or number of characters in the string, starting from one, including spaces.\",\"para = \\\"Hello, alexa\\\" print(len(para)) # Output 12 \"]},\"75\":{\"h\":\"4. Getting Characters from a String\"},\"76\":{\"h\":\"4.1 Getting a Single Character\",\"t\":[\"para = \\\"Hello, alexa\\\" print(para[2]) # Selecting the 3rd character print(para[0]) # Selecting the 1st character print(para[-1]) # Selecting the last character print(para[len(para)-1]) # Selecting the last character \"]},\"77\":{\"h\":\"4.2 Getting a Range of Characters\",\"t\":[\"Use slicing interval (left-closed right-open) string[start: end]\",\"\\\"\\\"\\\"Syntax: string = \\\"bornforthis\\\" select = string[start: end] PS: Remember to +1 for end\\\"\\\"\\\" para = \\\"Hello, alexa\\\" print(para[2:6]) # Selecting the 3rd to the 6th character (not including the 7th) # Output llo, \"]},\"78\":{\"h\":\"4.3 Getting Multiple Discontinuous Characters\",\"t\":[\"Use slicing interval string[start: end: sep]\",\"\\\"\\\"\\\" Syntax: string = \\\"0123456789\\\" select = string[start: end: sep] *sep= how many steps to the next number* PS: Remember to +1 for end \\\"\\\"\\\" string = \\\"0123456789\\\" # Get characters 02468 select = string[0: len(string): 2] print(select) # Get characters 13579 select = string[1: len(string): 2] print(select) string = \\\"bornforthis\\\" # Get characters ofts select = string[1: len(string): 3] print(select) \"]},\"79\":{\"h\":\"4.4 Optimization\",\"t\":[\"If we want to extract characters from the beginning to the end, we can omit the start and/or end, leaving them blank.\",\"string = \\\"0123456789\\\" # Get characters 02468 select = string[:: 2] print(select) # Get characters 13579 select = string[1:: 2] print(select) \"]},\"80\":{\"h\":\"4.5 String Reversal\",\"t\":[\"The third position of the string controls the direction of character extraction. The default is 1 for positive, and if we change it to -1, it will be reversed.\",\"Warning\",\"Positive and negative control direction, number size controls step size.\",\"string = \\\"bornforthis\\\" select = string[:: -1] print(select) # Output sihtrofnrob \",\"What does the ellipsis omit?\",\"select = string[0:11: -1] print(select) # Output No result \",\"If you use a positive index, starting from 0, going to -1 has no value, not satisfied.\",\"image-20231222233023698\",\"If you directly use a positive index to swap positions, the last one is 0, and it will be omitted:\",\"select = string[len(string):0: -1] print(select) # Output sihtrofnro # Missing \\\"b\\\" \",\"So it should be reversed from -1 to the last one:\",\"image-20231222233037523\",\"select = string[-1:-1*len(string)-1: -1] print(select) \",\"# Get rofn select = string[-5:-9: -1] print(select) \"]},\"81\":{\"h\":\"5. String Built-in Methods\"},\"82\":{\"h\":\"5.1 .upper()\",\"t\":[\"Converts the entire string to uppercase.\",\"string = \\\"bornforthis\\\" print(string.upper()) # Output BORNFORTHIS \"]},\"83\":{\"h\":\"5.2 .lower()\",\"t\":[\"Converts the entire string to lowercase.\",\"string = \\\"BORNFORTHIS\\\" print(string.lower()) # Output bornforthis \"]},\"84\":{\"h\":\"5.3 .capitalize()\",\"t\":[\"Capitalizes the first letter of the string.\",\"string = \\\"BORNFORTHIS\\\" print(string.capitalize()) # Output Bornforthis \"]},\"85\":{\"h\":\"5.4 .title()\",\"t\":[\"Capitalizes the first letter of each word, creating a title format.\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.title()) # Output Bornforthis To-Aiyc \"]},\"86\":{\"h\":\"5.5 .startswith()\",\"t\":[\"Checks if the string starts with a specific content, returns True or False.\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"b\\\")) # Output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.startswith(\\\"BO\\\")) # Output True \"]},\"87\":{\"h\":\"5.6 .endswith()\",\"t\":[\"Checks if the string ends with a specific character or word, returns a boolean value.\",\"string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"BO\\\")) # Output False string = \\\"BORNFORTHIS to-aiyc\\\" print(string.endswith(\\\"yc\\\")) # Output True \"]},\"88\":{\"h\":\"5.7 .count()\",\"t\":[\"Counts the number of times a specific character or word appears in the target string.\",\"string = \\\"BORNFORTHIS to-aiyc bornforthis\\\" print(string.count(\\\"i\\\")) # Output 2 # Case-sensitive string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.count(\\\"for\\\")) # Output 2 \"]},\"89\":{\"h\":\"5.8 .find()\",\"t\":[\"Finds the index of the first occurrence of a specific character or word in the string. If searching for a word, find() returns the index of the first character of the target word. If the character or word is not found, it returns -1.\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"for\\\")) # Output 12 # Returns the index of the first occurrence string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"R\\\")) # Output 2 string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.find(\\\"k\\\")) # Output -1 \"]},\"90\":{\"h\":\"5.9 .index()\",\"t\":[\"Finds the index of the first occurrence of a specific character or word in the string. If searching for a word, index() returns the index of the first character of the target word. If the character or word is not found, it raises an error.\",\"string = \\\"BORNFORTHIS for-aiyc bornforthis\\\" print(string.index(\\\"k\\\")) # Output ValueError: substring not found \"]},\"91\":{\"h\":\"5.10 .isdigit()\",\"t\":[\"Checks if the string is a pure numeric string. Returns False if any character in the string is not a number.\",\"string = \\\"01234567\\\" print(string.isdigit()) # Output True string = \\\"01234567o\\\" print(string.isdigit()) # Output False \"]},\"92\":{\"h\":\"5.11 .isalpha()\",\"t\":[\"Checks if the string is a pure alphabetical string. Returns False if any character in the string is not a letter.\",\"string = \\\"abcdefg\\\" print(string.isalpha()) # Output True string = \\\"abcdefg0\\\" print(string.isalpha()) # Output False \",\"Sure, here is the translation of the provided Markdown content to English:\",\"## 5.12 .isalnum() Checks whether the string consists of alphanumeric characters only. Returns False if the string contains any non-alphanumeric elements. ```python string = \\\"abcdefg0\\\" print(string.isalnum()) # output True string = \\\"abcdefg0!\\\" print(string.isalnum()) # output False \"]},\"93\":{\"h\":\"5.13 .isupper()\",\"t\":[\"Checks if all the letters in the string are uppercase. Returns True if all uppercase, otherwise False.\",\"string = \\\"abcdefg0!\\\" print(string.isupper()) # output False \"]},\"94\":{\"h\":\"5.14 .islower()\",\"t\":[\"Checks if all the letters in the string are lowercase. Returns True if all lowercase, otherwise False.\",\"string = \\\"abcdefg0!\\\" print(string.islower()) # output True \"]},\"95\":{\"h\":\"5.15 .isspace()\",\"t\":[\"Checks if the string consists of only whitespace characters. Returns True for pure whitespace, otherwise False.\",\"string = \\\"abcdefg0!\\\" print(string.isspace()) # output False string = \\\" \\\" print(string.isspace()) # output True \"]},\"96\":{\"h\":\"5.16 .strip()\",\"t\":[\"By default, removes leading and trailing whitespace characters from the target string. If specified, it can also remove specified characters.\",\"string = \\\" bornforthis \\\" print(string.strip()) # Removes leading and trailing spaces # output bornforthis string = \\\"---bornforthis---\\\" print(string.strip(\\\"-\\\")) # Removes leading and trailing hyphens # output bornforthis string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"-\\\")) # Removes consecutive hyphens only from both ends until a different character is encountered # output -bornforthis-- string = \\\"-- -bornforthis-- -\\\" print(string.strip(\\\"- \\\")) # Removes all hyphens and spaces from both ends simultaneously # output bornforthis \"]},\"97\":{\"h\":\"5.17 .lstrip()\",\"t\":[\"By default, removes leading whitespace characters from the string. If specified, it can remove specified leading characters.\",\"string = \\\"-- -bornforthis-- -\\\" print(string.lstrip(\\\"- \\\")) # output bornforthis-- - \"]},\"98\":{\"h\":\"5.18 .rstrip()\",\"t\":[\"By default, removes trailing whitespace characters from the string. If specified, it can remove specified trailing characters.\",\"string = \\\"-- -bornforthis-- -\\\" print(string.rstrip(\\\"- \\\")) # output -- -bornforthis \"]},\"99\":{\"h\":\"5.19 .replace()\",\"t\":[\".replace(old, new, count) replaces occurrences of the \\\"old\\\" character with the \\\"new\\\" character. The count parameter controls the number of replacements.\",\"string = \\\"-- -bornforthis-- -\\\" string1 = string.replace(\\\" \\\",\\\"*\\\") # Replaces all spaces with * string2 = string.replace(\\\"-\\\", \\\"!\\\", 3) # Replaces the first three hyphens with ! print(string, string1, string2, sep=\\\"\\\\n\\\") # output -- -bornforthis-- - --**-bornforthis--*- !! !bornforthis-- - \"]},\"100\":{\"h\":\"5.20 .split()\",\"t\":[\".split(sep, maxsplit) splits the string using a specific character, default is space. If the \\\"sep\\\" parameter is provided, it splits using that character and returns a list. The maxsplit parameter controls how many splits to perform, default is to split from the left.\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.split() lst2 = string.split(\\\"o\\\") lst3 = string.split(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am b', 'rnf', 'rthis b', 'rnforthis'] \"]},\"101\":{\"h\":\"5.21 .rsplit()\",\"t\":[\".rsplit(sep, maxsplit) splits the string from the right, using a specific character if provided. Returns a list. The maxsplit parameter controls how many splits to perform.\",\"string = \\\"i am bornforthis bornforthis\\\" lst1 = string.rsplit() lst2 = string.rsplit(\\\"o\\\") lst3 = string.rsplit(\\\"o\\\", 3) print(string, lst1, lst2, lst3, sep=\\\"\\\\n\\\") # output i am bornforthis bornforthis ['i', 'am', 'bornforthis', 'bornforthis'] ['i am b', 'rnf', 'rthis b', 'rnf', 'rthis'] ['i am bornf', 'rthis b', 'rnf', 'rthis'] \"]},\"102\":{\"h\":\"5.22 .join()\",\"t\":[\"Joins the characters of a string with a specific separator. “sep”.join(string)\",\"string = \\\"i am bornforthis \\\" string_joined = \\\"-\\\".join(string) print(string_joined) # output i- -a-m- -b-o-r-n-f-o-r-t-h-i-s- \"]},\"103\":{\"h\":\"6. String Formatting\",\"t\":[\"Issue:\",\"string = \\\"Hi Bornforthis,Welcome to XiaMen.\\\" print(string) # ---output--- Hi Bornforthis,Welcome to XiaMen. \",\"The problem is that each time we want to change a name or location, we need to create a new string.\",\"Using string concatenation may be cumbersome, especially for more complex strings.\",\"Another issue is that different data types cannot be directly concatenated in Python, unless explicitly converted to strings:\",\"string = \\\"Money is \\\" + 190 print(string) # ---output--- Traceback (most recent call last): File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py\\\", line 1, in <module> string = \\\"Money is \\\" + 190 TypeError: can only concatenate str (not \\\"int\\\") to str string = \\\"Money is \\\" + str(190) print(string) # ---output--- Money is 190 \"]},\"104\":{\"h\":\"6.1 .format()\",\"t\":[\"Single curly braces {}: Three methods\",\"string = \\\"Hi {}, welcome to XiaMen.\\\".format(\\\"Alexa\\\") print(string) template_string = \\\"Hi {}, welcome to XiaMen.\\\" print(template_string.format(\\\"Alexa\\\")) new_string = template_string.format(\\\"Alexa\\\") print(new_string) # output Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. \",\"Multiple curly braces above \\\"filled in order\\\"\",\"string = \\\"Hi {}, welcome to {}.\\\".format(\\\"Alexa\\\", \\\"XiaMen\\\") print(string) template_string = \\\"Hi {}, welcome to {}.\\\" print(template_string.format(\\\"Alexa\\\", \\\"XiaMen\\\")) new_string = template_string.format(\\\"Alexa\\\", \\\"XiaMen\\\") print(new_string) # output Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to XiaMen. \",\"Multiple curly braces specifying positions \\\"index specified\\\"\",\"string = \\\"Hi {1}, welcome to {0}.\\\".format(\\\"0\\\", \\\"1\\\") print(string) string = \\\"Hi {1}, welcome to {0}.\\\".format(\\\"XiaMen\\\", \\\"Alexa\\\") # 0th position input:XiaMen, 1st position input:Alexa print(string) template_string = \\\"Hi {1}, welcome to {0}.\\\" print(template_string.format(\\\"Shanghai\\\", \\\"Alexa\\\")) new_string = template_string.format(\\\"Shenzhen\\\", \\\"Alexa\\\") print(new_string) # output Hi 1, welcome to 0. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to Shanghai. Hi Alexa, welcome to Shenzhen. \",\"Parameter specification\",\"string = \\\"Hi {name}, welcome to {city}.\\\".format(name=\\\"name\\\", city=\\\"city\\\") print(string) string = \\\"Hi {name}, welcome to {city}.\\\".format(name=\\\"Alexa\\\", city=\\\"XiaMen\\\") print(string) template_string = \\\"Hi {name}, welcome to {city}.\\\" print(template_string.format(name=\\\"Alexa\\\", city=\\\"Shanghai\\\")) new_string = template_string.format(name=\\\"Alexa\\\", city=\\\"Shenzhen\\\") print(new_string) # output Hi name, welcome to city. Hi Alexa, welcome to XiaMen. Hi Alexa, welcome to Shanghai. Hi Alexa, welcome to Shenzhen. \",\"Preserve specified decimal places: {:.xf} preserves x decimal places\",\"string = \\\"Money is {:.3f}\\\".format(190) # .3f preserves three decimal places print(string) # output Money is 190.000 \"]},\"105\":{\"h\":\"6.2 f\",\"t\":[\"Directly read variables (variables must be created in advance)\",\"name = \\\"Alexa\\\" city = \\\"XiaMen\\\" string = f\\\"Hi {name}, welcome to {city}.\\\" print(string) # Variables must be created before using f # output Hi Alexa, welcome to XiaMen. \",\"Preserve decimal places {variable: .xf} keeps variable to x decimal places\",\"money = 190 string = f\\\"Money is {money:.3f}.\\\" print(string) # output Money is 190.000. \"]},\"106\":{\"h\":\"6.3 % formatting\",\"t\":[\"%d: Integer\",\"%s: String\",\"%f: Float\",\"Single position input (three methods: use % + number to input; d/s/f controls input type)\",\"string = \\\"Money is %d\\\" new_s = string % 13 print(new_s) print(string % 19) string = \\\"Money is %d\\\" % 190 print(string) # output Money is 13 Money is 18 Money is 190 \",\"Multiple position input: % must be followed by parentheses\",\"string = \\\"Money is %d %s\\\" new_s = string % (13, \\\"发大财\\\") print(new_s) print(string % (18, \\\"暴富\\\")) string = \\\"Money is %d %s\\\" % (190, \\\"666\\\") print(string) # output Money is 13 发大财 Money is 18 暴富 Money is 190 666 \",\"Preserve decimal places: %.xf\",\"string = \\\"Money is %.3f\\\" new_s = string % 13 print(new_s) print(string % 18) string = \\\"Money is %.3f\\\" % 190 print(string) # output Money is 13.000 Money is 18.000 Money is 190.000 \"]},\"107\":{\"h\":\"6.4 f and format, % advantages and disadvantages\",\"t\":[\"format and % are like templates, and once the template is created, it can be used directly when needed; while f is like a bank teller, registering while asking, and cannot create a template in advance.\"]},\"108\":{\"h\":\"7. Immutability of Strings\",\"t\":[\"Strings are immutable, and no element can be changed in the string. If you want to change an element in the string, a new string needs to be created.\",\"s = \\\"hello bornforthis\\\" s[0] = \\\"a\\\" # ---output--- Traceback (most recent call last): File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\\\", line 2, in <module> s[0] = \\\"a\\\" TypeError: 'str' object does not support item assignment \",\"In addition to using replace, you can also use string concatenation\",\"string = \\\"Hello, Alexa!\\\" new_string = \\\"a\\\" + string[1:] # using slicing print(new_string) # output aello, Alexa! \"]},\"109\":{\"h\":\"8. String Escaping\",\"t\":[\"Escape Character\",\"Meaning\",\"Example\",\"\\\\\\\\\",\"Backslash symbol, to get \\\\\",\"s = \\\"bor\\\\\\\\nforthis\\\"\",\"\\\\b\",\"Backspace, similar to the delete key\",\"s = \\\"bornff\\\\borthis\\\"\",\"\\\\n\",\"Newline\",\"s = \\\"bornfor\\\\nthis\\\"\",\"\\\\t\",\"Tab\",\"s = \\\"born\\\\tfor\\\\tthis\\\"\",\"r\",\"Cancel escaping \\\"R and r\\\" both work\",\"s = r\\\"born\\\\tfor\\\\tthis\\\"\",\"Example code:\",\"s = \\\"bor\\\\\\\\nforthis\\\" # Originally using \\\\n would cause the string to break, but if you want to output \\\\n, you need to add another \\\\ in front of \\\\ print(s) # output bor\\\\nforthis s = \\\"bornff\\\\borthis\\\" # \\\\b deletes the previous character f print(s) # output bornforthis s = \\\"bornfor\\\\nthis\\\" # \\\\n newline print(s) # output bornfor this s = \\\"born\\\\t for\\\\tthis\\\" # \\\\t tab print(s) # output born for this s = r\\\"born\\\\tfor\\\\tthis\\\" # You can also use r to cancel escaping print(s) # output born\\\\tfor\\\\tthis \"]},\"110\":{\"h\":\"9 String Concatenation\",\"t\":[\"s1 = 'born' s2 = 'forthis' print(s1 + s2) # Forms a single string print(s1, s2) # Still two independent strings # ---output--- bornforthis born forthis s1 = '*-love-' print(s1 * 10) # ---output--- *-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love- \",\"I want to add an * at the end of the output above. What should I do?\",\"print(s1*10 + \\\"*\\\") print(s1*10 + s1[0]) print(s1*10, end=\\\"*\\\") \"]},\"111\":{\"h\":\"10. Reading User Input\"},\"112\":{\"h\":\"10.1 input() Basic Usage\",\"t\":[\"Use input() to get user input\",\"user_input = input() print(user_input) # output alexa # self input alexa # print \"]},\"113\":{\"h\":\"10.2 input() Input Prompt\",\"t\":[\"But the above code has a small problem: it is not very intuitive to know during runtime that the program needs our input, especially for non-programmer users.\",\"image-20231231074522629\",\"How to solve it? - Use input prompt.\",\"input() function supports writing a string for prompting.\",\"user_input = input(\\\"Enter your name:>>>\\\") print(\\\"user input name:\\\", user_input) # output Enter your name:>>> alexa user input name: alexa \",\"image-20231231074540136\"]},\"114\":{\"h\":\"10.3 input() Characteristics\"},\"115\":{\"h\":\"10.3.1 input() Type is String \\\"str\\\"\",\"t\":[\"In [2]: type(input(\\\"i:>>>\\\")) i:>>>1 Out[2]: str In [3]: type(input(\\\"i:>>>\\\")) i:>>>[1,2,3,4] Out[3]: str In [4]: type(input(\\\"i:>>>\\\")) i:>>>(1,2,3,4) Out[4]: str \",\"From the above code examples, we can see that the data type obtained by input() is always string.\",\"Knowing the characteristics of input(), how to solve this problem? - How can users directly enter the original type and get the original type.\"]},\"116\":{\"h\":\"10.3.2 Method One: Forced Type Conversion\",\"t\":[\"In [10]: n = int(input(':>>>')) :>>>12 In [11]: type(n) Out[11]: int In [12]: # There are some issues In [13]: s = list(input(':>>>')) :>>>[1, 2, 3, 4, 5] In [14]: s # Gets each element separately Out[14]: ['[', '1', ',', ' ', '2', ',', ' ', '3', ',', ' ', '4', ',', ' ', '5', ']'] In [15]: type(s) Out[15]: list In [16]: b = bool(input(':>>>')) :>>>True In [17]: b Out[17]: True In [18]: type(b) Out[18]: bool \",\"Suitable for: numbers, strings, booleans\",\"Not suitable for: lists, tuples, dictionaries, sets\"]},\"117\":{\"h\":\"10.3.3 Method Two: Use eval()\",\"t\":[\"Wonderful use of eval()\",\"In [28]: s = eval(input(':>>>')) :>>>12 In [29]: type(s), s Out[29]: (int, 12) In [30]: s = eval(input(':>>>')) :>>>[1, 2, 3] In [31]: type(s), s Out[31]: (list, [1, 2, 3]) In [32]: s = eval(input(':>>>')) :>>>(1, 2, 3) In [33]: type(s), s Out[33]: (tuple, (1, 2, 3)) In [34]: s = eval(input(':>>>')) :>>>{1, 2, 3} In [35]: type(s), s Out[35]: (set, {1, 2, 3}) In [36]: s = eval(input(':>>>')) :>>>True In [37]: type(s), s Out[37]: (bool, True) In [38]: s = eval(input(':>>>')) :>>>{'a': 1, 'b': 2} In [39]: type(s), s Out[39]: (dict, {'a': 1, 'b': 2}) \",\"Problems with eval()\",\"The code above seems to solve our problem, but it comes with issues that need attention.\",\"In [14]: s = eval(input(\\\":>>>\\\")) :>>>string --------------------------------------------------------------------------- NameError Traceback (most recent call last) Cell In[14], line 1 ----> 1 s = eval(input(\\\":>>>\\\")) File <string>:1 NameError: name 'string' is not defined \",\"Let's analyze the \\\"magic\\\" of eval():\",\"Get user input: s = eval(input(':>>>'))\",\"Input string will be obtained, and after conversion by eval, it becomes a variable similar to string. However, in our previous code, we did not create a variable named string.\",\"Therefore, an error is raised. The error is quite obvious: NameError: name 'string' is not defined.\",\"The solution is straightforward: either create a variable named string before getting user input, or intentionally add single quotes, double quotes, or triple quotes around the input.\",\"In [17]: string = \\\"hello\\\" In [18]: s = eval(input(\\\":>>>\\\")) :>>>string In [19]: s Out[19]: 'hello' In [20]: num = 12 In [21]: s = eval(input(\\\":>>>\\\")) :>>>num In [22]: s Out[22]: 12 In [23]: type(s), s Out[23]: (int, 12) In [24]: s = eval(input(\\\":>>>\\\")) :>>>\\\"string\\\" In [25]: type(s), s Out[25]: (str, 'string') \",\"Tricks with eval()\",\"Task requirement: Get user input, calculate the sum, difference, product, and quotient of two digits.\",\"In [26]: eval(input(\\\":>>>\\\")) :>>>1+1 Out[26]: 2 In [27]: eval(input(\\\":>>>\\\")) :>>>2-1 Out[27]: 1 In [28]: eval(input(\\\":>>>\\\")) :>>>9*8 Out[28]:72 In [29]: eval(input(\\\":>>>\\\")) :>>>9/3 Out[29]: 3.0 \"]},\"118\":{\"h\":\"11. Trying Out\",\"t\":[\"Get user input to display the sum of two integers.\",\"Requirements:\",\"Use only one input function.\",\"User input format: num1 num2\",\"Output the calculation result.\",\"Input:\",\"5 6 \",\"Output:\",\"11 \"]},\"119\":{\"c\":[\"Python\"]},\"120\":{\"c\":[\"web\",\"typora\"]},\"121\":{\"h\":\"list\"},\"122\":{\"h\":\"1. List Structure\",\"t\":[\"Use square brackets to represent lists.\",\"Elements inside the list are separated by commas.\",\"Note that it is in the English input method.\",\"student1 = ['lilei', 18, 'class01', 201901] student2 = ['hanmeimei', 19, 'class02', 201902] \",\"The mutability of a list: you can modify the content inside the list.\",\"Convert a string to a list\",\"string_to_list = list(\\\"Bornforthis\\\") print(string_to_list) # output ['B', 'o', 'r', 'n', 'f', 'o', 'r', 't', 'h', 'i', 's'] \"]},\"123\":{\"h\":\"2. Accessing Elements in a List\"},\"124\":{\"h\":\"2.1 Composition of List Indices\",\"t\":[\"In programming languages, the first position is usually numbered 0.\",\"image-20231231075151393\"]},\"125\":{\"h\":\"2.2 Extracting a Single Element\",\"t\":[\"The number inside the square brackets specifies the element's position.\",\"grade = [98, 99, 95, 80] print(grade[0]) # 98 print(grade[0] + grade[3]) # 178 \"]},\"126\":{\"h\":\"2.3 Getting a Range of Elements in a List\",\"t\":[\"image-20231231075205015\",\"Inside the square brackets, use start_position:end_position.\",\"Note: It does not include the element at the end position.\",\"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers[2:6]) # [2, 3, 4, 5] \"]},\"127\":{\"h\":\"2.4 Getting Elements with a Specific Interval in a List\",\"t\":[\"image-20231231075218270\",\"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers[1:7:2]) # [1, 3, 5] \",\"grade = [98, 99, 95, 80] print(grade[1]) print(grade[0], grade[2]) print(grade[0:4]) # The third position defaults to +1, so it must be changed to -1 when reversed print(grade[-1:-4:-1]) # Reverse the list \"]},\"128\":{\"h\":\"3. List Slicing Assignment\",\"t\":[\":::tab\",\"@tab Code\",\"image-20231231075234954\",\"@tab Think\",\"image-20231231075241046\",\":::\",\"In [1]: name = list('Python') In [2]: name Out[2]: ['P', 'y', 't', 'h', 'o', 'n'] In [3]: name[2:] Out[3]: ['t', 'h', 'o', 'n'] In [4]: list('abc') Out[4]: ['a', 'b', 'c'] In [5]: name[2:]=list('abc') In [6]: name Out[6]: ['P', 'y', 'a', 'b', 'c'] \",\"image-20231231075251298\",\"In [7]: numbers = [1, 5] In [8]: numbers[1:1] Out[8]: [] # Cannot access 5 In [9]: numbers[1:1] = [2, 3, 4] In [10]: numbers Out[10]: [1, 2, 3, 4, 5] In [11]: numbers[1:4] = [] In [12]: numbers Out[12]: [1, 5] \"]},\"129\":{\"h\":\"4. Trying It Out\",\"t\":[\"Get user input for two values: one is the position to insert, and the other is the value to be inserted at that position.\",\"Given the following list:\",\"numbers = [1, 2, 3, 5, 6] \",\"Example:\",\"Enter position: 3 Enter value: 4 [1, 2, 3, 4, 5, 6] \"]},\"130\":{\"h\":\"5. Inserting Elements at a Specific Position - .insert(index, element)\",\"t\":[\".insert(index, element) is a basic method for lists, used to insert an element at a specified position.\",\"Its basic syntax is:\",\"list.insert(index, element) \",\"index: Specifies the position to insert the element. The index starts from 0. If the specified index is beyond the current length of the list (no error will be raised), the element will be added to the end of the list.\",\"element: This is the element you want to insert into the list.\",\"numbers = [1, 2, 3, 5, 6] numbers.insert(3, 4) print(numbers) # output [1, 2, 3, 4, 5, 6] \"]},\"131\":{\"h\":\"6. List Length\",\"t\":[\"To get the length of a list, use len():\",\"numbers = [1, 2, 3, 5, 6] print(len(numbers)) # output 5 \"]},\"132\":{\"h\":\"7. Modifying Elements in a List\",\"t\":[\"image-20240206072451278\",\"Modifying a Single Element\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0] = \\\"xxx\\\" print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: ['xxx', 2, 3, 5, 6] \",\"Modifying Multiple Elements\",\"Multiple modifications with a string\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0:3] = 'bornforthis' print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: ['b', 'o', 'r', 'n', 'f', 'o', 'r', 't', 'h', 'i', 's', 5, 6] \",\"Objects that can be used for multiple element modification: \",\"List\",\"Tuple\",\"Set\",\"String\",\"Dictionary (with keys)\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0:3] = {\\\"a\\\": 1, \\\"b\\\": 8} print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: ['a', 'b', 5, 6] \",\"Objects not allowed for multiple element modification: \",\"Boolean\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers[0:3] = True print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 3, in <module> numbers[0:3] = True ~~~~~~~^^^^^ TypeError: can only assign an iterable \"]},\"133\":{\"h\":\"8. Adding Elements to a List\"},\"134\":{\"h\":\"8.1 Adding a Single Element - .append()\",\"t\":[\"image-20240206072754442\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.append(\\\"aaa\\\") print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5, 6, 'aaa'] numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.append([\\\"aaa\\\", \\\"bbb\\\"]) print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5, 6, ['aaa', 'bbb']] # It will put the entire list inside; does not support adding multiple elements \"]},\"135\":{\"h\":\"8.2 Adding Multiple Elements\",\"t\":[\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.extend([\\\"aaa\\\", \\\"bbb\\\"]) print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5, 6, 'aaa', 'bbb'] \"]},\"136\":{\"h\":\"9. Deleting Elements from a List\"},\"137\":{\"h\":\"9.1 del\",\"t\":[\"del is used to specify individual or multiple elements to be deleted from the list.\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) del numbers[2] print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 5, 6] \",\"If not specifying elements to delete, it will delete the entire variable.\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) del numbers print(\\\"after:\\\", numbers) # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 4, in <module> print(\\\"after:\\\", numbers) ^^^^^^^ NameError: name 'numbers' is not defined before: [1, 2, 3, 5, 6] \"]},\"138\":{\"h\":\"9.2 pop()\",\"t\":[\"pop() function by default deletes the last element from the list, and it can also take an argument to specify the index of the element to be removed.\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.pop() print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 2, 3, 5] numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.pop(0) print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [2, 3, 5, 6] \"]},\"139\":{\"h\":\"9.3 remove()\",\"t\":[\"remove() is used to specify the removal of a particular element from the list. For example, remove('aiyc') specifies the removal of the 'aiyc' element from the list.\",\"If there are duplicates, only one instance will be removed.\",\"numbers = [1, 2, 3, 5, 6] print(\\\"before:\\\", numbers) numbers.remove(2) # element 2 not the 3rd element print(\\\"after:\\\", numbers) # output before: [1, 2, 3, 5, 6] after: [1, 3, 5, 6] \"]},\"140\":{\"h\":\"10. Combining Two Lists\",\"t\":[\"Simply use the plus sign.\",\"numbers1 = [1, 2, 3, 5, 6] numbers2 = [10, 20, 30] print(numbers1 + numbers2) # output [1, 2, 3, 5, 6, 10, 20, 30] \"]},\"141\":{\"h\":\"11. Checking if an Element Exists in a List - Value in Sequence\",\"t\":[\"image-20240206072830941\",\"numbers = [1, 2, 3, 5, 6] print(1 in numbers) print(10 in numbers) # output True False \"]},\"142\":{\"h\":\"12. Getting the Repeat Count of an Element in a List - .count()\",\"t\":[\"numbers = [1, 2, 1, 1, 3, 5, 6] print(numbers.count(1)) # output 3 \"]},\"143\":{\"h\":\"13. Get the First Occurrence Position of an Element in a List - .index()\",\"t\":[\"Use list.index(element) to obtain the position. If the element is not in the list, an error will be raised.\",\"numbers = [1, 2, 1, 1, 3, 5, 6] print(numbers.index(1)) # Output 0 \"]},\"144\":{\"h\":\"14. Sorting a List\"},\"145\":{\"h\":\"14.1 sort(reverse=False)\",\"t\":[\"list.sort() arranges elements in the list in ascending order and modifies the list directly. If reverse=True is specified, the list is sorted in descending order.\",\"numbers = [1, 2, 1, 1, 3, 5, 6] numbers.sort() print(numbers) numbers.sort(reverse=True) print(numbers) # Output [1, 1, 1, 2, 3, 5, 6] [6, 5, 3, 2, 1, 1, 1] \"]},\"146\":{\"h\":\"14.2 sorted(list, reverse=False)\",\"t\":[\"sorted(list, reverse=False) sorts the list in ascending order, leaving the original list unchanged and returning a new list. reverse is set to False by default, and if set to True, it returns the list in descending order.\"]},\"147\":{\"c\":[\"Python\"]},\"148\":{\"c\":[\"web\",\"typora\"]},\"149\":{\"h\":\"tuple\"},\"150\":{\"h\":\"1. Creating a Tuple\",\"t\":[\"Use parentheses to create a tuple.\",\"Separate elements with commas.\",\"tup = (2, \\\"x\\\", \\\"y\\\") print(tup, type(tup)) # output (2, 'x', 'y') <class 'tuple'> \"]},\"151\":{\"h\":\"2. Comparing Lists and Tuples\",\"t\":[\"image-20240207071522037\",\"Differences between lists and tuples:\",\"Lists use square brackets [] to enclose elements, while tuples use round brackets ().\",\"Elements in lists can be modified, added, or removed (mutable), while elements in tuples cannot be modified (immutable).\"]},\"152\":{\"h\":\"3. Immutability of Tuples\",\"t\":[\"Any attempt to modify a tuple will result in an error:\",\"tup = (2, \\\"x\\\", \\\"y\\\") tup[0] = 1 # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 2, in <module> tup[0] = 1 ~~~^^^ TypeError: 'tuple' object does not support item assignment \"]},\"153\":{\"h\":\"4. Indexing and Slicing Tuples\",\"t\":[\"tup = (2, \\\"lilei\\\", 19) print(tup[1]) # output 2 print(tup[0], tup[2]) # output 2 19 print(tup[::2]) # output (2, 19) print(tup[-2:-4:-1]) # output (\\\"lilei\\\", 2) \"]},\"154\":{\"h\":\"5. Tuple Characteristics\",\"t\":[\"Consider the scenario where a tuple has only one element. What type is it?\",\"tup = (1) print(type(tup)) # output <class 'int'> \",\"To resolve this issue, add a comma:\",\"tup = (1,) # Add a comma to distinguish when a tuple has only one element print(type(tup)) # output <class 'tuple'> \"]},\"155\":{\"h\":\"6. Concatenating Tuples\",\"t\":[\"Simply use the plus sign to concatenate tuples:\",\"tup1 = (1, 2, 3) tup2 = (4, 5, 6) new_tup = tup1 + tup2 print(new_tup) # output (1, 2, 3, 4, 5, 6) \"]},\"156\":{\"h\":\"7. Sorting Tuples\"},\"157\":{\"h\":\"7.1 Using Basic Knowledge\",\"t\":[\"Sort the following tuple:\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) \",\"Approach:\",\"Convert the tuple to a list since tuples are immutable.\",\"Perform sorting.\",\"Convert it back to a tuple.\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) lst = list(tup) lst.sort() # Modify the list directly tup_new = tuple(lst) print(tup_new) # output (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"]},\"158\":{\"h\":\"7.2 Using sorted()\",\"t\":[\"sorted() essentially performs the same steps:\",\"tup1 = tuple(sorted(tup)) # sorted(tup) automatically converts it to a list, so it needs to be converted back to a tuple print(tup1) # output (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"]},\"159\":{\"h\":\"8. Using zip()\"},\"160\":{\"h\":\"8.1 Introduction\",\"t\":[\"zip() is a built-in function that pairs corresponding elements from multiple iterable objects (such as lists, tuples, or strings) and returns an iterator of tuples. If you have two or more lists and want to create an iterator based on their corresponding elements, zip() is useful.\",\"For example, with two lists:\",\"list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] zipped = zip(list1, list2) \",\"Now zipped is an iterator containing tuples where each tuple consists of corresponding elements from both lists. You can convert it to a list to view the contents:\",\"list(zipped) # output [(1, 'a'), (2, 'b'), (3, 'c')] \",\"You can iterate through this iterator using a loop:\",\"for num, letter in zipped: print(f'Number: {num}, Letter: {letter}') # output Number: 1, Letter: a Number: 2, Letter: b Number: 3, Letter: c \",\"The same applies to tuples:\",\"tup1 = (1, 2, 3) tup2 = ('a', 'b', 'c') zipped = zip(tup1, tup2) list(zipped) # ---output--- [(1, 'a'), (2, 'b'), (3, 'c')] \"]},\"161\":{\"c\":[\"Python\"]},\"162\":{\"c\":[\"web\",\"typora\"]},\"163\":{\"h\":\"dictionary\"},\"164\":{\"h\":\"1. How to Create a Phone Book\",\"t\":[\"Suppose we have the following contacts:\",\"Name\",\"Phone Number\",\"李雷\",\"123456\",\"韩梅梅\",\"132456\",\"大卫\",\"154389\",\"Mr.Liu\",\"131452\",\"Bornforthis\",\"180595\",\"Alexa\",\"131559\",\"How to build a phone book with user input search functionality using the knowledge we've learned so far.\",\"Variables, numeric types, lists, tuples, strings.\",\"Program output:\",\"Test 1:\",\"Enter your search name: 李雷 The 李雷 phone number is: 123456 \",\"Test 2:\",\"Enter your search name: Bornforthis The Bornforthis phone number is: 180595 \",\"The above problem should help understand two points:\",\"How to use existing knowledge to complete new tasks, as it's impossible to include all the data types needed for various requirements.\",\"The significance of dictionaries, which should be understood after completing the above question.\"]},\"165\":{\"h\":\"2. Dictionary Structure\",\"t\":[\"Represented by curly braces.\",\"Each item in the dictionary consists of two elements: key and value. \",\"{key: value, key: value}\",\"Items are separated by commas.\",\"phone_numbers = {'lilei': 1234, 'hanmeimei': 3456, 'madongmei': 1123} print(phone_numbers['lilei']) # Extract a value using a key # output 1234 \"]},\"166\":{\"h\":\"3. Dictionary Key & Value\",\"t\":[\"Keys and values are one-to-one, with a single key corresponding to a single value.\",\"Key types are immutable; str.\",\"Value types can be anything.\",\"phone_numbers = {'lilei': 1234, 'hanmeimei': 3456, 'madongmei': 1123, True: 'bool', 2: 'int'} print(phone_numbers) # output {'lilei': 1234, 'hanmeimei': 3456, 'madongmei': 1123, True: 'bool', 2: 'int'} \",\"If a list is used as a key, it will result in an error.\",\"phone_numbers = {'lilei': 1234, ['hanmeimei']: 3456, 'madongmei': 1123, True: 'bool', 2: 'int'} print(phone_numbers) # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 1, in <module> phone_numbers = {'lilei': 1234, ['hanmeimei']: 3456, 'madongmei': 1123, True: 'bool', 2: 'int'} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TypeError: unhashable type: 'list' \"]},\"167\":{\"h\":\"4. Creating a Dictionary Using the dict() Function\",\"t\":[\"Method 1: Creating a dictionary based on other sequences.\",\"message = [('lilei', 98), ('hanmeimei', 99)] list_to_dict = dict(message) # Convert tuples to a dictionary print(list_to_dict) # output {'lilei': 98, 'hanmeimei': 99} \",\"Method 2: Creating a dictionary based on keyword arguments.\",\"d = dict(lilei=98, hanmeimei=99) print(d) # output {'lilei': 98, 'hanmeimei': 99} \",\"What are the advantages and disadvantages of the two methods above?\",\"For method one, it is more adaptable to various data types in dictionaries. Why? Because the structure is a list containing tuples, and in a tuple, the 0th position is the key, and the 1st position is the value. Therefore, as long as it is an immutable data type, it can be placed in the 0th position.\",\"In contrast, for method two, the first position must be a \\\"variable,\\\" and it cannot be another data type. For example:\",\"d = dict(lilei=98, hanmeimei=99) # Looks normal, lilei is a variable d = dict('lilei'=98, 'hanme imei'=99) # How does this look? 'lilei' is a value File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 1 d = dict('lilei'=98, hanmeimei=99) ^^^^^^^^ SyntaxError: expression cannot contain assignment, perhaps you meant \\\"==\\\"? # Value cannot be assigned to another value; values can only be compared using == \",\"In the second method, it may look strange. There are two values, 'lilei' and 98, both are values. Can 98 be assigned to another value? Obviously not. Our assignment requires assigning one value to a variable \\\"with space.\\\"\",\"Therefore, while the second method can create a dictionary, it does not fully support various cases of dictionary keys.\",\"When outputting, the keys in the second method will only be strings.\"]},\"168\":{\"h\":\"5. Accessing Dictionary Data\"},\"169\":{\"h\":\"5.1 Using Square Brackets\",\"t\":[\"Use square brackets along with the key to access the value.\",\"grade = {'lilei': 98, 'hanmeimei': 99} print(grade['hanmeimei']) \"]},\"170\":{\"h\":\"5.2 Issue with the Above Extraction Method\",\"t\":[\"An issue arises when extracting a key that doesn't exist.\",\"grade = {'lilei': 98, 'hanmeimei': 99} print(grade['ma']) # output Traceback (most recent call last): File \\\"/Users/gaxa/Coder/Pythonfile/data_type.py\\\", line 2, in <module> print(grade['ma']) ~~~~~^^^^^^ KeyError: 'ma' \",\"Similar to searching for a contact in a phone book, it returns \\\"not found.”\",\"image-20240207072239841\"]},\"171\":{\"h\":\"5.3 Using .get() to Solve\",\"t\":[\"When using the get method, provide a key, and the method will return the associated value. If the key does not exist, the get method will return None, or you can specify a default value if the key is not found.\",\"The basic syntax for the get method is:\",\"value = dictionary.get(key, default_value) \",\"key: The key you want to retrieve.\",\"default_value: (Optional) The value to return if the key is not found. If not provided, the default is None.\",\"Here is an example using the get method:\",\"grade = {'lilei': 98, 'hanmeimei': 99} print(grade.get(\\\"lilei\\\")) print(grade.get(\\\"ma\\\")) # Returns None if key doesn't exist # If you want to specify a custom return value when the key is not found print(grade.get(\\\"ma\\\", \\\"Not specified\\\")) # output 98 None Not specified \",\"In the first get call, we accessed the key 'name', which exists in the dictionary, so it returned the corresponding value 98. In the second call, we tried to access the key 'ma', which doesn't exist in the dictionary, so it returned the default value 'Not Specified' that we specified.\"]},\"172\":{\"h\":\"6. Updating Dictionary Data\",\"t\":[\"Principle for modifying or adding data to a dictionary: If it exists, modify it; if not, add it diligently.\",\"image-20240207072309359\",\"grade = {'lilei': 98, 'hanmeimei': 99} grade['lilei'] = 95 grade['madongmei'] = 100 print(grade) # output {'lilei': 95, 'hanmeimei': 99, 'madongmei': 100} \"]},\"173\":{\"h\":\"7. Deleting Dictionary Data\",\"t\":[\"image-20240207072337892\",\"grade = {'A': 98, \\\"B\\\": 99, \\\"C\\\": 95} print(grade) del grade['A'] print(grade) # output {'A': 98, 'B': 99, 'C': 95} {'B': 99, 'C': 95} \",\"grade.clear() print(grade) # output {} \",\"del grade # the variable would be deleted hence not able to print print(grade) # output Traceback (most recent call last): File \\\"/Users/gaxa/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/c6f75b68835a096ebee7933989e7770c/Message/MessageTemp/4b975e58c46c58ce379c1852275bb5cf/File/python.py\\\", line 10, in <module> print(grade) ^^^^^ NameError: name 'grade' is not defined \"]},\"174\":{\"h\":\"8. Dictionary Structure: Nesting Dictionaries\",\"t\":[\"Nesting involves storing a series of dictionaries in a list or storing a list as a value in a dictionary.\",\"Dictionary in a List\",\"Storing a List in a Dictionary\",\"Storing a Dictionary in a Dictionary\"]},\"175\":{\"h\":\"8.1 Dictionary in a List\",\"t\":[\"student1 = {'name': \\\"A\\\", \\\"age\\\": 18, \\\"grade\\\": 98} student2 = {'name': \\\"B\\\", \\\"age\\\": 19, \\\"grade\\\": 99} student3 = {'name': \\\"C\\\", \\\"age\\\": 18, \\\"grade\\\": 95} students = [student1, student2, student3] print(students) print(students[2][\\\"grade\\\"]) print(students[2].get(\\\"grade\\\")) \",\"Try extracting the score of Han Meimei by retrieving the `students` variable.\",\"Square brackets and get are chosen based on whether the data is certain. If it is certain, prefer using square brackets for extraction; otherwise, use get.\"]},\"176\":{\"h\":\"8.2 Storing a List in a Dictionary\",\"t\":[\"favorite_class = { 'A': [\\\"math\\\", \\\"english\\\"], 'B': [\\\"chinese\\\"], 'C': [\\\"computer science\\\", \\\"physics\\\", \\\"math\\\"] } print(favorite_class[\\\"C\\\"][2]) # output math \"]},\"177\":{\"h\":\"8.3 Storing a Dictionary in a Dictionary\",\"t\":[\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} student2 = {\\\"name\\\": 'B', \\\"grade\\\": 95, \\\"实验班\\\": True} student3 = {\\\"name\\\": 'C', \\\"grade\\\": 89, \\\"实验班\\\": False} class1 = {\\\"A\\\": student1, \\\"B\\\": student2, \\\"C\\\": student3} print(class1) print(class1[\\\"C\\\"][\\\"实验班\\\"]) # output False \"]},\"178\":{\"h\":\"9. Common Dictionary Methods\"},\"179\":{\"h\":\"9.1 .pop(key)\",\"t\":[\"Delete a specific key-value pair.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} student1.pop(\\\"实验班\\\") print(student1) # output {'name': 'A', 'grade': 98} \"]},\"180\":{\"h\":\"9.2 .keys()\",\"t\":[\"Get all keys in the dictionary.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} keys = student1.keys() print(keys) print(list(keys)) # output dict_keys(['name', 'grade', '实验班']) ['name', 'grade', '实验班'] \"]},\"181\":{\"h\":\"9.3 .values()\",\"t\":[\"Get all values in the dictionary.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} values = student1.values() print(values) print(list(values)) # output dict_values(['A', 98, True]) ['A', 98, True] \"]},\"182\":{\"h\":\"9.4 .items()\",\"t\":[\"Get key-value pairs in the dictionary as tuples.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} values = student1.items() print(values) print(list(values)) # output dict_items([('name', 'A'), ('grade', 98), ('实验班', True)]) [('name', 'A'), ('grade', 98), ('实验班', True)] \"]},\"183\":{\"h\":\"9.5 in\",\"t\":[\"By default, it checks if the key is in the dictionary.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} print(\\\"name\\\" in student1) True \",\"Use .keys() for pure key checking.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} print(\\\"name\\\" in student1.keys()) True \",\"Use .values() for pure value checking.\",\"student1 = {\\\"name\\\": 'A', \\\"grade\\\": 98, \\\"实验班\\\": True} print(\\\"name\\\" in student1.values()) False \",\"image-20240207072410098\"]},\"184\":{\"c\":[\"Python\"]},\"185\":{\"c\":[\"web\",\"typora\"]},\"186\":{\"h\":\"set\"},\"187\":{\"h\":\"1. Creating a Set\",\"t\":[\"Directly use curly braces to create.\",\"set1 = {1, 2, 3, 4, 5} \",\"Use the set() method.\",\"image-20240207072723007\"]},\"188\":{\"h\":\"2. Set Intersection\",\"t\":[\"Intersection: Find elements that appear in both sets, implemented using the & operator.\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 & set2) # output {1, 2, 5} \"]},\"189\":{\"h\":\"3. Set Union\",\"t\":[\"Union: Find elements that are common in both sets, implemented using the | operator.\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 | set2) # output {1, 2, 3, 4, 5, 6, 8} \"]},\"190\":{\"h\":\"4. Set Difference\",\"t\":[\"Difference: When finding the difference between set1 and set2, it returns elements in set1 but not in set2, implemented using the - operator.\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 - set2) # output {3, 4} \"]},\"191\":{\"h\":\"5. Set Symmetric Difference\",\"t\":[\"Symmetric Difference: When finding the symmetric difference between set1 and set2, it returns elements that exist in set1 or set2 but not in both, implemented using the ^ operator –> equivalent to the union minus the intersection, Venn diagram.\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) print(set1 ^ set2) # output {3, 4, 6, 8} \"]},\"192\":{\"h\":\"6. Reflection\",\"t\":[\"Can symmetric difference be achieved using the other three set operations? How?\",\"Using union minus intersection.\",\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) U = set1 | set2 N = set1 & set2 print(U - N) # output {8, 3, 4, 6} \"]},\"193\":{\"h\":\"7. .add() - Adding Elements to a Set\",\"t\":[\"set1 = {1, 2, 3, 4, 5} set2 = set([1, 2, 5, 6, 8]) set1.add(9) print(set1) # output {1, 2, 3, 4, 5, 9} \"]},\"194\":{\"c\":[\"Python\"]},\"195\":{\"c\":[\"web\",\"typora\"]},\"196\":{\"h\":\"bool\"},\"197\":{\"h\":\"1. Boolean Values\",\"t\":[\"Meaning: Represents true or false in judgments, generally used in conditional tests.\",\"a = True print(a) print(10 < 5) print(10 > 8) # output True False True \",\"image-20240207073308404\",\"All non-empty values are considered True.\",\"All empty sequences, empty numbers are considered False.\"]},\"198\":{\"h\":\"2. Logical Operators\",\"t\":[\"Logical operators: Used to check if two or more conditions are satisfied.\",\"Logical operators exist only in booleans.\",\"Logical Operator\",\"Description\",\"and (\\\"logical and\\\")\",\"Returns True if both operands are True.\",\"or (\\\"logical or\\\")\",\"Returns True if at least one of the operands is True.\",\"not (\\\"logical not\\\")\",\"Used to reverse the state of the operand.\",\"exp\",\"bool\",\"value\",\"Return value === print(exp)\",\"3 and 5\",\"True and True\",\"True\",\"5 *Evaluates from left to right, returns 5 when it reaches True (both need to be True)\",\"3 or 5\",\"True or True\",\"True\",\"3 *Only needs one True, so stops at 3\",\"0 or 5\",\"False or True\",\"True\",\"5 *Stops at 5 to satisfy the condition\",\"3 and not 5\",\"True and False\",\"False\",\"False\",\"0 and 5\",\"False and True\",\"False\",\"0 *0 and False are equivalent\",\"s1 = {False, 0} s2 = {0, False} print(s1, s2) # output {False} {0} # The set automatically removes duplicates - 0 and False are considered equivalent \",\"In [5]: True and False or True Out[5]: True # Evaluates the right side of and first, from right to left In [6]: False or False or not False Out[6]: True \"]},\"199\":{\"h\":\"3. Expression Application — Conditional Testing\",\"t\":[\"Check if the current variable is equal to a specific value.\",\"Compare the size of numbers.\",\"Check if a specific value is in a sequence.\"]},\"200\":{\"h\":\"3.1 Multiple Conditions Checking\",\"t\":[\"Use and to check multiple conditions.\",\"age1 = 17 age2 = 18 print(age1 >= 18 and age2 >=18) print(age1 >= 15 and age2 >=18) # output False True \",\"Use or to check multiple conditions.\",\"age1 = 17 age2 = 18 print(age1 >= 18 or age2 >=18) print(age1 >= 15 or age2 >=18) # output True True \",\"image-20240207073333734\"]},\"201\":{\"c\":[\"Python\"]},\"202\":{\"c\":[\"web\",\"typora\"]},\"203\":{\"h\":\"if\"},\"204\":{\"c\":[\"Python\"]},\"205\":{\"c\":[\"web\",\"typora\"]},\"206\":{\"h\":\"Assignment 1\"},\"207\":{\"h\":\"Submission instructions\",\"t\":[\"You should submit your homework on GitHub.\",\"For this assignment you should turn in 4 separate .py files named according to the following pattern: hw1_q1.py, hw1_q2.py, etc.\",\"Each Python file you submit should contain a header comment block as follows:\",\"\\\"\\\"\\\" Author: [Your name here] Assignment / Part: HW1 - Q1 (etc.) Date due: 2023-02-09, 11:59pm I pledge that I have completed this assignment without collaborating with anyone else, in conformance with the Bornforthis 1v1 School of Computer Science and Procedures on Academic Misconduct. \\\"\\\"\\\" \",\"No late submissions will be accepted.\",\"REMINDER: Do not use any Python structures that we have not learned in class.\"]},\"208\":{\"h\":\"Question 01: Hello,You!\",\"t\":[\"Write a program that asks for the user's name, their age and prints a personalized welcome message for them.\",\"For example, an execution could look like this:\",\"Please enter your name: Aika Please enter your age: 29 Aika, 29, is taking CS-UY 1114. \",\"The format of your output need not look exactly the same as ours, but it must still ask the user for their name and age, and print them out as part of some sort of sentence.\"]},\"209\":{\"h\":\"Question 02: Some Have Gone and Some Remain\",\"t\":[\"The U.S. Census provides information on its web page Census.gov about the current U.S. population as well as approximate rates of change. Four rates of change are provided:\",\"There is a birth every 7 seconds.\",\"There is a death every 15 seconds.\",\"There is a new immigrant every 42 seconds.\",\"There is a new emigration (i.e. somebody moves out of the country) every 1.25 minutes.\",\"These are, naturally, approximations of birth, death, and immigration rates, but they can assist in providing population estimates in the near term.\",\"Write a program that takes a year as input (an integer—you may assume that this will value will always be greater than or equal to 2023) and prints out an estimated population (as an integer). Assume that the current population is 330,109,174, and assume that there are always exactly 365 days in a year.\",\"Sample execution:\",\"Please enter a year greater than 2023: 2042 The population in year 2042 will be 382038453 \",\"The format of your output need not look exactly the same as ours, but it must still ask the user to enter an integer representing a year, and it must always output the estimated population of that year.\"]},\"210\":{\"h\":\"Question 03: Penny Pinching\",\"t\":[\"Write a program that asks the user to enter a number of quarters, dimes, nickels and pennies and then outputs the monetary value of the coins in the format of dollars and remaining cents.\",\"Your program should interact with the user, and output its results, exactly as it is shown in the following example:\",\"Please enter number of coins: Number of quarters: 13 Number of dimes: 4 Number of nickels: 11 Number of pennies: 17 The total is 4 dollar(s) and 37 cent(s) \"]},\"211\":{\"h\":\"Question 04: Mad as a Hatter, Thin as a Dime\",\"t\":[\"Write a program that asks the user to enter an amount of money in the format of dollars and remaining cents. The program should calculate and print the minimum number of coins (quarters, dimes, nickels and pennies) that are equivalent to the amount input by the user.\",\"Your program should interact with the user, and display its results, exactly as it shows in the following example:\",\"Please enter your amount of dollars and cents, in two separate lines. 4 37 4 dollars and 37 cents are: 17 quarters, 1 dimes, 0 nickels and 2 pennies \",\"Hint: In order to find the minimum number of coins, first find the maximum number of quarters that fit within the amount of money input by the user, then find the maximum number of dimes that fit in the remaining amount, and so on.\"]},\"212\":{\"h\":\"Question 05: BMI Calculator\",\"t\":[\"Body mass index (BMI) is a number calculated from a person’s weight and height. The BMI is a convenient rule of thumb used to broadly categorize the weight of a person based on tissue mass (muscle, body fat, and bone) and height (although it's really rather unreliable otherwise). The formula for BMI is the following:\",\"BMI calculation formula\",\"BMI = weight / height - squared\"]},\"213\":{\"h\":\"PART A:\",\"t\":[\"Write a program that prompts for metric weight and height and outputs the BMI. For example, an execution could look like this:\",\"Please enter weight in kilograms: 50 Please enter height in meters: 1.58 BMI is: 20.0288415 \"]},\"214\":{\"h\":\"PART B:\",\"t\":[\"Write a program that prompts for weight in pounds and height in inches, converts the values to metric, and then calculates the BMI.\",\"Note: 1 pound is equal to 0.453592 kilograms and 1 inch is equal to 0.0254 meters.\",\"For example, an execution could look like this:\",\"Please enter weight in pounds: 135 Please enter height in inches: 71 BMI is: 18.82849431 \",\"Both part A and part B must be written in two separate py files.\"]},\"215\":{\"h\":\"Question 06: Don't Believe The Gacha\",\"t\":[\"In certain video games, you can spend either in-game currency or real money to get a series of often-random items to \\\"improve\\\" your gameplay experience. These mechanics are commonly referred to as gacha, or loot boxes, and are some of the most controversial topics in video game development.\",\"Let's pretend that the chances of getting a rare item in a video game are from 0% to 100%, and our video game has a player start at level 1 and end at level 5 . At level 1 , the player has an 100% chance of getting a rare item. At level 2 the player has an 80% chance of getting a rare item. At level 3 , 60%. At level 4 , 40%, and at level 5 , only 20%.\",\"Write a program that asks the user for their current level in the video game, determines whether they have received a rare item in a loot box, and lets them know in a message.\",\"What is your level? 1 Your loot box contains a rare item: True What is your level? 2 Your loot box contains a rare item: False What is your level? 3 Your loot box contains a rare item: True What is your level? 4 Your loot box contains a rare item: False What is your level? 5 Your loot box contains a rare item: False \"]},\"216\":{\"h\":\"Question 07: Collective Timetables\",\"t\":[\"Suppose Semi and Ollie worked for some time, and we want to calculate the total time both of them worked.\",\"Write a program that reads a number of days, hours, and minutes minutes each of them worked,and prints the total time both of them worked together as days, hours, and minutes.\",\"For example, an execution could look like this:\",\"Please enter the number of days Semi has worked: 2 Please enter the number of hours Semi has worked: 12 Please enter the number of minutes Semi has worked: 15 Please enter the number of days Ollie has worked: 3 Please enter the number of hours Ollie has worked: 15 Please enter the number of minutes Ollie has worked: 20 The total time both of them worked together is: 6 days, 3 hours and 35 minutes. \",\"Note: There are 24 hours in a day and 60 minutes in an hour.\"]},\"217\":{\"c\":[\"Python\"]},\"218\":{\"c\":[\"web\",\"typora\"]},\"219\":{\"h\":\"Engineering Mentoring\"},\"220\":{\"h\":\"Python\"},\"221\":{\"h\":\"Engineering Mentoring\"},\"222\":{\"h\":\"Python\"}},\"dirtCount\":0,\"index\":[[\"^\",{\"1\":{\"191\":2}}],[\"^^^^^\",{\"1\":{\"173\":1}}],[\"^^^^^^^^\",{\"1\":{\"167\":1}}],[\"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\",{\"1\":{\"166\":1}}],[\"^^^^^^^\",{\"1\":{\"137\":1}}],[\"实验班\",{\"1\":{\"177\":4,\"179\":2,\"180\":3,\"181\":1,\"182\":3,\"183\":3}}],[\"大卫\",{\"1\":{\"164\":1}}],[\"韩梅梅\",{\"1\":{\"164\":1}}],[\"李雷\",{\"1\":{\"164\":3}}],[\"zipped\",{\"1\":{\"160\":6}}],[\"zip\",{\"0\":{\"159\":1},\"1\":{\"160\":4}}],[\"暴富\",{\"1\":{\"106\":2}}],[\"发大财\",{\"1\":{\"106\":2}}],[\"q2\",{\"1\":{\"207\":1}}],[\"q1\",{\"1\":{\"207\":2}}],[\"q\",{\"1\":{\"68\":13}}],[\"quarters\",{\"1\":{\"210\":2,\"211\":3}}],[\"quantity\",{\"1\":{\"48\":2}}],[\"quite\",{\"1\":{\"117\":1}}],[\"quotient\",{\"1\":{\"61\":1,\"117\":1}}],[\"quotes\",{\"1\":{\"41\":1,\"73\":7,\"117\":3}}],[\"question\",{\"0\":{\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"215\":1,\"216\":1},\"1\":{\"32\":1,\"48\":1,\"164\":1}}],[\"`students`\",{\"1\":{\"175\":1}}],[\"```python\",{\"1\":{\"67\":1,\"92\":1}}],[\"`a\",{\"1\":{\"64\":1}}],[\"|\",{\"1\":{\"64\":9,\"189\":2,\"192\":1}}],[\"|a\",{\"1\":{\"64\":9}}],[\"<string>\",{\"1\":{\"117\":1}}],[\"<module>\",{\"1\":{\"103\":1,\"108\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"170\":1,\"173\":1}}],[\"<=\",{\"1\":{\"63\":3}}],[\"<\",{\"1\":{\"63\":3,\"68\":2,\"197\":1}}],[\"<class\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"56\":1,\"150\":1,\"154\":2}}],[\"≤\",{\"1\":{\"62\":2}}],[\"+1\",{\"1\":{\"77\":1,\"78\":1,\"127\":1}}],[\"+=\",{\"1\":{\"64\":4}}],[\"+\",{\"1\":{\"61\":2,\"62\":2,\"64\":1,\"65\":2,\"103\":3,\"106\":1,\"108\":1,\"110\":3,\"125\":1,\"140\":1,\"155\":1}}],[\"🙅\",{\"1\":{\"54\":1}}],[\"📝\",{\"1\":{\"48\":1}}],[\"📔\",{\"1\":{\"48\":1}}],[\"kilograms\",{\"1\":{\"213\":1,\"214\":1}}],[\"keeps\",{\"1\":{\"105\":1}}],[\"keyerror\",{\"1\":{\"170\":1}}],[\"key\",{\"0\":{\"166\":1,\"179\":1},\"1\":{\"51\":1,\"109\":1,\"165\":4,\"166\":3,\"167\":1,\"169\":1,\"170\":1,\"171\":11,\"179\":1,\"182\":1,\"183\":2}}],[\"key2\",{\"1\":{\"51\":1}}],[\"key1\",{\"1\":{\"51\":1}}],[\"keys\",{\"0\":{\"180\":1},\"1\":{\"51\":3,\"132\":1,\"166\":1,\"167\":2,\"180\":6,\"183\":2}}],[\"keyboard\",{\"1\":{\"41\":1}}],[\"keyword\",{\"1\":{\"31\":2,\"167\":1}}],[\"keywords\",{\"1\":{\"31\":3,\"32\":1}}],[\"k\",{\"1\":{\"89\":1,\"90\":1}}],[\"knowledge\",{\"0\":{\"157\":1},\"1\":{\"164\":2}}],[\"knowing\",{\"1\":{\"115\":1}}],[\"know\",{\"1\":{\"48\":3,\"113\":1,\"215\":1}}],[\"07\",{\"0\":{\"216\":1}}],[\"06\",{\"0\":{\"215\":1}}],[\"05\",{\"0\":{\"212\":1}}],[\"04\",{\"0\":{\"211\":1}}],[\"03\",{\"0\":{\"210\":1}}],[\"01\",{\"0\":{\"208\":1}}],[\"01234567o\",{\"1\":{\"91\":1}}],[\"01234567\",{\"1\":{\"91\":1}}],[\"0123456789\",{\"1\":{\"78\":2,\"79\":1}}],[\"09\",{\"1\":{\"207\":1}}],[\"0254\",{\"1\":{\"214\":1}}],[\"0288415\",{\"1\":{\"213\":1}}],[\"02\",{\"0\":{\"209\":1},\"1\":{\"207\":1}}],[\"02468\",{\"1\":{\"78\":1,\"79\":1}}],[\"0b4\",{\"1\":{\"173\":1}}],[\"000\",{\"1\":{\"104\":1,\"105\":1,\"106\":3}}],[\"0th\",{\"1\":{\"104\":1,\"167\":2}}],[\"0\",{\"1\":{\"41\":1,\"44\":2,\"47\":2,\"60\":7,\"61\":1,\"64\":2,\"66\":1,\"76\":1,\"78\":1,\"80\":4,\"104\":5,\"108\":2,\"110\":1,\"117\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":3,\"130\":1,\"132\":5,\"138\":1,\"143\":1,\"152\":2,\"153\":1,\"157\":3,\"158\":1,\"173\":1,\"198\":8,\"211\":1,\"214\":2,\"215\":1}}],[\">=18\",{\"1\":{\"200\":4}}],[\">=\",{\"1\":{\"63\":3,\"200\":4}}],[\">\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"56\":1,\"63\":3,\"68\":2,\"117\":1,\"150\":1,\"154\":2,\"191\":1,\"197\":1}}],[\">>>9\",{\"1\":{\"117\":2}}],[\">>>2\",{\"1\":{\"117\":1}}],[\">>>num\",{\"1\":{\"117\":1}}],[\">>>string\",{\"1\":{\"117\":2}}],[\">>>true\",{\"1\":{\"116\":1,\"117\":1}}],[\">>>1+1\",{\"1\":{\"117\":1}}],[\">>>12\",{\"1\":{\"116\":1,\"117\":1}}],[\">>>1\",{\"1\":{\"115\":1}}],[\">>>\",{\"1\":{\"38\":8,\"40\":4,\"43\":4,\"46\":4,\"50\":4,\"53\":4,\"113\":2,\"115\":5,\"116\":4,\"117\":21}}],[\"待补充代码\",{\"1\":{\"32\":1}}],[\"❌\",{\"1\":{\"32\":3}}],[\"✅\",{\"1\":{\"32\":3}}],[\"xinwechat\",{\"1\":{\"173\":2}}],[\"xiamen\",{\"1\":{\"103\":2,\"104\":16,\"105\":2}}],[\"xxx\",{\"1\":{\"132\":2}}],[\"xf\",{\"1\":{\"104\":1,\"105\":1,\"106\":1}}],[\"x\",{\"1\":{\"32\":24,\"43\":2,\"46\":2,\"66\":6,\"104\":1,\"105\":1,\"150\":2,\"152\":1}}],[\"~~~~~^^^^^^\",{\"1\":{\"170\":1}}],[\"~~~~~~~^^^^^\",{\"1\":{\"132\":1}}],[\"~~~^^^\",{\"1\":{\"152\":1}}],[\"~\",{\"1\":{\"27\":1}}],[\"=99\",{\"1\":{\"167\":1}}],[\"=98\",{\"1\":{\"167\":2}}],[\"=list\",{\"1\":{\"128\":1}}],[\"===\",{\"1\":{\"198\":1}}],[\"==\",{\"1\":{\"63\":3,\"65\":2,\"66\":2,\"67\":2,\"68\":1,\"167\":2}}],[\"=\",{\"1\":{\"22\":1,\"24\":3,\"25\":3,\"27\":3,\"29\":3,\"30\":1,\"32\":17,\"38\":4,\"40\":2,\"43\":2,\"44\":1,\"46\":2,\"47\":1,\"50\":2,\"51\":1,\"53\":2,\"54\":2,\"56\":1,\"61\":8,\"62\":5,\"63\":3,\"64\":29,\"65\":4,\"66\":4,\"67\":4,\"68\":2,\"73\":6,\"74\":1,\"76\":1,\"77\":3,\"78\":7,\"79\":3,\"80\":6,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"91\":2,\"92\":4,\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":1,\"98\":1,\"99\":3,\"100\":4,\"101\":4,\"102\":2,\"103\":4,\"104\":15,\"105\":5,\"106\":9,\"108\":5,\"109\":10,\"110\":3,\"112\":1,\"113\":1,\"116\":3,\"117\":14,\"122\":3,\"125\":1,\"126\":1,\"127\":2,\"128\":4,\"129\":1,\"130\":1,\"131\":1,\"132\":9,\"134\":2,\"135\":1,\"137\":2,\"138\":2,\"139\":1,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"145\":1,\"150\":1,\"152\":3,\"153\":1,\"154\":2,\"155\":3,\"157\":4,\"158\":1,\"160\":6,\"165\":1,\"166\":3,\"167\":6,\"169\":1,\"170\":1,\"171\":2,\"172\":3,\"173\":1,\"175\":4,\"176\":1,\"177\":4,\"179\":1,\"180\":2,\"181\":2,\"182\":2,\"183\":3,\"187\":1,\"188\":2,\"189\":2,\"190\":2,\"191\":2,\"192\":4,\"193\":2,\"197\":1,\"198\":2,\"200\":4,\"212\":1}}],[\"video\",{\"1\":{\"215\":5}}],[\"view\",{\"1\":{\"160\":1}}],[\"viewing\",{\"1\":{\"48\":1}}],[\"viewed\",{\"1\":{\"48\":2}}],[\"venn\",{\"1\":{\"191\":1}}],[\"ve\",{\"1\":{\"164\":1}}],[\"very\",{\"1\":{\"113\":1}}],[\"vs\",{\"0\":{\"48\":1}}],[\"voting\",{\"1\":{\"22\":1}}],[\"various\",{\"1\":{\"164\":1,\"167\":2}}],[\"variable\",{\"1\":{\"21\":2,\"22\":6,\"31\":3,\"32\":12,\"48\":1,\"64\":1,\"105\":2,\"117\":3,\"137\":1,\"167\":3,\"173\":1,\"175\":1,\"199\":1}}],[\"variables\",{\"0\":{\"18\":1,\"19\":1,\"22\":1,\"25\":1,\"29\":1,\"30\":1,\"31\":1},\"1\":{\"24\":1,\"31\":1,\"32\":2,\"105\":3,\"164\":1}}],[\"var\",{\"1\":{\"32\":7}}],[\"valid\",{\"1\":{\"32\":2}}],[\"valueerror\",{\"1\":{\"90\":1}}],[\"value2\",{\"1\":{\"51\":1}}],[\"value1\",{\"1\":{\"51\":1}}],[\"values\",{\"0\":{\"30\":1,\"63\":1,\"181\":1,\"197\":1},\"1\":{\"32\":2,\"51\":2,\"54\":1,\"129\":1,\"166\":1,\"167\":3,\"181\":6,\"182\":3,\"183\":2,\"197\":1,\"214\":1}}],[\"value\",{\"0\":{\"29\":1,\"141\":1,\"166\":1},\"1\":{\"21\":2,\"22\":3,\"24\":1,\"32\":4,\"51\":1,\"54\":1,\"64\":1,\"80\":1,\"87\":1,\"129\":2,\"165\":4,\"166\":2,\"167\":6,\"169\":1,\"171\":9,\"174\":1,\"179\":1,\"182\":1,\"183\":1,\"198\":2,\"199\":2,\"209\":1,\"210\":1}}],[\"vast\",{\"1\":{\"22\":1}}],[\"round\",{\"1\":{\"151\":1}}],[\"rofn\",{\"1\":{\"80\":1}}],[\"rsplit\",{\"0\":{\"101\":1},\"1\":{\"101\":4}}],[\"rstrip\",{\"0\":{\"98\":1},\"1\":{\"98\":1}}],[\"rthis\",{\"1\":{\"100\":3,\"101\":4}}],[\"rnforthis\",{\"1\":{\"100\":1}}],[\"rnf\",{\"1\":{\"100\":3,\"101\":3}}],[\"r\",{\"1\":{\"89\":1,\"102\":2,\"109\":6,\"122\":2,\"132\":2}}],[\"risers\",{\"1\":{\"73\":1}}],[\"right\",{\"1\":{\"22\":1,\"41\":2,\"44\":6,\"47\":6,\"64\":1,\"77\":1,\"101\":1,\"198\":3}}],[\"rule\",{\"1\":{\"212\":1}}],[\"rules\",{\"0\":{\"31\":1},\"1\":{\"62\":1}}],[\"rushing\",{\"1\":{\"73\":1}}],[\"runtime\",{\"1\":{\"113\":1}}],[\"runners\",{\"1\":{\"73\":1}}],[\"running\",{\"1\":{\"54\":1}}],[\"run\",{\"1\":{\"48\":1,\"54\":1}}],[\"rare\",{\"1\":{\"215\":9}}],[\"random\",{\"1\":{\"215\":1}}],[\"range\",{\"0\":{\"77\":1,\"126\":1},\"1\":{\"1\":1}}],[\"rather\",{\"1\":{\"212\":1}}],[\"rates\",{\"1\":{\"209\":3}}],[\"raises\",{\"1\":{\"90\":1}}],[\"raised\",{\"1\":{\"67\":1,\"117\":1,\"130\":1,\"143\":1}}],[\"raise\",{\"1\":{\"31\":1}}],[\"reflection\",{\"0\":{\"192\":1}}],[\"referred\",{\"1\":{\"41\":1,\"215\":1}}],[\"references\",{\"1\":{\"22\":1}}],[\"retrieving\",{\"1\":{\"175\":1}}],[\"retrieve\",{\"1\":{\"171\":1}}],[\"returned\",{\"1\":{\"171\":2}}],[\"returning\",{\"1\":{\"146\":1}}],[\"returns\",{\"1\":{\"74\":1,\"86\":1,\"87\":1,\"89\":3,\"90\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":1,\"95\":1,\"100\":1,\"101\":1,\"146\":1,\"160\":1,\"170\":1,\"171\":1,\"190\":1,\"191\":1,\"198\":3}}],[\"return\",{\"1\":{\"31\":1,\"48\":1,\"171\":4,\"198\":1}}],[\"requires\",{\"1\":{\"167\":1}}],[\"requirement\",{\"1\":{\"117\":1}}],[\"requirements\",{\"1\":{\"62\":1,\"118\":1,\"164\":1}}],[\"registering\",{\"1\":{\"107\":1}}],[\"reaches\",{\"1\":{\"198\":1}}],[\"reads\",{\"1\":{\"216\":1}}],[\"reading\",{\"0\":{\"111\":1}}],[\"read\",{\"1\":{\"105\":1}}],[\"really\",{\"1\":{\"73\":1,\"212\":1}}],[\"real\",{\"1\":{\"73\":1,\"215\":1}}],[\"received\",{\"1\":{\"215\":1}}],[\"recent\",{\"1\":{\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"170\":1,\"173\":1}}],[\"record\",{\"1\":{\"48\":1}}],[\"reverse=true\",{\"1\":{\"145\":2}}],[\"reverse=false\",{\"0\":{\"145\":1,\"146\":1},\"1\":{\"146\":1}}],[\"reverse\",{\"1\":{\"127\":1,\"146\":1,\"198\":1}}],[\"reversed\",{\"1\":{\"62\":4,\"80\":2,\"127\":1}}],[\"reversal\",{\"0\":{\"80\":1},\"1\":{\"62\":1}}],[\"resolve\",{\"1\":{\"154\":1}}],[\"resources\",{\"1\":{\"48\":1}}],[\"results\",{\"1\":{\"63\":1,\"64\":1,\"210\":1,\"211\":1}}],[\"result\",{\"1\":{\"60\":4,\"65\":1,\"66\":1,\"68\":1,\"80\":1,\"118\":1,\"152\":1,\"166\":1}}],[\"repeat\",{\"0\":{\"142\":1}}],[\"repeating\",{\"1\":{\"54\":1}}],[\"replacements\",{\"1\":{\"99\":1}}],[\"replaces\",{\"1\":{\"99\":3}}],[\"replace\",{\"0\":{\"99\":1},\"1\":{\"99\":3,\"108\":1}}],[\"represented\",{\"1\":{\"165\":1}}],[\"representing\",{\"1\":{\"32\":1,\"209\":1}}],[\"representative\",{\"1\":{\"22\":1}}],[\"represent\",{\"1\":{\"22\":2,\"32\":1,\"122\":1}}],[\"represents\",{\"1\":{\"22\":2,\"32\":2,\"197\":1}}],[\"redundant\",{\"1\":{\"48\":1}}],[\"remaining\",{\"1\":{\"210\":1,\"211\":2}}],[\"remain\",{\"0\":{\"209\":1}}],[\"remainder\",{\"0\":{\"67\":1},\"1\":{\"61\":1,\"67\":3}}],[\"reminder\",{\"1\":{\"207\":1}}],[\"removal\",{\"1\":{\"139\":2}}],[\"removes\",{\"1\":{\"61\":1,\"96\":5,\"97\":1,\"98\":1,\"198\":1}}],[\"removed\",{\"1\":{\"54\":1,\"138\":1,\"139\":1,\"151\":1}}],[\"remove\",{\"0\":{\"139\":1},\"1\":{\"32\":1,\"96\":1,\"97\":1,\"98\":1,\"139\":3}}],[\"remember\",{\"1\":{\"77\":1,\"78\":1}}],[\"remembering\",{\"1\":{\"21\":1}}],[\"joined\",{\"1\":{\"102\":2}}],[\"joins\",{\"1\":{\"102\":1}}],[\"join\",{\"0\":{\"102\":1},\"1\":{\"102\":2}}],[\"journey\",{\"1\":{\"0\":1}}],[\"jiabao\",{\"1\":{\"73\":1}}],[\"jaden\",{\"1\":{\"32\":10}}],[\"january\",{\"1\":{\"21\":2}}],[\"judgments\",{\"1\":{\"197\":1}}],[\"juice\",{\"1\":{\"32\":10}}],[\"just\",{\"1\":{\"21\":1,\"48\":2}}],[\"ydn\",{\"1\":{\"108\":1}}],[\"yc\",{\"1\":{\"87\":1}}],[\"year\",{\"1\":{\"209\":6}}],[\"yewente\",{\"1\":{\"103\":1}}],[\"yet\",{\"1\":{\"73\":1}}],[\"yes\",{\"1\":{\"24\":1,\"48\":1}}],[\"yuechuang\",{\"1\":{\"73\":2}}],[\"y\",{\"1\":{\"32\":2,\"66\":6,\"128\":2,\"150\":2,\"152\":1}}],[\"yield\",{\"1\":{\"31\":1}}],[\"yitong\",{\"1\":{\"21\":3}}],[\"your\",{\"1\":{\"48\":1,\"62\":3,\"113\":2,\"164\":2,\"207\":2,\"208\":3,\"209\":1,\"210\":1,\"211\":2,\"215\":11}}],[\"younger\",{\"1\":{\"32\":4}}],[\"you\",{\"0\":{\"208\":1},\"1\":{\"21\":5,\"32\":6,\"48\":8,\"54\":5,\"62\":2,\"73\":4,\"80\":2,\"108\":2,\"109\":3,\"122\":1,\"130\":1,\"160\":3,\"167\":1,\"171\":3,\"207\":3,\"209\":1,\"215\":1}}],[\"🌰\",{\"0\":{\"21\":1}}],[\"量\",{\"1\":{\"20\":1}}],[\"变\",{\"1\":{\"20\":1}}],[\"written\",{\"1\":{\"214\":1}}],[\"writing\",{\"1\":{\"113\":1}}],[\"write\",{\"1\":{\"62\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"73\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1}}],[\"wrong\",{\"1\":{\"73\":1}}],[\"warning\",{\"1\":{\"54\":1,\"80\":1}}],[\"warehouse\",{\"1\":{\"48\":17}}],[\"wasteful\",{\"1\":{\"48\":1}}],[\"want\",{\"1\":{\"48\":2,\"79\":1,\"103\":1,\"108\":1,\"109\":1,\"110\":1,\"130\":1,\"160\":1,\"171\":2,\"216\":1}}],[\"wants\",{\"1\":{\"32\":4}}],[\"waved\",{\"1\":{\"22\":1}}],[\"wonderful\",{\"1\":{\"117\":1}}],[\"word\",{\"1\":{\"85\":1,\"87\":1,\"88\":1,\"89\":4,\"90\":4}}],[\"words\",{\"1\":{\"31\":1}}],[\"worked\",{\"1\":{\"216\":11}}],[\"work\",{\"1\":{\"54\":1,\"109\":1}}],[\"world\",{\"1\":{\"32\":1}}],[\"would\",{\"1\":{\"21\":1,\"109\":1,\"173\":1}}],[\"weight\",{\"1\":{\"212\":3,\"213\":2,\"214\":2}}],[\"well\",{\"1\":{\"209\":1}}],[\"welcome\",{\"1\":{\"103\":2,\"104\":24,\"105\":2,\"208\":1}}],[\"week\",{\"1\":{\"48\":1}}],[\"we\",{\"1\":{\"21\":1,\"22\":1,\"24\":1,\"48\":5,\"54\":1,\"73\":3,\"79\":2,\"80\":1,\"103\":2,\"115\":1,\"117\":1,\"164\":2,\"171\":3,\"207\":1,\"216\":1}}],[\"web\",{\"1\":{\"209\":1},\"2\":{\"12\":1,\"13\":1,\"17\":1,\"34\":1,\"58\":1,\"70\":1,\"120\":1,\"148\":1,\"162\":1,\"185\":1,\"195\":1,\"202\":1,\"205\":1,\"218\":1}}],[\"who\",{\"1\":{\"73\":1}}],[\"whether\",{\"1\":{\"92\":1,\"175\":1,\"215\":1}}],[\"where\",{\"1\":{\"48\":1,\"154\":1,\"160\":1}}],[\"when\",{\"1\":{\"21\":1,\"48\":1,\"107\":1,\"127\":1,\"154\":1,\"167\":1,\"170\":1,\"171\":2,\"190\":1,\"191\":1,\"198\":1}}],[\"whitespace\",{\"1\":{\"95\":2,\"96\":1,\"97\":1,\"98\":1}}],[\"while\",{\"1\":{\"31\":1,\"107\":2,\"151\":2,\"167\":1}}],[\"which\",{\"1\":{\"22\":1,\"32\":5,\"48\":2,\"164\":1,\"171\":2}}],[\"why\",{\"1\":{\"21\":1,\"48\":4,\"54\":2,\"167\":1}}],[\"what\",{\"1\":{\"21\":1,\"73\":1,\"80\":1,\"110\":1,\"154\":1,\"167\":1,\"215\":5}}],[\"willow\",{\"1\":{\"22\":1}}],[\"will\",{\"1\":{\"1\":1,\"22\":2,\"32\":2,\"48\":5,\"54\":2,\"60\":2,\"73\":1,\"80\":2,\"117\":1,\"130\":2,\"134\":1,\"137\":1,\"139\":1,\"143\":1,\"152\":1,\"166\":1,\"167\":1,\"171\":2,\"207\":1,\"209\":3}}],[\"without\",{\"1\":{\"207\":1}}],[\"within\",{\"1\":{\"73\":1,\"211\":1}}],[\"with\",{\"0\":{\"127\":1,\"170\":1},\"1\":{\"1\":4,\"21\":1,\"24\":1,\"31\":2,\"32\":5,\"41\":1,\"44\":1,\"47\":1,\"86\":1,\"87\":1,\"99\":3,\"102\":1,\"117\":3,\"132\":2,\"150\":1,\"160\":1,\"164\":1,\"166\":1,\"167\":1,\"169\":1,\"207\":2,\"210\":1,\"211\":1}}],[\"mr\",{\"1\":{\"164\":1}}],[\"minimum\",{\"1\":{\"211\":2}}],[\"minutes\",{\"1\":{\"209\":1,\"216\":7}}],[\"minus\",{\"1\":{\"191\":1,\"192\":1}}],[\"misconduct\",{\"1\":{\"207\":1}}],[\"missing\",{\"1\":{\"73\":1,\"80\":1}}],[\"mixing\",{\"1\":{\"73\":1}}],[\"might\",{\"1\":{\"54\":1}}],[\"m\",{\"1\":{\"67\":8,\"73\":3,\"102\":1}}],[\"muscle\",{\"1\":{\"212\":1}}],[\"must\",{\"1\":{\"32\":1,\"105\":2,\"106\":1,\"127\":1,\"167\":1,\"208\":1,\"209\":2,\"214\":1}}],[\"mutable\",{\"1\":{\"48\":2,\"54\":1,\"151\":1}}],[\"mutability\",{\"1\":{\"44\":1,\"51\":1,\"54\":1,\"122\":1}}],[\"multiplication\",{\"0\":{\"66\":1},\"1\":{\"61\":1}}],[\"multiple\",{\"0\":{\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"78\":1,\"135\":1,\"200\":1},\"1\":{\"24\":1,\"32\":1,\"104\":2,\"106\":1,\"132\":4,\"134\":1,\"137\":1,\"160\":1,\"200\":2}}],[\"multi\",{\"1\":{\"32\":1}}],[\"multimedia\",{\"0\":{\"11\":1}}],[\"myvar\",{\"1\":{\"32\":1}}],[\"myvar2\",{\"1\":{\"32\":1}}],[\"my\",{\"1\":{\"32\":3}}],[\"moves\",{\"1\":{\"209\":1}}],[\"most\",{\"1\":{\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"170\":1,\"173\":1,\"215\":1}}],[\"modulus\",{\"1\":{\"61\":1}}],[\"modifies\",{\"1\":{\"145\":1}}],[\"modified\",{\"1\":{\"41\":1,\"151\":2}}],[\"modification\",{\"1\":{\"132\":2}}],[\"modifications\",{\"1\":{\"132\":1}}],[\"modifying\",{\"0\":{\"25\":1,\"26\":1,\"132\":1},\"1\":{\"48\":1,\"132\":2,\"172\":1}}],[\"modify\",{\"1\":{\"24\":1,\"54\":1,\"122\":1,\"152\":1,\"157\":1,\"172\":1}}],[\"more\",{\"1\":{\"31\":1,\"48\":3,\"103\":1,\"160\":1,\"167\":1,\"198\":1}}],[\"molded\",{\"1\":{\"22\":1}}],[\"monetary\",{\"1\":{\"210\":1}}],[\"money\",{\"1\":{\"103\":4,\"104\":2,\"105\":4,\"106\":15,\"211\":2,\"215\":1}}],[\"month\",{\"1\":{\"21\":1}}],[\"monthly\",{\"1\":{\"21\":2}}],[\"monitor\",{\"1\":{\"21\":2}}],[\"mechanics\",{\"1\":{\"215\":1}}],[\"meters\",{\"1\":{\"213\":1,\"214\":1}}],[\"metric\",{\"1\":{\"213\":1,\"214\":1}}],[\"method\",{\"0\":{\"116\":1,\"117\":1,\"170\":1},\"1\":{\"122\":1,\"130\":1,\"167\":7,\"171\":5,\"187\":1}}],[\"methods\",{\"0\":{\"28\":1,\"81\":1,\"178\":1},\"1\":{\"32\":1,\"104\":1,\"106\":1,\"167\":1}}],[\"meimei\",{\"1\":{\"175\":1}}],[\"messagetemp\",{\"1\":{\"173\":1}}],[\"message\",{\"1\":{\"62\":1,\"167\":2,\"173\":1,\"208\":1,\"215\":1}}],[\"meant\",{\"1\":{\"167\":1}}],[\"meaning\",{\"1\":{\"54\":2,\"109\":1,\"197\":1}}],[\"means\",{\"1\":{\"41\":1,\"48\":1}}],[\"members\",{\"1\":{\"22\":1}}],[\"memory\",{\"1\":{\"21\":1,\"48\":2}}],[\"mentoring\",{\"0\":{\"14\":1,\"219\":1,\"221\":1}}],[\"mass\",{\"1\":{\"212\":2}}],[\"masses\",{\"1\":{\"22\":2}}],[\"maximum\",{\"1\":{\"211\":2}}],[\"maxsplit\",{\"1\":{\"100\":2,\"101\":2}}],[\"mad\",{\"0\":{\"211\":1}}],[\"madongmei\",{\"1\":{\"165\":1,\"166\":4,\"172\":2}}],[\"math\",{\"1\":{\"176\":3}}],[\"mathematical\",{\"1\":{\"22\":1}}],[\"magic\",{\"1\":{\"117\":1}}],[\"markdown\",{\"1\":{\"67\":1,\"92\":1}}],[\"march\",{\"1\":{\"21\":2}}],[\"many\",{\"1\":{\"54\":1,\"78\":1,\"100\":1,\"101\":1}}],[\"manager\",{\"1\":{\"48\":7}}],[\"may\",{\"1\":{\"48\":2,\"51\":1,\"54\":1,\"73\":2,\"103\":1,\"167\":1,\"209\":1}}],[\"majority\",{\"1\":{\"22\":1}}],[\"ma\",{\"1\":{\"21\":1,\"170\":3,\"171\":3}}],[\"md\",{\"1\":{\"1\":1}}],[\"95\",{\"1\":{\"125\":1,\"127\":1,\"172\":2,\"173\":3,\"175\":1,\"177\":1}}],[\"91\",{\"1\":{\"62\":2}}],[\"99\",{\"1\":{\"62\":1,\"125\":1,\"127\":1,\"167\":3,\"169\":1,\"170\":1,\"171\":1,\"172\":2,\"173\":3,\"175\":1}}],[\"96\",{\"1\":{\"21\":1}}],[\"98\",{\"1\":{\"21\":1,\"125\":2,\"127\":1,\"167\":5,\"169\":1,\"170\":1,\"171\":3,\"172\":1,\"173\":2,\"175\":1,\"177\":1,\"179\":2,\"180\":1,\"181\":3,\"182\":3,\"183\":3}}],[\"9\",{\"0\":{\"10\":1,\"90\":1,\"110\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1},\"1\":{\"60\":4,\"61\":4,\"62\":2,\"80\":1,\"126\":1,\"127\":1,\"128\":1,\"157\":3,\"158\":1,\"173\":1,\"193\":2}}],[\"82849431\",{\"1\":{\"214\":1}}],[\"80\",{\"1\":{\"125\":1,\"127\":1,\"215\":1}}],[\"81\",{\"1\":{\"62\":1,\"67\":1}}],[\"89\",{\"1\":{\"21\":1,\"177\":1}}],[\"8\",{\"0\":{\"9\":1,\"89\":1,\"109\":1,\"133\":1,\"134\":1,\"135\":1,\"159\":1,\"160\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1},\"1\":{\"60\":4,\"61\":1,\"62\":2,\"65\":1,\"117\":1,\"126\":1,\"127\":1,\"128\":2,\"132\":1,\"157\":3,\"158\":1,\"188\":1,\"189\":2,\"190\":1,\"191\":2,\"192\":2,\"193\":1,\"197\":1}}],[\"71\",{\"1\":{\"214\":1}}],[\"72\",{\"1\":{\"117\":1}}],[\"7th\",{\"1\":{\"77\":1}}],[\"7\",{\"0\":{\"8\":1,\"55\":1,\"56\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"88\":1,\"108\":1,\"132\":1,\"156\":1,\"157\":1,\"158\":1,\"173\":1,\"193\":1},\"1\":{\"60\":2,\"126\":1,\"127\":2,\"128\":1,\"157\":3,\"158\":1,\"209\":1}}],[\"58\",{\"1\":{\"213\":1}}],[\"50\",{\"1\":{\"213\":1}}],[\"500\",{\"1\":{\"54\":1}}],[\"59pm\",{\"1\":{\"207\":1}}],[\"5\",{\"0\":{\"6\":1,\"31\":1,\"49\":1,\"50\":1,\"51\":1,\"64\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"130\":1,\"154\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"183\":1,\"191\":1},\"1\":{\"32\":1,\"38\":2,\"60\":2,\"65\":1,\"66\":1,\"67\":1,\"68\":2,\"80\":1,\"92\":1,\"116\":2,\"118\":1,\"126\":2,\"127\":2,\"128\":5,\"129\":2,\"130\":2,\"131\":2,\"132\":11,\"134\":6,\"135\":3,\"137\":5,\"138\":6,\"139\":3,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"145\":3,\"155\":2,\"157\":3,\"158\":1,\"187\":1,\"188\":3,\"189\":3,\"190\":2,\"191\":2,\"192\":2,\"193\":3,\"197\":1,\"198\":11,\"215\":3}}],[\"453592\",{\"1\":{\"214\":1}}],[\"42\",{\"1\":{\"209\":1}}],[\"4b975e58c46c58ce379c1852275bb5cf\",{\"1\":{\"173\":1}}],[\"40\",{\"1\":{\"103\":1,\"215\":1}}],[\"4\",{\"0\":{\"5\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"63\":1,\"68\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"80\":1,\"85\":1,\"107\":1,\"127\":1,\"129\":1,\"153\":1,\"167\":1,\"182\":1,\"190\":1},\"1\":{\"60\":4,\"61\":2,\"63\":2,\"68\":1,\"115\":4,\"116\":2,\"126\":2,\"127\":3,\"128\":5,\"129\":2,\"130\":2,\"137\":1,\"153\":1,\"155\":2,\"157\":3,\"158\":1,\"187\":1,\"188\":1,\"189\":2,\"190\":2,\"191\":2,\"192\":2,\"193\":2,\"207\":1,\"210\":2,\"211\":2,\"215\":2}}],[\"382038453\",{\"1\":{\"209\":1}}],[\"38\",{\"1\":{\"117\":1}}],[\"37\",{\"1\":{\"117\":2,\"210\":1,\"211\":2}}],[\"365\",{\"1\":{\"209\":1}}],[\"36\",{\"1\":{\"117\":1}}],[\"35\",{\"1\":{\"117\":2,\"216\":1}}],[\"3456\",{\"1\":{\"165\":1,\"166\":4}}],[\"34\",{\"1\":{\"117\":1}}],[\"330\",{\"1\":{\"209\":1}}],[\"33\",{\"1\":{\"117\":2}}],[\"32\",{\"1\":{\"117\":1}}],[\"31\",{\"1\":{\"117\":2}}],[\"30\",{\"1\":{\"117\":1,\"140\":2}}],[\"39\",{\"1\":{\"108\":1,\"117\":2}}],[\"3f\",{\"1\":{\"104\":2,\"105\":1,\"106\":2}}],[\"3rd\",{\"1\":{\"76\":1,\"77\":1,\"139\":1}}],[\"3\",{\"0\":{\"4\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"42\":1,\"43\":1,\"44\":1,\"48\":1,\"62\":1,\"65\":1,\"66\":1,\"67\":2,\"68\":1,\"74\":1,\"78\":1,\"84\":1,\"106\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":2,\"126\":1,\"128\":1,\"139\":1,\"152\":1,\"166\":1,\"171\":1,\"177\":1,\"181\":1,\"189\":1,\"199\":1,\"200\":1},\"1\":{\"24\":2,\"25\":2,\"30\":2,\"32\":5,\"50\":2,\"51\":1,\"53\":2,\"54\":4,\"60\":4,\"61\":4,\"62\":1,\"63\":6,\"66\":1,\"78\":1,\"99\":1,\"100\":1,\"101\":1,\"115\":4,\"116\":2,\"117\":8,\"125\":1,\"126\":2,\"127\":2,\"128\":4,\"129\":3,\"130\":3,\"131\":1,\"132\":14,\"134\":6,\"135\":3,\"137\":4,\"138\":6,\"139\":3,\"140\":2,\"141\":1,\"142\":2,\"143\":1,\"145\":3,\"155\":2,\"157\":3,\"158\":1,\"160\":5,\"187\":1,\"188\":1,\"189\":2,\"190\":2,\"191\":2,\"192\":2,\"193\":2,\"198\":5,\"215\":2,\"216\":2}}],[\"1v1\",{\"1\":{\"207\":1}}],[\"174\",{\"1\":{\"209\":1}}],[\"178\",{\"1\":{\"125\":1}}],[\"17\",{\"0\":{\"97\":1},\"1\":{\"116\":2,\"117\":1,\"200\":2,\"210\":1,\"211\":1}}],[\"16\",{\"0\":{\"96\":1},\"1\":{\"116\":1}}],[\"154389\",{\"1\":{\"164\":1}}],[\"15\",{\"0\":{\"95\":1},\"1\":{\"116\":2,\"200\":2,\"209\":1,\"216\":2}}],[\"14\",{\"0\":{\"94\":1,\"144\":1,\"145\":1,\"146\":1},\"1\":{\"116\":2,\"117\":2}}],[\"135\",{\"1\":{\"214\":1}}],[\"13579\",{\"1\":{\"78\":1,\"79\":1}}],[\"131559\",{\"1\":{\"164\":1}}],[\"131452\",{\"1\":{\"164\":1}}],[\"132456\",{\"1\":{\"164\":1}}],[\"13\",{\"0\":{\"93\":1,\"143\":1},\"1\":{\"106\":6,\"116\":1,\"210\":1}}],[\"1114\",{\"1\":{\"208\":1}}],[\"1123\",{\"1\":{\"165\":1,\"166\":4}}],[\"11\",{\"0\":{\"92\":1,\"118\":1,\"141\":1},\"1\":{\"80\":1,\"116\":2,\"118\":1,\"128\":1,\"207\":1,\"210\":1}}],[\"1st\",{\"1\":{\"76\":1,\"104\":1,\"167\":1}}],[\"190\",{\"1\":{\"103\":4,\"104\":2,\"105\":2,\"106\":6}}],[\"19\",{\"0\":{\"99\":1},\"1\":{\"62\":1,\"106\":1,\"117\":2,\"122\":1,\"153\":3,\"175\":1}}],[\"1+1\",{\"1\":{\"60\":2}}],[\"180595\",{\"1\":{\"164\":2}}],[\"18\",{\"0\":{\"98\":1},\"1\":{\"50\":2,\"62\":2,\"73\":1,\"106\":5,\"116\":2,\"117\":1,\"122\":1,\"175\":2,\"200\":4,\"214\":1}}],[\"12\",{\"0\":{\"142\":1},\"1\":{\"44\":2,\"47\":2,\"62\":2,\"66\":1,\"74\":1,\"89\":1,\"92\":1,\"116\":1,\"117\":4,\"128\":2,\"216\":1}}],[\"1234\",{\"1\":{\"165\":2,\"166\":4}}],[\"123456\",{\"1\":{\"164\":2}}],[\"123\",{\"1\":{\"32\":1}}],[\"123abc\",{\"1\":{\"32\":1}}],[\"1~1~1\",{\"1\":{\"27\":1}}],[\"109\",{\"1\":{\"209\":1}}],[\"100\",{\"1\":{\"172\":2,\"215\":2}}],[\"10`\",{\"1\":{\"64\":1}}],[\"10\",{\"0\":{\"11\":1,\"91\":1,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"140\":1},\"1\":{\"60\":1,\"62\":5,\"64\":11,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"110\":4,\"116\":1,\"128\":2,\"140\":2,\"141\":1,\"173\":1,\"197\":2}}],[\"1\",{\"0\":{\"2\":1,\"14\":1,\"15\":1,\"19\":1,\"20\":2,\"21\":1,\"24\":1,\"29\":1,\"37\":1,\"38\":2,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"56\":1,\"60\":1,\"65\":1,\"72\":1,\"76\":1,\"82\":1,\"104\":1,\"112\":1,\"115\":1,\"122\":1,\"124\":1,\"134\":1,\"137\":1,\"145\":1,\"150\":1,\"157\":1,\"160\":1,\"164\":1,\"169\":1,\"175\":1,\"179\":1,\"187\":1,\"197\":1,\"200\":1,\"206\":1},\"1\":{\"24\":2,\"25\":2,\"27\":3,\"29\":4,\"30\":2,\"32\":5,\"38\":4,\"41\":1,\"43\":8,\"44\":4,\"46\":8,\"47\":4,\"48\":1,\"50\":10,\"53\":8,\"54\":12,\"60\":2,\"61\":6,\"62\":2,\"63\":6,\"64\":2,\"67\":1,\"76\":2,\"78\":2,\"79\":1,\"80\":12,\"89\":2,\"103\":1,\"104\":5,\"108\":1,\"115\":2,\"116\":2,\"117\":13,\"126\":1,\"127\":7,\"128\":9,\"129\":2,\"130\":2,\"131\":1,\"132\":9,\"134\":6,\"135\":3,\"137\":5,\"138\":5,\"139\":3,\"140\":2,\"141\":2,\"142\":4,\"143\":4,\"145\":9,\"152\":2,\"153\":2,\"154\":2,\"155\":2,\"157\":3,\"158\":1,\"160\":5,\"164\":1,\"166\":1,\"167\":2,\"187\":1,\"188\":3,\"189\":3,\"190\":2,\"191\":2,\"192\":2,\"193\":3,\"209\":1,\"211\":1,\"213\":1,\"214\":2,\"215\":3}}],[\"gameplay\",{\"1\":{\"215\":1}}],[\"game\",{\"1\":{\"215\":5}}],[\"games\",{\"1\":{\"215\":1}}],[\"gacha\",{\"0\":{\"215\":1},\"1\":{\"215\":1}}],[\"gaxa\",{\"1\":{\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1,\"173\":1}}],[\"gov\",{\"1\":{\"209\":1}}],[\"gone\",{\"0\":{\"209\":1}}],[\"going\",{\"1\":{\"80\":1}}],[\"grade\",{\"1\":{\"125\":4,\"127\":6,\"169\":2,\"170\":3,\"171\":4,\"172\":4,\"173\":10,\"175\":5,\"177\":3,\"179\":2,\"180\":3,\"181\":1,\"182\":3,\"183\":3}}],[\"greater\",{\"1\":{\"63\":2,\"68\":3,\"209\":2}}],[\"github\",{\"1\":{\"103\":1,\"108\":1,\"207\":1}}],[\"giving\",{\"1\":{\"22\":1}}],[\"given\",{\"1\":{\"129\":1}}],[\"give\",{\"1\":{\"21\":2}}],[\"g\",{\"1\":{\"62\":1}}],[\"global\",{\"1\":{\"31\":1,\"32\":3}}],[\"generally\",{\"1\":{\"197\":1}}],[\"generate\",{\"1\":{\"1\":1,\"62\":1}}],[\"gets\",{\"1\":{\"116\":1}}],[\"getting\",{\"0\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"126\":1,\"127\":1,\"142\":1},\"1\":{\"117\":1,\"215\":3}}],[\"get\",{\"0\":{\"143\":1,\"171\":1},\"1\":{\"31\":2,\"78\":3,\"79\":2,\"80\":1,\"109\":1,\"112\":1,\"115\":1,\"117\":2,\"118\":1,\"129\":1,\"131\":1,\"171\":9,\"175\":3,\"180\":1,\"181\":1,\"182\":1,\"215\":1}}],[\"guide\",{\"0\":{\"1\":1}}],[\"idealists\",{\"1\":{\"73\":1}}],[\"identifier\",{\"1\":{\"1\":1}}],[\"immigration\",{\"1\":{\"209\":1}}],[\"immigrant\",{\"1\":{\"209\":1}}],[\"immutable\",{\"1\":{\"51\":1,\"54\":1,\"108\":1,\"151\":1,\"157\":1,\"166\":1,\"167\":1}}],[\"immutability\",{\"0\":{\"108\":1,\"152\":1},\"1\":{\"41\":2,\"47\":1}}],[\"imei\",{\"1\":{\"167\":1}}],[\"imac\",{\"1\":{\"103\":1,\"108\":1}}],[\"imagine\",{\"1\":{\"21\":1}}],[\"image\",{\"0\":{\"4\":1},\"1\":{\"1\":1,\"36\":1,\"44\":1,\"60\":1,\"72\":1,\"73\":1,\"80\":2,\"113\":2,\"124\":1,\"126\":1,\"127\":1,\"128\":3,\"132\":1,\"134\":1,\"141\":1,\"151\":1,\"170\":1,\"172\":1,\"173\":1,\"183\":1,\"187\":1,\"197\":1,\"200\":1}}],[\"improve\",{\"1\":{\"215\":1}}],[\"implemented\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1}}],[\"implement\",{\"1\":{\"62\":1,\"73\":2}}],[\"impossible\",{\"1\":{\"54\":1,\"164\":1}}],[\"import\",{\"1\":{\"31\":1,\"32\":1}}],[\"if\",{\"0\":{\"141\":1,\"203\":1},\"1\":{\"31\":1,\"48\":6,\"54\":1,\"60\":2,\"62\":1,\"63\":6,\"68\":2,\"79\":1,\"80\":3,\"86\":1,\"87\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":3,\"93\":2,\"94\":2,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":1,\"101\":1,\"108\":1,\"109\":1,\"130\":1,\"137\":1,\"139\":1,\"143\":1,\"145\":1,\"146\":1,\"160\":1,\"166\":1,\"171\":6,\"172\":2,\"175\":1,\"183\":1,\"198\":3,\"199\":2}}],[\"i\",{\"1\":{\"22\":1,\"73\":3,\"88\":1,\"100\":5,\"101\":5,\"102\":3,\"110\":2,\"115\":6,\"122\":1,\"132\":1,\"207\":2,\"209\":1}}],[\"issue\",{\"0\":{\"170\":1},\"1\":{\"103\":2,\"154\":1,\"170\":1}}],[\"issues\",{\"1\":{\"60\":2,\"116\":1,\"117\":1}}],[\"isspace\",{\"0\":{\"95\":1},\"1\":{\"95\":2}}],[\"islower\",{\"0\":{\"94\":1},\"1\":{\"94\":1}}],[\"isupper\",{\"0\":{\"93\":1},\"1\":{\"93\":1}}],[\"isalnum\",{\"1\":{\"92\":3}}],[\"isalpha\",{\"0\":{\"92\":1},\"1\":{\"92\":2}}],[\"isdigit\",{\"0\":{\"91\":1},\"1\":{\"91\":2}}],[\"is\",{\"0\":{\"115\":1},\"1\":{\"21\":1,\"22\":1,\"24\":1,\"31\":2,\"32\":11,\"38\":4,\"40\":2,\"41\":1,\"43\":2,\"44\":1,\"46\":2,\"47\":1,\"48\":21,\"50\":2,\"51\":1,\"53\":2,\"54\":6,\"60\":4,\"62\":7,\"63\":4,\"64\":2,\"68\":7,\"72\":1,\"73\":1,\"80\":2,\"89\":1,\"90\":1,\"91\":2,\"92\":3,\"96\":1,\"100\":3,\"103\":6,\"104\":2,\"105\":2,\"106\":15,\"107\":2,\"113\":1,\"115\":1,\"117\":5,\"122\":1,\"124\":1,\"129\":2,\"130\":4,\"137\":2,\"139\":1,\"143\":1,\"145\":2,\"146\":1,\"154\":1,\"160\":3,\"164\":2,\"166\":1,\"167\":7,\"171\":6,\"173\":1,\"175\":2,\"183\":1,\"198\":1,\"199\":2,\"208\":1,\"209\":5,\"210\":2,\"212\":3,\"213\":1,\"214\":3,\"215\":5,\"216\":1}}],[\"iterate\",{\"1\":{\"160\":1}}],[\"iterator\",{\"1\":{\"160\":4}}],[\"iterable\",{\"1\":{\"132\":1,\"160\":1}}],[\"item\",{\"1\":{\"108\":1,\"152\":1,\"165\":1,\"215\":9}}],[\"items\",{\"0\":{\"182\":1},\"1\":{\"48\":2,\"165\":1,\"182\":2,\"215\":1}}],[\"its\",{\"1\":{\"130\":1,\"209\":1,\"210\":1,\"211\":1}}],[\"it\",{\"0\":{\"129\":1},\"1\":{\"1\":2,\"21\":6,\"22\":1,\"24\":1,\"32\":1,\"48\":7,\"51\":1,\"54\":3,\"80\":4,\"89\":1,\"90\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":1,\"107\":1,\"113\":2,\"117\":2,\"122\":1,\"126\":1,\"127\":1,\"134\":1,\"137\":1,\"138\":1,\"146\":1,\"154\":1,\"157\":1,\"158\":2,\"160\":1,\"164\":1,\"166\":1,\"167\":6,\"170\":1,\"171\":2,\"172\":3,\"175\":1,\"183\":1,\"190\":1,\"191\":1,\"198\":1,\"208\":1,\"209\":2,\"210\":1,\"211\":1,\"212\":1}}],[\"inch\",{\"1\":{\"214\":1}}],[\"inches\",{\"1\":{\"214\":2}}],[\"including\",{\"1\":{\"74\":1,\"77\":1}}],[\"include\",{\"1\":{\"44\":1,\"126\":1,\"164\":1}}],[\"involves\",{\"1\":{\"60\":2,\"174\":1}}],[\"individual\",{\"1\":{\"62\":1,\"137\":1}}],[\"indices\",{\"0\":{\"124\":1},\"1\":{\"44\":1,\"47\":1}}],[\"independent\",{\"1\":{\"110\":1}}],[\"indeterminacy\",{\"1\":{\"54\":1}}],[\"indexing\",{\"0\":{\"153\":1}}],[\"index\",{\"0\":{\"90\":1,\"130\":1,\"143\":1},\"1\":{\"41\":3,\"44\":2,\"47\":2,\"54\":2,\"80\":2,\"89\":3,\"90\":4,\"104\":1,\"130\":5,\"138\":1,\"143\":2,\"212\":1}}],[\"initializing\",{\"1\":{\"22\":1}}],[\"initially\",{\"1\":{\"21\":1}}],[\"intuitive\",{\"1\":{\"113\":1}}],[\"int\",{\"0\":{\"37\":1},\"1\":{\"38\":7,\"50\":2,\"103\":1,\"116\":2,\"117\":2,\"154\":1,\"166\":4}}],[\"interact\",{\"1\":{\"210\":1,\"211\":1}}],[\"intersection\",{\"0\":{\"188\":1},\"1\":{\"188\":1,\"191\":1,\"192\":1}}],[\"interval\",{\"0\":{\"127\":1},\"1\":{\"25\":3,\"77\":1,\"78\":1}}],[\"intentionally\",{\"1\":{\"117\":1}}],[\"integer\",{\"1\":{\"38\":1,\"62\":2,\"106\":1,\"209\":3}}],[\"integers\",{\"1\":{\"32\":1,\"62\":1,\"118\":1}}],[\"into\",{\"1\":{\"21\":1,\"67\":1,\"130\":1}}],[\"introduction\",{\"0\":{\"15\":1,\"160\":1}}],[\"intro\",{\"0\":{\"0\":1}}],[\"inappropriate\",{\"1\":{\"21\":1}}],[\"in\",{\"0\":{\"81\":1,\"123\":1,\"126\":1,\"127\":1,\"132\":1,\"141\":2,\"142\":1,\"143\":1,\"175\":1,\"176\":1,\"177\":1,\"183\":1},\"1\":{\"21\":2,\"31\":3,\"32\":14,\"41\":1,\"44\":3,\"47\":3,\"48\":3,\"54\":2,\"60\":9,\"64\":1,\"67\":1,\"73\":3,\"74\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"103\":2,\"104\":1,\"105\":1,\"107\":1,\"108\":4,\"109\":1,\"115\":3,\"116\":9,\"117\":28,\"122\":1,\"124\":1,\"128\":12,\"132\":1,\"137\":1,\"141\":2,\"143\":1,\"145\":3,\"146\":2,\"151\":2,\"152\":2,\"160\":2,\"165\":1,\"166\":2,\"167\":6,\"170\":2,\"171\":4,\"173\":1,\"174\":5,\"180\":1,\"181\":1,\"182\":1,\"183\":4,\"188\":1,\"189\":1,\"190\":2,\"191\":2,\"197\":2,\"198\":3,\"199\":1,\"207\":3,\"209\":4,\"210\":2,\"211\":5,\"213\":2,\"214\":5,\"215\":7,\"216\":2}}],[\"information\",{\"0\":{\"6\":1},\"1\":{\"209\":1}}],[\"instructions\",{\"0\":{\"207\":1}}],[\"instance\",{\"1\":{\"139\":1}}],[\"instead\",{\"1\":{\"1\":1}}],[\"inside\",{\"1\":{\"41\":1,\"122\":2,\"125\":1,\"126\":1,\"134\":1}}],[\"inserting\",{\"0\":{\"130\":1}}],[\"inserted\",{\"1\":{\"129\":1}}],[\"insert\",{\"0\":{\"130\":1},\"1\":{\"1\":1,\"129\":1,\"130\":6}}],[\"input\",{\"0\":{\"111\":1,\"112\":1,\"113\":2,\"114\":1,\"115\":1},\"1\":{\"1\":1,\"54\":1,\"62\":4,\"68\":1,\"104\":2,\"106\":4,\"112\":6,\"113\":8,\"115\":5,\"116\":3,\"117\":21,\"118\":4,\"122\":1,\"129\":1,\"164\":1,\"209\":1,\"211\":2}}],[\"60\",{\"1\":{\"215\":1,\"216\":1}}],[\"666\",{\"1\":{\"106\":2}}],[\"6th\",{\"1\":{\"77\":1}}],[\"62\",{\"1\":{\"62\":1}}],[\"6+\",{\"1\":{\"51\":1}}],[\"6\",{\"0\":{\"7\":1,\"32\":1,\"52\":1,\"53\":1,\"54\":1,\"87\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"131\":1,\"155\":1,\"172\":1,\"192\":1},\"1\":{\"1\":1,\"54\":1,\"60\":2,\"61\":1,\"62\":1,\"77\":1,\"118\":1,\"126\":2,\"127\":1,\"128\":2,\"129\":2,\"130\":2,\"131\":1,\"132\":11,\"134\":6,\"135\":3,\"137\":5,\"138\":5,\"139\":3,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"145\":3,\"155\":2,\"157\":3,\"158\":1,\"188\":1,\"189\":2,\"190\":1,\"191\":2,\"192\":2,\"193\":1,\"198\":2,\"216\":1}}],[\"27\",{\"1\":{\"117\":2}}],[\"25\",{\"1\":{\"117\":2,\"209\":1}}],[\"24\",{\"1\":{\"117\":1,\"216\":1}}],[\"23\",{\"1\":{\"117\":2}}],[\"29\",{\"1\":{\"117\":4,\"208\":2}}],[\"28\",{\"1\":{\"117\":3}}],[\"22\",{\"0\":{\"102\":1},\"1\":{\"117\":2}}],[\"22nd\",{\"0\":{\"15\":1}}],[\"2042\",{\"1\":{\"209\":2}}],[\"2023\",{\"1\":{\"207\":1,\"209\":2}}],[\"20231231075251298\",{\"1\":{\"128\":1}}],[\"20231231075241046\",{\"1\":{\"128\":1}}],[\"20231231075234954\",{\"1\":{\"128\":1}}],[\"20231231075218270\",{\"1\":{\"127\":1}}],[\"20231231075205015\",{\"1\":{\"126\":1}}],[\"20231231075151393\",{\"1\":{\"124\":1}}],[\"20231231074540136\",{\"1\":{\"113\":1}}],[\"20231231074522629\",{\"1\":{\"113\":1}}],[\"20231222233037523\",{\"1\":{\"80\":1}}],[\"20231222233023698\",{\"1\":{\"80\":1}}],[\"20231222233001673\",{\"1\":{\"73\":1}}],[\"20231222232933858\",{\"1\":{\"72\":1}}],[\"20231222232833034\",{\"1\":{\"60\":1}}],[\"20231222204547540\",{\"1\":{\"44\":1}}],[\"20231222204535588\",{\"1\":{\"36\":1}}],[\"20240207073333734\",{\"1\":{\"200\":1}}],[\"20240207073308404\",{\"1\":{\"197\":1}}],[\"20240207072723007\",{\"1\":{\"187\":1}}],[\"20240207072410098\",{\"1\":{\"183\":1}}],[\"20240207072337892\",{\"1\":{\"173\":1}}],[\"20240207072309359\",{\"1\":{\"172\":1}}],[\"20240207072239841\",{\"1\":{\"170\":1}}],[\"20240207071522037\",{\"1\":{\"151\":1}}],[\"20240206072830941\",{\"1\":{\"141\":1}}],[\"20240206072754442\",{\"1\":{\"134\":1}}],[\"20240206072451278\",{\"1\":{\"132\":1}}],[\"201902\",{\"1\":{\"122\":1}}],[\"201901\",{\"1\":{\"122\":1}}],[\"20\",{\"0\":{\"100\":1},\"1\":{\"117\":1,\"140\":2,\"213\":1,\"215\":1,\"216\":1}}],[\"26\",{\"1\":{\"62\":2,\"117\":2}}],[\"21\",{\"0\":{\"101\":1},\"1\":{\"62\":2,\"117\":1}}],[\"2myvar\",{\"1\":{\"32\":1}}],[\"2\",{\"0\":{\"3\":1,\"21\":1,\"22\":1,\"25\":1,\"30\":1,\"39\":1,\"40\":1,\"41\":2,\"44\":1,\"47\":1,\"51\":1,\"54\":1,\"61\":1,\"66\":1,\"73\":1,\"77\":1,\"83\":1,\"105\":1,\"113\":1,\"116\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":1,\"135\":1,\"138\":1,\"146\":1,\"151\":1,\"158\":1,\"165\":1,\"170\":1,\"176\":1,\"180\":1,\"188\":1,\"198\":1},\"1\":{\"1\":1,\"24\":2,\"25\":2,\"30\":2,\"32\":5,\"43\":2,\"46\":2,\"48\":1,\"50\":2,\"53\":4,\"54\":7,\"60\":8,\"61\":7,\"62\":1,\"63\":10,\"65\":1,\"76\":1,\"77\":1,\"78\":2,\"79\":2,\"88\":2,\"89\":1,\"108\":1,\"115\":4,\"116\":2,\"117\":9,\"126\":3,\"127\":3,\"128\":6,\"129\":2,\"130\":2,\"131\":1,\"132\":9,\"134\":6,\"135\":3,\"137\":6,\"138\":6,\"139\":4,\"140\":2,\"141\":1,\"142\":1,\"143\":1,\"145\":3,\"150\":2,\"152\":2,\"153\":8,\"155\":2,\"157\":3,\"158\":1,\"160\":5,\"164\":1,\"166\":4,\"167\":1,\"170\":1,\"173\":1,\"175\":2,\"176\":1,\"187\":1,\"188\":3,\"189\":3,\"190\":2,\"191\":2,\"192\":2,\"193\":3,\"211\":1,\"215\":2,\"216\":1}}],[\"academic\",{\"1\":{\"207\":1}}],[\"achieved\",{\"1\":{\"192\":1}}],[\"according\",{\"1\":{\"207\":1}}],[\"accessed\",{\"1\":{\"171\":1}}],[\"access\",{\"1\":{\"128\":1,\"169\":1,\"171\":1}}],[\"accessing\",{\"0\":{\"123\":1,\"168\":1}}],[\"accepted\",{\"1\":{\"207\":1}}],[\"accept\",{\"1\":{\"73\":1}}],[\"accidentally\",{\"1\":{\"32\":2}}],[\"aaa\",{\"1\":{\"134\":4,\"135\":2}}],[\"aello\",{\"1\":{\"108\":1}}],[\"amount\",{\"1\":{\"211\":5}}],[\"am\",{\"1\":{\"100\":5,\"101\":5,\"102\":1}}],[\"able\",{\"1\":{\"173\":1}}],[\"abc\",{\"1\":{\"128\":2}}],[\"abcdefg0\",{\"1\":{\"92\":3,\"93\":1,\"94\":1,\"95\":1}}],[\"abcdefg\",{\"1\":{\"92\":1}}],[\"about\",{\"1\":{\"73\":2,\"209\":1}}],[\"above\",{\"0\":{\"170\":1},\"1\":{\"44\":1,\"47\":1,\"62\":1,\"63\":1,\"104\":1,\"110\":1,\"113\":1,\"115\":1,\"117\":1,\"164\":2,\"167\":1}}],[\"application\",{\"0\":{\"199\":1},\"1\":{\"173\":1}}],[\"applies\",{\"1\":{\"160\":1}}],[\"approximations\",{\"1\":{\"209\":1}}],[\"approximate\",{\"1\":{\"209\":1}}],[\"approach\",{\"1\":{\"157\":1}}],[\"appropriate\",{\"1\":{\"48\":1}}],[\"appear\",{\"1\":{\"188\":1}}],[\"appears\",{\"1\":{\"88\":1}}],[\"append\",{\"0\":{\"134\":1},\"1\":{\"134\":2}}],[\"afraid\",{\"1\":{\"73\":1}}],[\"after\",{\"1\":{\"32\":2,\"41\":1,\"48\":2,\"51\":1,\"54\":1,\"117\":1,\"132\":7,\"134\":4,\"135\":2,\"137\":4,\"138\":4,\"139\":2,\"164\":1}}],[\"aika\",{\"1\":{\"208\":2}}],[\"aiyc\",{\"1\":{\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"139\":2}}],[\"ai\",{\"1\":{\"73\":2}}],[\"a1\",{\"1\":{\"62\":3}}],[\"a0\",{\"1\":{\"62\":3}}],[\"age2\",{\"1\":{\"200\":6}}],[\"age1\",{\"1\":{\"200\":6}}],[\"age\",{\"1\":{\"50\":2,\"175\":3,\"208\":3}}],[\"again\",{\"1\":{\"48\":1}}],[\"available\",{\"1\":{\"48\":1}}],[\"avoid\",{\"1\":{\"31\":1}}],[\"adaptable\",{\"1\":{\"167\":1}}],[\"advantages\",{\"0\":{\"107\":1},\"1\":{\"167\":1}}],[\"advance\",{\"1\":{\"105\":1,\"107\":1}}],[\"advanced\",{\"0\":{\"28\":1}}],[\"adventurers\",{\"1\":{\"73\":1}}],[\"addition\",{\"1\":{\"61\":1,\"108\":1}}],[\"adding\",{\"0\":{\"133\":1,\"134\":1,\"135\":1,\"193\":1},\"1\":{\"48\":1,\"134\":1,\"172\":1}}],[\"add\",{\"0\":{\"193\":1},\"1\":{\"48\":4,\"51\":1,\"54\":1,\"109\":1,\"110\":1,\"117\":1,\"154\":2,\"172\":1,\"193\":1}}],[\"added\",{\"1\":{\"41\":1,\"44\":1,\"47\":1,\"130\":1,\"151\":1}}],[\"author\",{\"1\":{\"207\":1}}],[\"automatically\",{\"1\":{\"1\":1,\"54\":1,\"158\":1,\"198\":1}}],[\"austin$jaden$alex$cava\",{\"1\":{\"32\":1}}],[\"austin\",{\"1\":{\"32\":10}}],[\"await\",{\"1\":{\"31\":1}}],[\"attempt\",{\"1\":{\"152\":1}}],[\"attention\",{\"1\":{\"117\":1}}],[\"atomic\",{\"1\":{\"48\":4}}],[\"at\",{\"0\":{\"24\":1,\"130\":1},\"1\":{\"32\":2,\"73\":1,\"110\":1,\"126\":1,\"129\":1,\"130\":1,\"198\":3,\"215\":7}}],[\"although\",{\"1\":{\"212\":1}}],[\"along\",{\"1\":{\"169\":1}}],[\"alphanumeric\",{\"1\":{\"92\":2}}],[\"alphabetical\",{\"1\":{\"92\":1}}],[\"always\",{\"1\":{\"48\":1,\"54\":1,\"115\":1,\"209\":3}}],[\"alexa\",{\"1\":{\"40\":2,\"43\":2,\"44\":2,\"46\":2,\"47\":2,\"50\":2,\"73\":5,\"74\":1,\"76\":1,\"77\":1,\"104\":25,\"105\":2,\"108\":2,\"112\":2,\"113\":2,\"164\":1}}],[\"alex\",{\"1\":{\"32\":1}}],[\"also\",{\"1\":{\"32\":2,\"48\":1,\"73\":2,\"96\":1,\"108\":1,\"109\":1,\"138\":1}}],[\"allowed\",{\"1\":{\"132\":1}}],[\"allocates\",{\"1\":{\"21\":1}}],[\"all\",{\"1\":{\"21\":1,\"44\":1,\"48\":1,\"51\":1,\"93\":2,\"94\":2,\"96\":1,\"99\":1,\"164\":1,\"180\":1,\"181\":1,\"197\":2}}],[\"alignment\",{\"0\":{\"9\":1}}],[\"ascending\",{\"1\":{\"145\":1,\"146\":1}}],[\"asking\",{\"1\":{\"107\":1}}],[\"ask\",{\"1\":{\"48\":1,\"208\":1,\"209\":1}}],[\"asks\",{\"1\":{\"21\":1,\"208\":1,\"210\":1,\"211\":1,\"215\":1}}],[\"async\",{\"1\":{\"31\":1}}],[\"assume\",{\"1\":{\"209\":3}}],[\"assumption\",{\"1\":{\"48\":3}}],[\"assist\",{\"1\":{\"209\":1}}],[\"assigns\",{\"1\":{\"64\":1}}],[\"assigned\",{\"1\":{\"32\":3,\"167\":2}}],[\"assigning\",{\"0\":{\"29\":1,\"30\":1},\"1\":{\"167\":1}}],[\"assignment\",{\"0\":{\"22\":1,\"28\":1,\"64\":1,\"128\":1,\"206\":1},\"1\":{\"22\":2,\"32\":2,\"108\":1,\"152\":1,\"167\":2,\"207\":3}}],[\"assign\",{\"1\":{\"21\":1,\"132\":1}}],[\"associated\",{\"1\":{\"171\":1}}],[\"assert\",{\"1\":{\"31\":1,\"65\":2,\"66\":2,\"67\":2,\"68\":3}}],[\"assets\",{\"1\":{\"1\":1}}],[\"as\",{\"0\":{\"211\":2},\"1\":{\"21\":2,\"31\":3,\"32\":1,\"41\":1,\"48\":2,\"51\":2,\"54\":1,\"68\":1,\"73\":1,\"160\":1,\"164\":1,\"166\":1,\"167\":2,\"174\":1,\"182\":1,\"207\":1,\"208\":2,\"209\":5,\"210\":1,\"211\":1,\"215\":1,\"216\":1}}],[\"arises\",{\"1\":{\"170\":1}}],[\"arithmetic\",{\"0\":{\"61\":1},\"1\":{\"61\":2}}],[\"arranges\",{\"1\":{\"145\":1}}],[\"arguments\",{\"1\":{\"167\":1}}],[\"argument\",{\"1\":{\"138\":1}}],[\"around\",{\"1\":{\"117\":1}}],[\"are\",{\"1\":{\"21\":1,\"22\":1,\"31\":1,\"32\":1,\"44\":1,\"47\":1,\"48\":2,\"54\":2,\"63\":2,\"73\":5,\"93\":1,\"94\":1,\"107\":1,\"108\":1,\"116\":1,\"122\":1,\"139\":1,\"157\":1,\"165\":1,\"166\":2,\"167\":3,\"175\":1,\"189\":1,\"197\":2,\"198\":4,\"209\":3,\"211\":2,\"215\":3,\"216\":1}}],[\"article\",{\"0\":{\"2\":1},\"1\":{\"1\":2}}],[\"analyze\",{\"1\":{\"117\":1}}],[\"another\",{\"1\":{\"103\":1,\"109\":1,\"167\":3}}],[\"anyone\",{\"1\":{\"207\":1}}],[\"anything\",{\"1\":{\"41\":1,\"73\":1,\"166\":1}}],[\"any\",{\"1\":{\"31\":1,\"41\":2,\"44\":2,\"47\":2,\"51\":1,\"91\":1,\"92\":2,\"152\":1,\"207\":1}}],[\"answers\",{\"1\":{\"73\":2}}],[\"answer\",{\"1\":{\"24\":1}}],[\"an\",{\"0\":{\"21\":1,\"141\":1,\"142\":1,\"143\":1},\"1\":{\"1\":2,\"21\":2,\"32\":1,\"41\":2,\"44\":1,\"47\":1,\"48\":1,\"54\":2,\"62\":2,\"90\":1,\"108\":1,\"110\":1,\"117\":1,\"130\":1,\"132\":1,\"138\":1,\"143\":1,\"152\":1,\"160\":3,\"166\":1,\"167\":1,\"170\":1,\"171\":1,\"208\":1,\"209\":4,\"211\":1,\"213\":1,\"214\":1,\"215\":2,\"216\":2}}],[\"and\",{\"0\":{\"5\":1,\"27\":1,\"65\":1,\"66\":1,\"67\":1,\"107\":2,\"151\":1,\"153\":1,\"209\":1},\"1\":{\"1\":3,\"21\":5,\"22\":1,\"31\":4,\"32\":14,\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"48\":9,\"50\":2,\"51\":2,\"53\":2,\"54\":5,\"61\":1,\"62\":7,\"63\":1,\"65\":3,\"66\":3,\"67\":3,\"68\":2,\"72\":1,\"73\":4,\"79\":1,\"80\":3,\"96\":4,\"100\":1,\"107\":3,\"108\":1,\"109\":1,\"115\":1,\"117\":2,\"129\":1,\"138\":1,\"145\":1,\"146\":2,\"151\":1,\"160\":2,\"165\":1,\"166\":1,\"167\":5,\"171\":1,\"175\":1,\"190\":1,\"191\":1,\"198\":12,\"200\":3,\"207\":1,\"208\":3,\"209\":4,\"210\":5,\"211\":8,\"212\":3,\"213\":2,\"214\":4,\"215\":5,\"216\":7}}],[\"a\",{\"0\":{\"51\":1,\"54\":1,\"62\":1,\"75\":1,\"76\":1,\"77\":1,\"123\":1,\"125\":1,\"126\":2,\"127\":2,\"130\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"150\":1,\"164\":1,\"167\":1,\"175\":1,\"176\":2,\"177\":2,\"187\":1,\"193\":1,\"211\":2,\"213\":1},\"1\":{\"1\":2,\"21\":5,\"22\":6,\"24\":3,\"25\":2,\"27\":2,\"29\":2,\"30\":2,\"31\":3,\"32\":13,\"41\":3,\"43\":2,\"44\":1,\"46\":2,\"47\":1,\"48\":25,\"51\":2,\"54\":6,\"60\":4,\"62\":4,\"64\":20,\"65\":8,\"66\":1,\"67\":1,\"68\":1,\"72\":2,\"73\":1,\"80\":2,\"85\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":2,\"90\":2,\"91\":2,\"92\":2,\"96\":1,\"100\":2,\"101\":2,\"102\":3,\"103\":2,\"107\":2,\"108\":4,\"110\":1,\"113\":2,\"117\":5,\"122\":3,\"128\":2,\"130\":2,\"131\":1,\"132\":4,\"139\":1,\"146\":1,\"150\":1,\"152\":1,\"154\":4,\"157\":2,\"158\":2,\"160\":8,\"164\":1,\"165\":2,\"166\":4,\"167\":10,\"170\":3,\"171\":3,\"172\":1,\"173\":3,\"174\":10,\"175\":1,\"176\":1,\"177\":2,\"179\":3,\"180\":1,\"181\":3,\"182\":3,\"183\":3,\"197\":2,\"199\":3,\"207\":1,\"208\":2,\"209\":9,\"210\":2,\"211\":1,\"212\":4,\"213\":1,\"214\":2,\"215\":15,\"216\":3}}],[\"bmi\",{\"0\":{\"212\":1},\"1\":{\"212\":5,\"213\":2,\"214\":2}}],[\"block\",{\"1\":{\"207\":1}}],[\"blank\",{\"1\":{\"79\":1}}],[\"bbb\",{\"1\":{\"134\":2,\"135\":2}}],[\"birth\",{\"1\":{\"209\":2}}],[\"bis\",{\"1\":{\"64\":4}}],[\"bit\",{\"1\":{\"48\":1}}],[\"biàn\",{\"1\":{\"20\":1}}],[\"back\",{\"1\":{\"157\":1,\"158\":1}}],[\"backspace\",{\"1\":{\"109\":1}}],[\"backslash\",{\"1\":{\"109\":1}}],[\"backticks\",{\"1\":{\"1\":1}}],[\"bank\",{\"1\":{\"107\":1}}],[\"based\",{\"1\":{\"62\":1,\"160\":1,\"167\":2,\"175\":1,\"212\":1}}],[\"basics\",{\"1\":{\"51\":1}}],[\"basic\",{\"0\":{\"112\":1,\"157\":1},\"1\":{\"32\":1,\"44\":1,\"130\":2,\"171\":1}}],[\"broadly\",{\"1\":{\"212\":1}}],[\"brothers\",{\"1\":{\"32\":4}}],[\"brother\",{\"1\":{\"32\":8}}],[\"brackets\",{\"0\":{\"169\":1},\"1\":{\"122\":1,\"125\":1,\"126\":1,\"151\":2,\"169\":1,\"175\":2}}],[\"braces\",{\"1\":{\"104\":3,\"165\":1,\"187\":1}}],[\"bravest\",{\"1\":{\"73\":1}}],[\"branch\",{\"1\":{\"22\":1}}],[\"break\",{\"1\":{\"31\":1,\"109\":1}}],[\"build\",{\"1\":{\"164\":1}}],[\"built\",{\"0\":{\"81\":1},\"1\":{\"31\":1,\"160\":1}}],[\"but\",{\"1\":{\"31\":1,\"48\":1,\"54\":1,\"73\":1,\"109\":1,\"113\":1,\"117\":1,\"190\":1,\"191\":1,\"208\":1,\"209\":2}}],[\"b\",{\"0\":{\"214\":1},\"1\":{\"24\":2,\"25\":2,\"27\":2,\"29\":2,\"30\":2,\"32\":4,\"43\":2,\"46\":2,\"62\":2,\"64\":8,\"65\":7,\"80\":1,\"86\":1,\"100\":4,\"101\":3,\"102\":1,\"109\":2,\"116\":3,\"117\":2,\"122\":1,\"128\":2,\"132\":3,\"160\":5,\"173\":3,\"175\":1,\"176\":1,\"177\":2,\"214\":1}}],[\"bone\",{\"1\":{\"212\":1}}],[\"body\",{\"1\":{\"212\":2}}],[\"book\",{\"0\":{\"164\":1},\"1\":{\"164\":1,\"170\":1}}],[\"bool\",{\"0\":{\"55\":1,\"196\":1},\"1\":{\"56\":1,\"116\":2,\"117\":1,\"166\":4,\"198\":1}}],[\"boolean\",{\"0\":{\"55\":1,\"197\":1},\"1\":{\"54\":1,\"87\":1,\"132\":1}}],[\"booleans\",{\"1\":{\"51\":1,\"116\":1,\"198\":1}}],[\"born\",{\"1\":{\"109\":6,\"110\":2}}],[\"bornfor\",{\"1\":{\"109\":3}}],[\"bornforthis\",{\"1\":{\"1\":1,\"77\":1,\"78\":1,\"80\":1,\"82\":2,\"83\":2,\"84\":2,\"85\":2,\"86\":2,\"87\":2,\"88\":4,\"89\":6,\"90\":2,\"96\":8,\"97\":2,\"98\":2,\"99\":4,\"100\":6,\"101\":6,\"102\":1,\"103\":2,\"108\":1,\"109\":1,\"110\":1,\"122\":1,\"132\":1,\"164\":3,\"207\":1}}],[\"bornff\",{\"1\":{\"109\":2}}],[\"bornf\",{\"1\":{\"101\":1}}],[\"borthis\",{\"1\":{\"109\":2}}],[\"bor\",{\"1\":{\"109\":3}}],[\"bo\",{\"1\":{\"86\":1,\"87\":1}}],[\"bomb\",{\"1\":{\"48\":2}}],[\"bombs\",{\"1\":{\"48\":2}}],[\"both\",{\"1\":{\"32\":2,\"96\":2,\"109\":1,\"160\":1,\"167\":1,\"188\":1,\"189\":1,\"191\":1,\"198\":2,\"214\":1,\"216\":3}}],[\"bottom\",{\"1\":{\"22\":1}}],[\"boxes\",{\"1\":{\"215\":1}}],[\"box\",{\"0\":{\"6\":1},\"1\":{\"215\":6}}],[\"by\",{\"1\":{\"1\":1,\"22\":2,\"24\":1,\"44\":1,\"51\":1,\"67\":1,\"96\":1,\"97\":1,\"98\":1,\"106\":1,\"115\":1,\"117\":1,\"122\":1,\"138\":1,\"146\":1,\"165\":2,\"175\":1,\"183\":1,\"211\":2}}],[\"believe\",{\"0\":{\"215\":1}}],[\"between\",{\"1\":{\"151\":1,\"190\":1,\"191\":1}}],[\"beyond\",{\"1\":{\"130\":1}}],[\"been\",{\"1\":{\"48\":1}}],[\"because\",{\"1\":{\"48\":4,\"167\":1}}],[\"becomes\",{\"1\":{\"117\":1}}],[\"become\",{\"1\":{\"41\":1}}],[\"before\",{\"1\":{\"32\":1,\"105\":1,\"117\":1,\"132\":8,\"134\":4,\"135\":2,\"137\":4,\"138\":4,\"139\":2}}],[\"beginning\",{\"1\":{\"79\":1}}],[\"begin\",{\"1\":{\"1\":1}}],[\"be\",{\"0\":{\"27\":1},\"1\":{\"1\":1,\"21\":2,\"24\":1,\"31\":2,\"32\":4,\"41\":4,\"44\":2,\"47\":2,\"48\":3,\"51\":2,\"54\":2,\"60\":2,\"73\":2,\"80\":3,\"103\":2,\"105\":2,\"106\":1,\"107\":1,\"108\":2,\"117\":1,\"127\":1,\"129\":1,\"130\":2,\"132\":1,\"137\":1,\"138\":1,\"139\":1,\"143\":1,\"151\":2,\"158\":1,\"164\":1,\"166\":1,\"167\":7,\"173\":1,\"192\":1,\"198\":1,\"207\":1,\"209\":2,\"214\":1}}],[\"ollie\",{\"1\":{\"216\":4}}],[\"old\",{\"1\":{\"99\":2}}],[\"ours\",{\"1\":{\"208\":1,\"209\":1}}],[\"our\",{\"1\":{\"113\":1,\"117\":2,\"167\":1,\"215\":1}}],[\"outside\",{\"1\":{\"73\":1}}],[\"out\",{\"0\":{\"118\":1,\"129\":1},\"1\":{\"48\":1,\"60\":7,\"115\":3,\"116\":5,\"117\":14,\"128\":7,\"198\":2,\"208\":1,\"209\":2}}],[\"outputting\",{\"1\":{\"167\":1}}],[\"outputs\",{\"1\":{\"24\":1,\"210\":1,\"213\":1}}],[\"output\",{\"0\":{\"26\":1},\"1\":{\"24\":2,\"25\":1,\"27\":1,\"29\":1,\"30\":1,\"32\":2,\"38\":2,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"54\":3,\"56\":1,\"62\":5,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"74\":1,\"77\":1,\"80\":3,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"91\":2,\"92\":4,\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":3,\"104\":5,\"105\":2,\"106\":3,\"108\":2,\"109\":6,\"110\":3,\"112\":1,\"113\":1,\"118\":2,\"122\":1,\"130\":1,\"131\":1,\"132\":4,\"134\":2,\"135\":1,\"137\":2,\"138\":2,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"145\":1,\"150\":1,\"152\":1,\"153\":4,\"154\":2,\"155\":1,\"157\":1,\"158\":1,\"160\":3,\"164\":1,\"165\":1,\"166\":2,\"167\":2,\"170\":1,\"171\":1,\"172\":1,\"173\":3,\"176\":1,\"177\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"197\":1,\"198\":1,\"200\":2,\"208\":1,\"209\":2,\"210\":1}}],[\"obtain\",{\"1\":{\"143\":1}}],[\"obtained\",{\"1\":{\"115\":1,\"117\":1}}],[\"obvious\",{\"1\":{\"117\":1}}],[\"obviously\",{\"1\":{\"24\":1,\"48\":1,\"54\":1,\"167\":1}}],[\"objects\",{\"1\":{\"132\":2,\"160\":1}}],[\"object\",{\"1\":{\"108\":1,\"152\":1}}],[\"o\",{\"1\":{\"100\":2,\"101\":2,\"102\":2,\"122\":2,\"128\":2,\"132\":2}}],[\"occurrences\",{\"1\":{\"99\":1}}],[\"occurrence\",{\"0\":{\"143\":1},\"1\":{\"89\":2,\"90\":1}}],[\"omitted\",{\"1\":{\"80\":1}}],[\"omit\",{\"1\":{\"79\":1,\"80\":1}}],[\"open\",{\"1\":{\"77\":1}}],[\"operations\",{\"0\":{\"68\":1},\"1\":{\"192\":1}}],[\"operation\",{\"0\":{\"67\":1}}],[\"operator\",{\"1\":{\"61\":8,\"63\":1,\"64\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"198\":1}}],[\"operators\",{\"0\":{\"61\":1,\"63\":1,\"64\":1,\"198\":1},\"1\":{\"61\":1,\"198\":2}}],[\"operands\",{\"1\":{\"63\":2,\"198\":2}}],[\"operand\",{\"1\":{\"63\":4,\"198\":1}}],[\"optional\",{\"1\":{\"171\":1}}],[\"options\",{\"1\":{\"73\":2}}],[\"optimization\",{\"0\":{\"79\":1}}],[\"optimize\",{\"1\":{\"73\":1}}],[\"oil\",{\"1\":{\"48\":1}}],[\"otherwise\",{\"1\":{\"48\":1,\"73\":2,\"93\":1,\"94\":1,\"95\":1,\"175\":1,\"212\":1}}],[\"other\",{\"1\":{\"32\":2,\"129\":1,\"167\":1,\"192\":1}}],[\"owned\",{\"1\":{\"44\":1,\"51\":1}}],[\"own\",{\"1\":{\"32\":2}}],[\"overwritten\",{\"1\":{\"21\":1}}],[\"on\",{\"1\":{\"48\":1,\"62\":1,\"64\":2,\"160\":1,\"167\":2,\"175\":1,\"207\":2,\"209\":1,\"211\":1,\"212\":1}}],[\"once\",{\"0\":{\"24\":1},\"1\":{\"32\":1,\"107\":1}}],[\"only\",{\"1\":{\"21\":1,\"32\":3,\"44\":1,\"48\":2,\"51\":1,\"73\":1,\"92\":1,\"95\":1,\"96\":1,\"103\":1,\"118\":1,\"132\":1,\"139\":1,\"154\":2,\"167\":2,\"198\":2,\"215\":1}}],[\"onto\",{\"1\":{\"21\":1}}],[\"ones\",{\"1\":{\"73\":2}}],[\"one\",{\"0\":{\"116\":1},\"1\":{\"21\":1,\"32\":4,\"48\":2,\"54\":1,\"60\":2,\"74\":1,\"80\":2,\"118\":1,\"129\":1,\"139\":1,\"154\":2,\"166\":2,\"167\":2,\"198\":2}}],[\"originally\",{\"1\":{\"109\":1}}],[\"original\",{\"1\":{\"62\":3,\"115\":2,\"146\":1}}],[\"order\",{\"1\":{\"54\":4,\"104\":1,\"145\":2,\"146\":2,\"211\":1}}],[\"orderliness\",{\"1\":{\"41\":1,\"44\":1,\"47\":1}}],[\"ordered\",{\"0\":{\"5\":1},\"1\":{\"51\":1,\"54\":1}}],[\"or\",{\"1\":{\"1\":1,\"21\":1,\"22\":1,\"31\":1,\"32\":2,\"41\":1,\"48\":2,\"54\":1,\"62\":1,\"63\":2,\"73\":1,\"74\":1,\"79\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"103\":1,\"117\":2,\"137\":1,\"151\":1,\"160\":2,\"171\":1,\"172\":1,\"174\":1,\"191\":1,\"197\":1,\"198\":10,\"200\":3,\"209\":1,\"215\":2}}],[\"often\",{\"1\":{\"215\":1}}],[\"ofts\",{\"1\":{\"78\":1}}],[\"of\",{\"0\":{\"25\":1,\"41\":1,\"44\":1,\"47\":1,\"51\":1,\"54\":1,\"60\":1,\"65\":1,\"66\":1,\"72\":1,\"77\":1,\"108\":1,\"124\":1,\"126\":1,\"142\":1,\"143\":1,\"152\":1},\"1\":{\"0\":1,\"1\":2,\"21\":4,\"22\":4,\"31\":2,\"32\":13,\"41\":3,\"44\":1,\"47\":1,\"48\":6,\"51\":3,\"54\":1,\"60\":2,\"62\":9,\"65\":1,\"67\":3,\"72\":1,\"73\":2,\"74\":1,\"80\":2,\"84\":1,\"85\":1,\"88\":1,\"89\":5,\"90\":4,\"92\":2,\"95\":1,\"99\":2,\"102\":1,\"109\":1,\"110\":1,\"115\":1,\"117\":3,\"118\":1,\"122\":1,\"130\":2,\"131\":1,\"138\":1,\"139\":2,\"160\":2,\"164\":1,\"165\":1,\"167\":2,\"174\":1,\"175\":1,\"198\":3,\"199\":1,\"207\":1,\"208\":3,\"209\":6,\"210\":8,\"211\":8,\"212\":2,\"215\":5,\"216\":11}}],[\"due\",{\"1\":{\"207\":1}}],[\"duplicates\",{\"1\":{\"54\":1,\"139\":1,\"198\":1}}],[\"during\",{\"1\":{\"41\":1,\"44\":1,\"47\":1,\"113\":1}}],[\"d\",{\"1\":{\"50\":3,\"51\":1,\"106\":6,\"167\":5}}],[\"dime\",{\"0\":{\"211\":1}}],[\"dimes\",{\"1\":{\"210\":2,\"211\":3}}],[\"diagram\",{\"1\":{\"191\":1}}],[\"diligently\",{\"1\":{\"172\":1}}],[\"did\",{\"1\":{\"117\":1}}],[\"distinguish\",{\"1\":{\"154\":1}}],[\"display\",{\"1\":{\"118\":1,\"211\":1}}],[\"disadvantages\",{\"0\":{\"107\":1},\"1\":{\"167\":1}}],[\"discontinuous\",{\"0\":{\"78\":1}}],[\"direction\",{\"1\":{\"80\":2}}],[\"directly\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"48\":3,\"50\":2,\"53\":2,\"80\":1,\"103\":1,\"105\":1,\"107\":1,\"115\":1,\"145\":1,\"157\":1,\"187\":1}}],[\"div\",{\"1\":{\"67\":2}}],[\"divided\",{\"1\":{\"67\":1}}],[\"division\",{\"0\":{\"66\":1},\"1\":{\"60\":2,\"61\":2,\"64\":1,\"66\":5}}],[\"differences\",{\"1\":{\"151\":1}}],[\"difference\",{\"0\":{\"65\":1,\"190\":1,\"191\":1},\"1\":{\"65\":4,\"117\":1,\"190\":2,\"191\":2,\"192\":1}}],[\"different\",{\"0\":{\"30\":1},\"1\":{\"73\":1,\"96\":1,\"103\":1}}],[\"digits\",{\"1\":{\"62\":1,\"117\":1}}],[\"digit\",{\"1\":{\"62\":1}}],[\"die\",{\"1\":{\"54\":2}}],[\"dictionaries\",{\"0\":{\"174\":1},\"1\":{\"116\":1,\"164\":1,\"167\":1,\"174\":1}}],[\"dictionary\",{\"0\":{\"49\":1,\"51\":1,\"163\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":2,\"178\":1},\"1\":{\"51\":1,\"132\":1,\"165\":1,\"167\":5,\"171\":3,\"172\":1,\"174\":5,\"180\":1,\"181\":1,\"182\":1,\"183\":1}}],[\"dict\",{\"0\":{\"49\":1,\"167\":1},\"1\":{\"50\":2,\"117\":1,\"167\":7,\"180\":1,\"181\":1,\"182\":1}}],[\"drink\",{\"1\":{\"32\":4}}],[\"date\",{\"1\":{\"207\":1}}],[\"data\",{\"0\":{\"24\":1,\"35\":1,\"36\":1,\"168\":1,\"172\":1,\"173\":1},\"1\":{\"21\":2,\"32\":1,\"38\":6,\"40\":2,\"43\":2,\"44\":4,\"46\":2,\"47\":2,\"48\":3,\"50\":2,\"51\":3,\"53\":2,\"54\":2,\"103\":1,\"115\":1,\"132\":1,\"137\":1,\"152\":1,\"164\":1,\"166\":1,\"167\":4,\"170\":1,\"172\":1,\"173\":1,\"175\":1}}],[\"days\",{\"1\":{\"209\":1,\"216\":5}}],[\"day\",{\"1\":{\"21\":1,\"216\":1}}],[\"dashes\",{\"1\":{\"1\":1}}],[\"development\",{\"1\":{\"215\":1}}],[\"death\",{\"1\":{\"209\":2}}],[\"deep\",{\"1\":{\"73\":2}}],[\"determines\",{\"1\":{\"215\":1}}],[\"determined\",{\"1\":{\"54\":1}}],[\"determinism\",{\"1\":{\"54\":1}}],[\"deterministic\",{\"1\":{\"54\":1}}],[\"deletes\",{\"1\":{\"109\":1,\"138\":1}}],[\"deleted\",{\"1\":{\"41\":1,\"44\":1,\"47\":1,\"137\":1,\"173\":1}}],[\"delete\",{\"1\":{\"32\":1,\"51\":1,\"54\":2,\"109\":1,\"137\":2,\"179\":1}}],[\"deleting\",{\"0\":{\"136\":1,\"173\":1},\"1\":{\"32\":1,\"48\":1}}],[\"del\",{\"0\":{\"137\":1},\"1\":{\"31\":1,\"32\":1,\"137\":3,\"173\":2}}],[\"defined\",{\"1\":{\"117\":2,\"137\":1,\"173\":1}}],[\"definition\",{\"0\":{\"72\":1}}],[\"definitely\",{\"1\":{\"48\":1}}],[\"def\",{\"1\":{\"31\":1,\"32\":1}}],[\"defaults\",{\"1\":{\"127\":1}}],[\"default\",{\"1\":{\"24\":2,\"80\":1,\"96\":1,\"97\":1,\"98\":1,\"100\":2,\"138\":1,\"146\":1,\"171\":5,\"183\":1}}],[\"descending\",{\"1\":{\"145\":1,\"146\":1}}],[\"descendant\",{\"1\":{\"22\":1}}],[\"description\",{\"1\":{\"61\":1,\"63\":1,\"64\":1,\"198\":1}}],[\"destroy\",{\"1\":{\"32\":1}}],[\"design\",{\"2\":{\"12\":1}}],[\"decimal\",{\"1\":{\"61\":1,\"104\":3,\"105\":2,\"106\":1}}],[\"dec\",{\"0\":{\"15\":1}}],[\"demo1\",{\"1\":{\"103\":1}}],[\"demo\",{\"1\":{\"1\":1}}],[\"dollar\",{\"1\":{\"210\":1}}],[\"dollars\",{\"1\":{\"210\":1,\"211\":3}}],[\"double\",{\"1\":{\"73\":2,\"117\":1}}],[\"don\",{\"0\":{\"215\":1},\"1\":{\"32\":3,\"48\":1}}],[\"dongmei\",{\"1\":{\"21\":1}}],[\"doesn\",{\"1\":{\"54\":1,\"170\":1,\"171\":2}}],[\"does\",{\"1\":{\"21\":4,\"48\":1,\"54\":1,\"80\":1,\"108\":1,\"126\":1,\"134\":1,\"152\":1,\"167\":2,\"171\":1}}],[\"do\",{\"1\":{\"1\":1,\"21\":2,\"32\":1,\"48\":3,\"73\":1,\"110\":1,\"207\":1}}],[\"llo\",{\"1\":{\"77\":1}}],[\"lst3\",{\"1\":{\"100\":2,\"101\":2}}],[\"lst2\",{\"1\":{\"100\":2,\"101\":2}}],[\"lst1\",{\"1\":{\"100\":2,\"101\":2}}],[\"lstrip\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"lst\",{\"1\":{\"43\":3,\"44\":1,\"157\":3}}],[\"long\",{\"1\":{\"167\":1}}],[\"longitude\",{\"1\":{\"48\":2}}],[\"loot\",{\"1\":{\"215\":7}}],[\"loop\",{\"1\":{\"160\":1}}],[\"looks\",{\"1\":{\"167\":1}}],[\"look\",{\"1\":{\"73\":1,\"167\":2,\"208\":2,\"209\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"lower\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"lowercase\",{\"1\":{\"31\":1,\"83\":1,\"94\":2}}],[\"location\",{\"1\":{\"48\":1,\"103\":1}}],[\"logs\",{\"1\":{\"48\":1}}],[\"log\",{\"1\":{\"48\":1}}],[\"logical\",{\"0\":{\"198\":1},\"1\":{\"198\":6}}],[\"logic\",{\"1\":{\"22\":1}}],[\"love\",{\"1\":{\"27\":2,\"110\":11}}],[\"late\",{\"1\":{\"207\":1}}],[\"latitude\",{\"1\":{\"48\":2}}],[\"large\",{\"1\":{\"48\":1}}],[\"lambda\",{\"1\":{\"31\":1}}],[\"last\",{\"1\":{\"21\":1,\"76\":2,\"80\":2,\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"138\":1,\"152\":1,\"166\":1,\"170\":1,\"173\":1}}],[\"languages\",{\"1\":{\"124\":1}}],[\"language\",{\"1\":{\"1\":1}}],[\"least\",{\"1\":{\"198\":1}}],[\"learned\",{\"1\":{\"164\":1,\"207\":1}}],[\"leading\",{\"1\":{\"96\":3,\"97\":2}}],[\"leader\",{\"1\":{\"48\":1}}],[\"leaving\",{\"1\":{\"79\":1,\"146\":1}}],[\"len\",{\"1\":{\"74\":2,\"76\":1,\"78\":3,\"80\":2,\"131\":2}}],[\"length\",{\"0\":{\"74\":1,\"131\":1},\"1\":{\"74\":1,\"130\":1,\"131\":1}}],[\"leeks\",{\"1\":{\"73\":1}}],[\"lets\",{\"1\":{\"215\":1}}],[\"letter\",{\"1\":{\"84\":1,\"85\":1,\"92\":1,\"160\":6}}],[\"letters\",{\"1\":{\"31\":1,\"72\":1,\"93\":1,\"94\":1}}],[\"let\",{\"1\":{\"73\":1,\"117\":1,\"215\":1}}],[\"lesson3\",{\"1\":{\"108\":1}}],[\"less\",{\"1\":{\"63\":2,\"68\":4}}],[\"left\",{\"1\":{\"22\":1,\"32\":2,\"41\":2,\"44\":6,\"47\":6,\"64\":1,\"77\":1,\"100\":1,\"198\":2}}],[\"lei\",{\"1\":{\"21\":1}}],[\"level\",{\"1\":{\"1\":2,\"215\":13}}],[\"library\",{\"1\":{\"173\":2}}],[\"lilei=98\",{\"1\":{\"167\":2}}],[\"lilei\",{\"1\":{\"122\":1,\"153\":2,\"165\":2,\"166\":4,\"167\":8,\"169\":1,\"170\":1,\"171\":2,\"172\":3}}],[\"little\",{\"0\":{\"62\":1}}],[\"literal\",{\"0\":{\"20\":1}}],[\"like\",{\"1\":{\"21\":1,\"32\":2,\"48\":1,\"107\":2,\"208\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"liu\",{\"1\":{\"21\":3,\"164\":1}}],[\"li\",{\"1\":{\"21\":1}}],[\"liàng\",{\"1\":{\"20\":1}}],[\"life\",{\"0\":{\"19\":1},\"1\":{\"22\":2}}],[\"list2\",{\"1\":{\"160\":2}}],[\"list1\",{\"1\":{\"160\":2}}],[\"lists\",{\"0\":{\"42\":1,\"44\":1,\"140\":1,\"151\":1},\"1\":{\"44\":1,\"48\":1,\"54\":1,\"116\":1,\"122\":1,\"130\":1,\"151\":3,\"160\":4,\"164\":1}}],[\"listed\",{\"1\":{\"21\":1}}],[\"list\",{\"0\":{\"5\":1,\"42\":1,\"48\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"131\":1,\"132\":1,\"133\":1,\"136\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"146\":1,\"175\":1,\"176\":1},\"1\":{\"31\":2,\"43\":2,\"44\":3,\"48\":5,\"54\":1,\"100\":1,\"101\":1,\"116\":2,\"117\":1,\"122\":7,\"127\":1,\"128\":2,\"129\":1,\"130\":4,\"131\":1,\"132\":1,\"134\":1,\"137\":1,\"138\":1,\"139\":2,\"143\":2,\"145\":4,\"146\":5,\"157\":3,\"158\":1,\"160\":3,\"166\":2,\"167\":3,\"174\":4,\"180\":1,\"181\":1,\"182\":1}}],[\"link\",{\"1\":{\"1\":2}}],[\"links\",{\"0\":{\"7\":1},\"1\":{\"1\":1}}],[\"lines\",{\"1\":{\"211\":1}}],[\"line\",{\"1\":{\"1\":1,\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1,\"173\":1}}],[\"lucem\",{\"1\":{\"0\":1}}],[\"nickels\",{\"1\":{\"210\":2,\"211\":2}}],[\"nthis\",{\"1\":{\"109\":2}}],[\"nforthis\",{\"1\":{\"109\":3}}],[\"n\",{\"1\":{\"67\":8,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"109\":4,\"116\":2,\"122\":1,\"128\":2,\"132\":1,\"192\":2}}],[\"near\",{\"1\":{\"209\":1}}],[\"nesting\",{\"0\":{\"174\":1},\"1\":{\"174\":1}}],[\"negative\",{\"1\":{\"80\":1}}],[\"next\",{\"1\":{\"78\":1}}],[\"newline\",{\"1\":{\"109\":2}}],[\"new\",{\"1\":{\"48\":2,\"62\":3,\"99\":2,\"103\":1,\"104\":8,\"106\":6,\"108\":3,\"146\":1,\"155\":2,\"157\":2,\"164\":1,\"209\":2}}],[\"needed\",{\"1\":{\"51\":1,\"54\":1,\"107\":1,\"164\":1}}],[\"needs\",{\"1\":{\"48\":1,\"108\":1,\"113\":1,\"158\":1,\"198\":1}}],[\"need\",{\"1\":{\"21\":1,\"48\":7,\"62\":1,\"73\":3,\"103\":1,\"109\":1,\"117\":1,\"198\":1,\"208\":1,\"209\":1}}],[\"num2\",{\"1\":{\"118\":1}}],[\"num1\",{\"1\":{\"118\":1}}],[\"num\",{\"1\":{\"38\":10,\"62\":5,\"117\":1,\"160\":2}}],[\"numeric\",{\"0\":{\"37\":1,\"59\":1,\"60\":1,\"62\":1},\"1\":{\"91\":1,\"164\":1}}],[\"numbered\",{\"1\":{\"124\":1}}],[\"number\",{\"1\":{\"31\":1,\"32\":1,\"54\":1,\"62\":9,\"73\":1,\"74\":1,\"78\":1,\"80\":1,\"88\":1,\"91\":1,\"99\":1,\"106\":1,\"125\":1,\"160\":4,\"164\":3,\"210\":6,\"211\":4,\"212\":1,\"216\":7}}],[\"numbers2\",{\"1\":{\"140\":2}}],[\"numbers1\",{\"1\":{\"140\":2}}],[\"numbers\",{\"0\":{\"65\":1,\"66\":1},\"1\":{\"31\":1,\"51\":1,\"60\":2,\"62\":4,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"72\":1,\"116\":1,\"126\":2,\"127\":2,\"128\":6,\"129\":1,\"130\":3,\"131\":2,\"132\":17,\"134\":8,\"135\":4,\"137\":10,\"138\":8,\"139\":4,\"141\":3,\"142\":2,\"143\":2,\"145\":5,\"165\":2,\"166\":5,\"197\":1,\"199\":1}}],[\"nuwa\",{\"1\":{\"22\":4}}],[\"npc\",{\"1\":{\"22\":1}}],[\"naturally\",{\"1\":{\"209\":1}}],[\"national\",{\"1\":{\"22\":1}}],[\"naming\",{\"0\":{\"31\":1}}],[\"nameerror\",{\"1\":{\"117\":3,\"137\":1,\"173\":1}}],[\"name=\",{\"1\":{\"104\":4}}],[\"name\",{\"1\":{\"1\":1,\"22\":4,\"50\":2,\"73\":1,\"103\":1,\"104\":5,\"105\":2,\"113\":4,\"117\":2,\"128\":5,\"137\":1,\"164\":3,\"171\":1,\"173\":1,\"175\":3,\"177\":3,\"179\":2,\"180\":3,\"181\":1,\"182\":3,\"183\":6,\"207\":1,\"208\":3}}],[\"named\",{\"1\":{\"1\":1,\"32\":4,\"117\":2,\"207\":1}}],[\"names\",{\"1\":{\"1\":1,\"31\":4,\"32\":4}}],[\"normal\",{\"1\":{\"167\":1}}],[\"non\",{\"1\":{\"92\":1,\"113\":1,\"197\":1}}],[\"nonlocal\",{\"1\":{\"31\":1}}],[\"none\",{\"1\":{\"31\":1,\"32\":1,\"171\":4}}],[\"now\",{\"1\":{\"22\":1,\"24\":1,\"48\":2,\"51\":1,\"160\":1}}],[\"no\",{\"1\":{\"22\":1,\"32\":1,\"48\":2,\"54\":2,\"80\":2,\"108\":1,\"130\":1,\"207\":1}}],[\"note\",{\"1\":{\"41\":1,\"54\":1,\"61\":1,\"122\":1,\"126\":1,\"214\":1,\"216\":1}}],[\"not\",{\"1\":{\"1\":1,\"21\":4,\"31\":1,\"48\":3,\"51\":1,\"54\":4,\"63\":1,\"73\":2,\"77\":1,\"80\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"103\":1,\"108\":1,\"113\":1,\"116\":1,\"117\":3,\"126\":1,\"132\":1,\"134\":1,\"137\":2,\"139\":1,\"143\":1,\"152\":1,\"167\":2,\"170\":1,\"171\":8,\"172\":1,\"173\":2,\"190\":1,\"191\":1,\"198\":4,\"207\":2,\"208\":1,\"209\":1}}],[\"front\",{\"1\":{\"109\":1}}],[\"from\",{\"0\":{\"19\":1,\"75\":1,\"136\":1},\"1\":{\"0\":1,\"1\":1,\"22\":2,\"24\":1,\"31\":1,\"41\":5,\"44\":8,\"47\":8,\"65\":1,\"74\":1,\"79\":1,\"80\":2,\"96\":3,\"97\":1,\"98\":1,\"100\":1,\"101\":1,\"115\":1,\"130\":1,\"137\":1,\"138\":1,\"139\":2,\"160\":2,\"198\":2,\"212\":1,\"215\":1}}],[\"fat\",{\"1\":{\"212\":1}}],[\"favorite\",{\"1\":{\"176\":2}}],[\"far\",{\"1\":{\"164\":1}}],[\"fastest\",{\"1\":{\"73\":1}}],[\"false\",{\"1\":{\"31\":1,\"32\":11,\"43\":2,\"46\":2,\"53\":2,\"54\":2,\"56\":1,\"63\":1,\"86\":2,\"87\":1,\"91\":2,\"92\":4,\"93\":2,\"94\":1,\"95\":2,\"141\":1,\"146\":1,\"177\":2,\"183\":1,\"197\":3,\"198\":15,\"200\":1,\"215\":3}}],[\"fully\",{\"1\":{\"73\":1,\"167\":1}}],[\"functionality\",{\"1\":{\"48\":1,\"164\":1}}],[\"function\",{\"0\":{\"167\":1},\"1\":{\"31\":1,\"48\":1,\"73\":1,\"113\":1,\"118\":1,\"138\":1,\"160\":1}}],[\"f\",{\"0\":{\"105\":1,\"107\":1},\"1\":{\"68\":3,\"102\":1,\"105\":3,\"106\":2,\"107\":1,\"109\":1,\"122\":1,\"132\":1,\"160\":1}}],[\"floor\",{\"1\":{\"61\":1,\"67\":2}}],[\"float\",{\"0\":{\"37\":1},\"1\":{\"38\":8,\"60\":6,\"64\":1,\"106\":1}}],[\"flat\",{\"1\":{\"21\":1}}],[\"february\",{\"1\":{\"21\":2}}],[\"four\",{\"1\":{\"209\":1}}],[\"found\",{\"1\":{\"89\":1,\"90\":2,\"170\":1,\"171\":3}}],[\"follows\",{\"1\":{\"207\":1}}],[\"following\",{\"1\":{\"32\":4,\"62\":1,\"73\":1,\"129\":1,\"157\":1,\"164\":1,\"207\":1,\"210\":1,\"211\":1,\"212\":1}}],[\"followed\",{\"1\":{\"1\":1,\"106\":1}}],[\"folder\",{\"1\":{\"1\":1}}],[\"forced\",{\"0\":{\"116\":1}}],[\"forthis\",{\"1\":{\"110\":2}}],[\"formula\",{\"1\":{\"212\":2}}],[\"formulas\",{\"0\":{\"10\":1}}],[\"forms\",{\"1\":{\"110\":1}}],[\"form\",{\"1\":{\"62\":3}}],[\"formatting\",{\"0\":{\"103\":1,\"106\":1}}],[\"formatted\",{\"1\":{\"1\":1}}],[\"format\",{\"0\":{\"104\":1,\"107\":1},\"1\":{\"1\":1,\"67\":1,\"85\":1,\"104\":15,\"107\":1,\"118\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1}}],[\"for\",{\"0\":{\"31\":1},\"1\":{\"1\":1,\"21\":4,\"31\":1,\"32\":1,\"44\":1,\"47\":1,\"48\":4,\"51\":2,\"54\":2,\"61\":1,\"73\":1,\"77\":1,\"78\":1,\"80\":1,\"88\":2,\"89\":5,\"90\":2,\"95\":1,\"103\":1,\"109\":2,\"113\":2,\"116\":2,\"129\":1,\"130\":1,\"132\":2,\"139\":1,\"160\":2,\"164\":1,\"167\":3,\"170\":1,\"171\":1,\"172\":1,\"175\":1,\"183\":2,\"207\":1,\"208\":4,\"212\":1,\"213\":2,\"214\":2,\"215\":1,\"216\":2}}],[\"fit\",{\"1\":{\"211\":2}}],[\"finding\",{\"1\":{\"190\":1,\"191\":1}}],[\"finds\",{\"1\":{\"89\":1,\"90\":1}}],[\"find\",{\"0\":{\"89\":1},\"1\":{\"89\":4,\"188\":1,\"189\":1,\"211\":3}}],[\"finally\",{\"1\":{\"22\":1,\"31\":1}}],[\"filled\",{\"1\":{\"32\":2,\"104\":1}}],[\"files\",{\"1\":{\"207\":1,\"214\":1}}],[\"file\",{\"1\":{\"1\":1,\"21\":1,\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1,\"173\":2,\"207\":1}}],[\"figurine\",{\"1\":{\"22\":4}}],[\"first\",{\"0\":{\"143\":1},\"1\":{\"1\":1,\"62\":1,\"63\":4,\"73\":1,\"84\":1,\"85\":1,\"89\":3,\"90\":2,\"99\":1,\"124\":1,\"167\":1,\"171\":1,\"198\":1,\"211\":1}}],[\"cs\",{\"1\":{\"208\":1}}],[\"cent\",{\"1\":{\"210\":1}}],[\"cents\",{\"1\":{\"210\":1,\"211\":3}}],[\"census\",{\"1\":{\"209\":2}}],[\"certain\",{\"1\":{\"175\":2,\"215\":1}}],[\"cell\",{\"1\":{\"117\":1}}],[\"c6f75b68835a096ebee7933989e7770c\",{\"1\":{\"173\":1}}],[\"city=\",{\"1\":{\"104\":4}}],[\"city\",{\"1\":{\"104\":5,\"105\":2}}],[\"creating\",{\"0\":{\"73\":1,\"150\":1,\"167\":1,\"187\":1},\"1\":{\"85\":1,\"167\":2}}],[\"creation\",{\"1\":{\"41\":1}}],[\"creates\",{\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"created\",{\"1\":{\"48\":1,\"105\":2,\"107\":1,\"108\":1}}],[\"create\",{\"0\":{\"22\":1,\"164\":1},\"1\":{\"1\":1,\"32\":1,\"48\":3,\"103\":1,\"107\":1,\"117\":2,\"150\":1,\"160\":1,\"167\":1,\"187\":1}}],[\"custom\",{\"1\":{\"171\":1}}],[\"currency\",{\"1\":{\"215\":1}}],[\"current\",{\"1\":{\"130\":1,\"199\":1,\"209\":2,\"215\":1}}],[\"curly\",{\"1\":{\"104\":3,\"165\":1,\"187\":1}}],[\"cumbersome\",{\"1\":{\"103\":1}}],[\"cup\",{\"1\":{\"32\":8}}],[\"cups\",{\"1\":{\"32\":6}}],[\"cuea\",{\"0\":{\"14\":1}}],[\"c\",{\"1\":{\"24\":2,\"25\":2,\"27\":2,\"29\":2,\"30\":2,\"32\":4,\"62\":2,\"128\":2,\"160\":5,\"173\":3,\"175\":1,\"176\":2,\"177\":3}}],[\"clear\",{\"1\":{\"173\":1}}],[\"clearly\",{\"1\":{\"21\":1,\"73\":1}}],[\"closed\",{\"1\":{\"77\":1}}],[\"clay\",{\"1\":{\"22\":4}}],[\"class1\",{\"1\":{\"177\":3}}],[\"class02\",{\"1\":{\"122\":1}}],[\"class01\",{\"1\":{\"122\":1}}],[\"class\",{\"1\":{\"21\":3,\"31\":1,\"176\":2,\"207\":1}}],[\"categorize\",{\"1\":{\"212\":1}}],[\"capitalizes\",{\"1\":{\"84\":1,\"85\":1}}],[\"capitalize\",{\"0\":{\"84\":1},\"1\":{\"84\":1}}],[\"calculator\",{\"0\":{\"212\":1}}],[\"calculation\",{\"1\":{\"118\":1,\"212\":1}}],[\"calculations\",{\"1\":{\"61\":1}}],[\"calculated\",{\"1\":{\"212\":1}}],[\"calculate\",{\"1\":{\"117\":1,\"211\":1,\"216\":1}}],[\"calculates\",{\"1\":{\"61\":2,\"65\":1,\"66\":1,\"67\":1,\"214\":1}}],[\"call\",{\"1\":{\"22\":1,\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"170\":1,\"171\":2,\"173\":1}}],[\"cause\",{\"1\":{\"54\":1,\"109\":1}}],[\"cava\",{\"1\":{\"32\":1}}],[\"cases\",{\"1\":{\"167\":1}}],[\"case\",{\"1\":{\"31\":1,\"32\":1,\"48\":1,\"88\":1}}],[\"cancel\",{\"1\":{\"109\":2}}],[\"cannot\",{\"1\":{\"31\":3,\"32\":1,\"41\":2,\"47\":1,\"54\":2,\"73\":1,\"103\":1,\"107\":1,\"128\":1,\"151\":1,\"167\":3}}],[\"can\",{\"0\":{\"27\":1},\"1\":{\"21\":2,\"22\":1,\"24\":2,\"31\":1,\"32\":5,\"41\":2,\"44\":2,\"47\":1,\"48\":5,\"51\":2,\"54\":2,\"73\":2,\"79\":1,\"96\":1,\"97\":1,\"98\":1,\"103\":1,\"107\":1,\"108\":2,\"109\":1,\"115\":2,\"122\":1,\"132\":2,\"138\":1,\"151\":1,\"160\":2,\"166\":1,\"167\":4,\"171\":1,\"192\":1,\"209\":1,\"215\":1}}],[\"cambridge\",{\"1\":{\"0\":1}}],[\"coins\",{\"1\":{\"210\":2,\"211\":2}}],[\"could\",{\"1\":{\"208\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"country\",{\"1\":{\"209\":1}}],[\"counts\",{\"1\":{\"88\":1}}],[\"count\",{\"0\":{\"88\":1,\"142\":2},\"1\":{\"88\":2,\"99\":2,\"142\":1}}],[\"counted\",{\"1\":{\"44\":1,\"47\":1}}],[\"correct\",{\"1\":{\"73\":1}}],[\"corresponding\",{\"1\":{\"51\":1,\"68\":1,\"160\":3,\"166\":1,\"171\":1}}],[\"coke\",{\"1\":{\"32\":1}}],[\"collective\",{\"0\":{\"216\":1}}],[\"collaborating\",{\"1\":{\"207\":1}}],[\"cola\",{\"1\":{\"32\":6}}],[\"colons\",{\"1\":{\"1\":1}}],[\"com\",{\"1\":{\"173\":2}}],[\"combining\",{\"0\":{\"140\":1}}],[\"combination\",{\"1\":{\"31\":1}}],[\"comment\",{\"1\":{\"207\":1}}],[\"comments\",{\"1\":{\"73\":1}}],[\"commonly\",{\"1\":{\"215\":1}}],[\"common\",{\"0\":{\"178\":1},\"1\":{\"189\":1}}],[\"comma\",{\"1\":{\"154\":2}}],[\"commas\",{\"1\":{\"122\":1,\"150\":1,\"165\":1}}],[\"comes\",{\"1\":{\"117\":1}}],[\"completing\",{\"1\":{\"164\":1}}],[\"completed\",{\"1\":{\"207\":1}}],[\"complete\",{\"1\":{\"164\":1}}],[\"complex\",{\"1\":{\"103\":1}}],[\"compare\",{\"1\":{\"199\":1}}],[\"compared\",{\"1\":{\"167\":1}}],[\"compares\",{\"1\":{\"68\":1}}],[\"comparing\",{\"0\":{\"63\":1,\"151\":1}}],[\"comparisons\",{\"1\":{\"67\":1}}],[\"comparison\",{\"0\":{\"63\":1,\"68\":1}}],[\"composed\",{\"1\":{\"51\":1,\"72\":1}}],[\"composition\",{\"0\":{\"124\":1},\"1\":{\"51\":1}}],[\"computer\",{\"1\":{\"21\":1,\"176\":1,\"207\":1}}],[\"convenient\",{\"1\":{\"212\":1}}],[\"conversion\",{\"0\":{\"116\":1},\"1\":{\"117\":1}}],[\"convert\",{\"1\":{\"122\":1,\"157\":2,\"160\":1,\"167\":1}}],[\"converted\",{\"1\":{\"103\":1,\"158\":1}}],[\"converts\",{\"1\":{\"82\":1,\"83\":1,\"158\":1,\"214\":1}}],[\"conformance\",{\"1\":{\"207\":1}}],[\"concatenating\",{\"0\":{\"155\":1}}],[\"concatenation\",{\"0\":{\"110\":1},\"1\":{\"103\":1,\"108\":1}}],[\"concatenate\",{\"1\":{\"103\":1,\"155\":1}}],[\"concatenated\",{\"1\":{\"103\":1}}],[\"conditions\",{\"0\":{\"200\":1},\"1\":{\"198\":1,\"200\":2}}],[\"conditional\",{\"0\":{\"199\":1},\"1\":{\"197\":1}}],[\"condition\",{\"1\":{\"56\":3,\"198\":1}}],[\"consecutive\",{\"1\":{\"96\":1}}],[\"consider\",{\"1\":{\"154\":1}}],[\"considered\",{\"1\":{\"41\":1,\"197\":2,\"198\":1}}],[\"consists\",{\"1\":{\"92\":1,\"95\":1,\"160\":1,\"165\":1}}],[\"constant\",{\"1\":{\"48\":1}}],[\"controversial\",{\"1\":{\"215\":1}}],[\"control\",{\"1\":{\"80\":1}}],[\"controls\",{\"1\":{\"80\":2,\"99\":1,\"100\":1,\"101\":1,\"106\":1}}],[\"contrast\",{\"1\":{\"167\":1}}],[\"contact\",{\"1\":{\"170\":1}}],[\"contacts\",{\"1\":{\"164\":1}}],[\"containing\",{\"1\":{\"160\":1,\"167\":1}}],[\"contains\",{\"1\":{\"92\":1,\"215\":5}}],[\"contain\",{\"1\":{\"31\":1,\"167\":1,\"207\":1}}],[\"containers\",{\"1\":{\"173\":1}}],[\"container\",{\"0\":{\"6\":1}}],[\"contents\",{\"1\":{\"160\":1}}],[\"content\",{\"1\":{\"32\":2,\"73\":1,\"86\":1,\"92\":1,\"122\":1}}],[\"continue\",{\"1\":{\"31\":1}}],[\"congress\",{\"1\":{\"22\":1}}],[\"copy\",{\"1\":{\"1\":1,\"21\":1}}],[\"coder\",{\"1\":{\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1}}],[\"code\",{\"0\":{\"3\":1,\"38\":1,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"56\":1},\"1\":{\"1\":1,\"41\":1,\"62\":4,\"65\":2,\"66\":2,\"67\":3,\"68\":2,\"73\":2,\"109\":1,\"113\":1,\"115\":1,\"117\":2,\"128\":1}}],[\"chosen\",{\"1\":{\"175\":1}}],[\"choose\",{\"1\":{\"48\":1}}],[\"checking\",{\"0\":{\"141\":1,\"200\":1},\"1\":{\"183\":2}}],[\"checks\",{\"1\":{\"63\":6,\"86\":1,\"87\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":1,\"95\":1,\"183\":1}}],[\"check\",{\"1\":{\"38\":6,\"40\":2,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"198\":1,\"199\":2,\"200\":2}}],[\"children\",{\"1\":{\"32\":2}}],[\"chinese\",{\"1\":{\"1\":1,\"176\":1}}],[\"chance\",{\"1\":{\"215\":2}}],[\"chances\",{\"1\":{\"215\":1}}],[\"changing\",{\"1\":{\"32\":2}}],[\"changed\",{\"1\":{\"32\":1,\"41\":1,\"44\":1,\"47\":1,\"108\":1,\"127\":1}}],[\"changes\",{\"0\":{\"26\":1}}],[\"change\",{\"1\":{\"20\":1,\"21\":1,\"32\":2,\"48\":2,\"51\":1,\"54\":2,\"80\":1,\"103\":1,\"108\":1,\"209\":2}}],[\"chaotic\",{\"1\":{\"73\":1}}],[\"character\",{\"0\":{\"76\":1},\"1\":{\"41\":2,\"76\":4,\"77\":1,\"80\":1,\"87\":1,\"88\":1,\"89\":3,\"90\":3,\"91\":1,\"92\":1,\"96\":1,\"99\":2,\"100\":2,\"101\":1,\"109\":2}}],[\"characteristics\",{\"0\":{\"41\":1,\"44\":1,\"47\":1,\"51\":1,\"54\":1,\"60\":1,\"114\":1,\"154\":1},\"1\":{\"21\":1,\"115\":1}}],[\"characters\",{\"0\":{\"75\":1,\"77\":1,\"78\":1},\"1\":{\"1\":1,\"41\":1,\"72\":1,\"74\":1,\"78\":3,\"79\":3,\"92\":1,\"95\":1,\"96\":2,\"97\":2,\"98\":2,\"102\":1}}],[\"uy\",{\"1\":{\"208\":1}}],[\"u\",{\"1\":{\"192\":2,\"209\":2}}],[\"updating\",{\"0\":{\"172\":1}}],[\"upper\",{\"0\":{\"82\":1},\"1\":{\"82\":1}}],[\"uppercase\",{\"1\":{\"31\":1,\"82\":1,\"93\":2}}],[\"up\",{\"1\":{\"48\":1}}],[\"unreliable\",{\"1\":{\"212\":1}}],[\"unhashable\",{\"1\":{\"166\":1}}],[\"unchanged\",{\"1\":{\"146\":1}}],[\"unless\",{\"1\":{\"103\":1}}],[\"until\",{\"1\":{\"96\":1}}],[\"union\",{\"0\":{\"189\":1},\"1\":{\"189\":1,\"191\":1,\"192\":1}}],[\"uniqueness\",{\"1\":{\"54\":1}}],[\"university\",{\"1\":{\"0\":1}}],[\"unnecessary\",{\"1\":{\"48\":1}}],[\"understood\",{\"1\":{\"73\":1,\"164\":1}}],[\"understand\",{\"1\":{\"51\":1,\"164\":1}}],[\"understanding\",{\"0\":{\"19\":1,\"20\":1}}],[\"underscores\",{\"1\":{\"31\":1}}],[\"underline\",{\"0\":{\"8\":1}}],[\"unordered\",{\"0\":{\"5\":1},\"1\":{\"51\":2,\"54\":1}}],[\"usually\",{\"1\":{\"124\":1}}],[\"usage\",{\"0\":{\"112\":1}}],[\"using\",{\"0\":{\"157\":1,\"158\":1,\"159\":1,\"167\":1,\"169\":1,\"171\":1},\"1\":{\"1\":1,\"22\":1,\"31\":1,\"32\":1,\"48\":1,\"73\":1,\"100\":2,\"101\":1,\"103\":1,\"105\":1,\"108\":2,\"109\":1,\"160\":1,\"164\":1,\"165\":1,\"167\":1,\"171\":2,\"175\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":2}}],[\"useful\",{\"1\":{\"160\":1}}],[\"users\",{\"1\":{\"103\":1,\"108\":1,\"113\":1,\"115\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1,\"173\":1}}],[\"user\",{\"0\":{\"111\":1},\"1\":{\"48\":3,\"112\":3,\"113\":4,\"117\":3,\"118\":2,\"129\":1,\"164\":1,\"208\":2,\"209\":1,\"210\":2,\"211\":4,\"215\":1}}],[\"used\",{\"0\":{\"27\":1},\"1\":{\"31\":2,\"48\":1,\"51\":1,\"61\":1,\"73\":1,\"107\":1,\"130\":1,\"132\":1,\"137\":1,\"139\":1,\"166\":1,\"197\":1,\"198\":2,\"212\":1}}],[\"use\",{\"0\":{\"117\":1},\"1\":{\"1\":3,\"24\":1,\"32\":3,\"74\":1,\"77\":1,\"78\":1,\"80\":2,\"106\":1,\"108\":1,\"109\":1,\"112\":1,\"113\":1,\"117\":1,\"118\":1,\"122\":1,\"126\":1,\"131\":1,\"140\":1,\"143\":1,\"150\":1,\"151\":2,\"155\":1,\"164\":1,\"169\":1,\"175\":1,\"183\":2,\"187\":2,\"200\":2,\"207\":1}}],[\"turn\",{\"1\":{\"207\":1}}],[\"tup2\",{\"1\":{\"155\":2,\"160\":2}}],[\"tup1\",{\"1\":{\"155\":2,\"158\":2,\"160\":2}}],[\"tup\",{\"1\":{\"46\":3,\"47\":1,\"50\":2,\"150\":3,\"152\":3,\"153\":6,\"154\":4,\"155\":2,\"157\":5,\"158\":2}}],[\"tuple\",{\"0\":{\"45\":1,\"48\":1,\"149\":1,\"150\":1,\"154\":1},\"1\":{\"46\":2,\"47\":3,\"48\":5,\"54\":1,\"117\":1,\"132\":1,\"150\":2,\"152\":2,\"154\":3,\"157\":4,\"158\":2,\"160\":1,\"167\":1}}],[\"tuples\",{\"0\":{\"45\":1,\"47\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"156\":1},\"1\":{\"47\":1,\"51\":1,\"116\":1,\"151\":3,\"155\":1,\"157\":1,\"160\":4,\"164\":1,\"167\":2,\"182\":1}}],[\"tthis\",{\"1\":{\"109\":5}}],[\"tfor\",{\"1\":{\"109\":4}}],[\"taking\",{\"1\":{\"208\":1}}],[\"take\",{\"1\":{\"138\":1}}],[\"takes\",{\"1\":{\"68\":1,\"209\":1}}],[\"tab\",{\"1\":{\"109\":2,\"128\":3}}],[\"target\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"96\":1}}],[\"tasks\",{\"1\":{\"164\":1}}],[\"task\",{\"0\":{\"5\":1},\"1\":{\"117\":1}}],[\"term\",{\"1\":{\"209\":1}}],[\"tencent\",{\"1\":{\"173\":2}}],[\"text\",{\"1\":{\"67\":1,\"73\":1}}],[\"testing\",{\"0\":{\"199\":1}}],[\"tests\",{\"1\":{\"197\":1}}],[\"test\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"164\":2}}],[\"templates\",{\"1\":{\"107\":1}}],[\"template\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"104\":12,\"107\":2}}],[\"teller\",{\"1\":{\"107\":1}}],[\"tell\",{\"1\":{\"48\":1}}],[\"teacher\",{\"1\":{\"21\":3}}],[\"typeerror\",{\"1\":{\"103\":1,\"108\":1,\"132\":1,\"152\":1,\"166\":1}}],[\"types\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"60\":1},\"1\":{\"32\":1,\"44\":2,\"51\":2,\"54\":1,\"73\":1,\"103\":1,\"164\":2,\"166\":2,\"167\":1}}],[\"type\",{\"0\":{\"59\":1,\"115\":1,\"116\":1},\"1\":{\"32\":2,\"38\":12,\"40\":5,\"41\":1,\"43\":5,\"44\":2,\"46\":5,\"47\":2,\"50\":5,\"51\":1,\"53\":5,\"56\":1,\"60\":1,\"106\":1,\"115\":6,\"116\":3,\"117\":8,\"132\":1,\"137\":1,\"150\":1,\"152\":1,\"154\":3,\"166\":2,\"167\":3,\"170\":1}}],[\"typora\",{\"0\":{\"1\":1},\"2\":{\"13\":1,\"17\":1,\"34\":1,\"58\":1,\"70\":1,\"120\":1,\"148\":1,\"162\":1,\"185\":1,\"195\":1,\"202\":1,\"205\":1,\"218\":1}}],[\"t\",{\"0\":{\"215\":1},\"1\":{\"21\":1,\"32\":3,\"38\":6,\"40\":3,\"43\":3,\"46\":3,\"48\":1,\"50\":3,\"53\":3,\"54\":1,\"73\":2,\"102\":1,\"109\":3,\"122\":1,\"128\":2,\"132\":1,\"170\":1,\"171\":2}}],[\"tried\",{\"1\":{\"171\":1}}],[\"tricks\",{\"1\":{\"117\":1}}],[\"triple\",{\"1\":{\"1\":1,\"73\":3,\"117\":1}}],[\"traceback\",{\"1\":{\"103\":1,\"108\":1,\"117\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"170\":1,\"173\":1}}],[\"tracks\",{\"1\":{\"48\":1}}],[\"track\",{\"1\":{\"21\":1,\"48\":4}}],[\"trailing\",{\"1\":{\"96\":3,\"98\":2}}],[\"translation\",{\"1\":{\"67\":1,\"92\":1}}],[\"transformation\",{\"0\":{\"62\":1}}],[\"trying\",{\"0\":{\"118\":1,\"129\":1}}],[\"try\",{\"1\":{\"31\":1,\"63\":1,\"175\":1}}],[\"true\",{\"1\":{\"31\":1,\"32\":11,\"43\":2,\"46\":2,\"56\":2,\"63\":5,\"86\":2,\"87\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":2,\"95\":2,\"116\":1,\"117\":1,\"132\":2,\"141\":1,\"146\":1,\"166\":4,\"177\":2,\"179\":1,\"180\":1,\"181\":3,\"182\":3,\"183\":5,\"197\":5,\"198\":21,\"200\":3,\"215\":2}}],[\"tissue\",{\"1\":{\"212\":1}}],[\"timetables\",{\"0\":{\"216\":1}}],[\"times\",{\"1\":{\"54\":3,\"88\":1}}],[\"time\",{\"1\":{\"48\":2,\"103\":1,\"216\":4}}],[\"tip\",{\"0\":{\"6\":1}}],[\"title\",{\"0\":{\"2\":1,\"85\":1},\"1\":{\"1\":1,\"85\":2}}],[\"together\",{\"1\":{\"216\":2}}],[\"total\",{\"1\":{\"210\":1,\"216\":3}}],[\"toa\",{\"1\":{\"64\":4}}],[\"topics\",{\"1\":{\"215\":1}}],[\"top\",{\"1\":{\"22\":1}}],[\"to\",{\"0\":{\"22\":1,\"29\":1,\"30\":1,\"133\":1,\"164\":1,\"171\":1,\"193\":1},\"1\":{\"1\":3,\"21\":4,\"22\":4,\"31\":2,\"32\":6,\"41\":3,\"44\":6,\"47\":6,\"48\":15,\"51\":1,\"54\":2,\"62\":2,\"63\":2,\"64\":3,\"67\":1,\"68\":3,\"73\":3,\"77\":2,\"78\":2,\"79\":2,\"80\":4,\"82\":1,\"83\":1,\"85\":2,\"86\":2,\"87\":2,\"88\":1,\"92\":1,\"100\":2,\"101\":1,\"103\":6,\"104\":24,\"105\":3,\"106\":1,\"108\":3,\"109\":6,\"110\":1,\"112\":1,\"113\":2,\"115\":1,\"117\":2,\"118\":1,\"122\":4,\"127\":2,\"129\":2,\"130\":4,\"131\":1,\"137\":3,\"138\":2,\"139\":1,\"143\":1,\"146\":2,\"150\":1,\"151\":1,\"152\":1,\"154\":2,\"155\":1,\"157\":2,\"158\":3,\"160\":4,\"164\":4,\"166\":2,\"167\":7,\"169\":1,\"170\":1,\"171\":4,\"172\":1,\"173\":1,\"187\":1,\"191\":1,\"198\":6,\"199\":1,\"200\":2,\"207\":1,\"209\":2,\"210\":1,\"211\":3,\"212\":1,\"214\":3,\"215\":4,\"216\":1}}],[\"two\",{\"0\":{\"117\":1,\"140\":1},\"1\":{\"1\":1,\"32\":2,\"44\":1,\"47\":1,\"48\":1,\"62\":6,\"63\":2,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"110\":1,\"117\":1,\"118\":1,\"129\":1,\"160\":2,\"164\":1,\"165\":1,\"167\":3,\"198\":1,\"211\":1,\"214\":1}}],[\"thumb\",{\"1\":{\"212\":1}}],[\"than\",{\"1\":{\"63\":4,\"68\":7,\"209\":2}}],[\"that\",{\"1\":{\"21\":2,\"24\":1,\"41\":2,\"48\":3,\"54\":2,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"100\":1,\"103\":2,\"113\":1,\"115\":1,\"117\":1,\"122\":1,\"129\":1,\"132\":1,\"160\":1,\"170\":1,\"171\":1,\"188\":1,\"189\":1,\"191\":1,\"207\":2,\"208\":1,\"209\":5,\"210\":1,\"211\":4,\"213\":1,\"214\":1,\"215\":2,\"216\":1}}],[\"third\",{\"1\":{\"80\":1,\"127\":1}}],[\"thin\",{\"0\":{\"211\":1}}],[\"think\",{\"1\":{\"73\":1,\"128\":1}}],[\"things\",{\"1\":{\"21\":1}}],[\"this\",{\"1\":{\"22\":1,\"24\":1,\"48\":1,\"73\":1,\"109\":2,\"115\":1,\"130\":1,\"154\":1,\"160\":1,\"167\":1,\"207\":2,\"208\":1,\"209\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"throwing\",{\"1\":{\"54\":1}}],[\"throw\",{\"1\":{\"54\":1}}],[\"through\",{\"1\":{\"22\":1,\"160\":1}}],[\"three\",{\"0\":{\"41\":1,\"44\":1,\"47\":1},\"1\":{\"1\":3,\"99\":1,\"104\":2,\"106\":1,\"192\":1}}],[\"these\",{\"1\":{\"209\":1,\"215\":1}}],[\"them\",{\"1\":{\"79\":1,\"208\":2,\"215\":1,\"216\":4}}],[\"their\",{\"1\":{\"32\":2,\"65\":1,\"66\":1,\"68\":1,\"160\":1,\"208\":2,\"215\":1}}],[\"they\",{\"1\":{\"22\":2,\"209\":1,\"215\":1}}],[\"then\",{\"1\":{\"21\":1,\"22\":1,\"48\":2,\"62\":3,\"73\":1,\"210\":1,\"211\":1,\"214\":1}}],[\"therefore\",{\"1\":{\"117\":1,\"167\":2}}],[\"there\",{\"1\":{\"21\":1,\"32\":2,\"44\":1,\"47\":1,\"48\":9,\"54\":1,\"116\":1,\"139\":1,\"167\":1,\"209\":5,\"216\":1}}],[\"the\",{\"0\":{\"25\":1,\"26\":1,\"29\":1,\"63\":1,\"142\":1,\"143\":1,\"167\":1,\"170\":1,\"215\":1},\"1\":{\"0\":1,\"1\":5,\"21\":12,\"22\":11,\"24\":2,\"31\":1,\"32\":22,\"41\":5,\"44\":3,\"47\":3,\"48\":23,\"54\":9,\"60\":6,\"62\":14,\"63\":12,\"64\":4,\"65\":1,\"67\":4,\"68\":1,\"73\":11,\"74\":2,\"76\":4,\"77\":3,\"78\":1,\"79\":3,\"80\":7,\"82\":1,\"83\":1,\"84\":2,\"85\":1,\"86\":1,\"87\":1,\"88\":2,\"89\":9,\"90\":7,\"91\":2,\"92\":6,\"93\":2,\"94\":2,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":5,\"100\":4,\"101\":3,\"102\":1,\"103\":1,\"107\":1,\"108\":2,\"109\":3,\"110\":2,\"113\":2,\"115\":5,\"117\":6,\"118\":2,\"122\":5,\"124\":1,\"125\":3,\"126\":3,\"127\":2,\"129\":4,\"130\":11,\"131\":1,\"134\":1,\"137\":2,\"138\":4,\"139\":6,\"140\":1,\"143\":3,\"145\":3,\"146\":3,\"154\":1,\"155\":1,\"157\":3,\"158\":1,\"160\":2,\"164\":8,\"165\":1,\"167\":13,\"169\":2,\"171\":22,\"173\":1,\"175\":3,\"180\":1,\"181\":1,\"182\":1,\"183\":2,\"187\":1,\"188\":1,\"189\":1,\"190\":2,\"191\":4,\"192\":1,\"198\":6,\"199\":2,\"207\":2,\"208\":4,\"209\":10,\"210\":7,\"211\":14,\"212\":4,\"213\":1,\"214\":2,\"215\":6,\"216\":9}}],[\"hw1\",{\"1\":{\"207\":3}}],[\"h\",{\"1\":{\"102\":1,\"122\":1,\"128\":2,\"132\":1}}],[\"huangjiabao\",{\"1\":{\"103\":1,\"108\":1}}],[\"huang\",{\"1\":{\"73\":1}}],[\"hour\",{\"1\":{\"216\":1}}],[\"hours\",{\"1\":{\"216\":6}}],[\"homework\",{\"1\":{\"207\":1}}],[\"home\",{\"1\":{\"32\":2}}],[\"however\",{\"1\":{\"117\":1}}],[\"how\",{\"0\":{\"22\":1,\"164\":1},\"1\":{\"32\":2,\"73\":1,\"78\":1,\"100\":1,\"101\":1,\"113\":1,\"115\":2,\"164\":2,\"167\":1,\"192\":1}}],[\"hint\",{\"1\":{\"211\":1}}],[\"hinc\",{\"1\":{\"0\":1}}],[\"hi\",{\"1\":{\"103\":2,\"104\":24,\"105\":2}}],[\"highest\",{\"1\":{\"60\":2}}],[\"hire\",{\"1\":{\"48\":1}}],[\"hidden\",{\"1\":{\"32\":1}}],[\"hatter\",{\"0\":{\"211\":1}}],[\"han\",{\"1\":{\"175\":1}}],[\"hanme\",{\"1\":{\"167\":1}}],[\"hanmeimei=99\",{\"1\":{\"167\":3}}],[\"hanmeimei\",{\"1\":{\"122\":1,\"165\":1,\"166\":4,\"167\":3,\"169\":2,\"170\":1,\"171\":1,\"172\":2}}],[\"hahaha\",{\"1\":{\"48\":1}}],[\"has\",{\"1\":{\"48\":1,\"80\":1,\"113\":1,\"154\":2,\"215\":3,\"216\":6}}],[\"hash\",{\"1\":{\"1\":1}}],[\"having\",{\"1\":{\"48\":1}}],[\"haven\",{\"1\":{\"73\":1}}],[\"have\",{\"0\":{\"209\":1},\"1\":{\"21\":1,\"32\":4,\"48\":2,\"54\":2,\"62\":1,\"73\":1,\"160\":1,\"164\":1,\"207\":2,\"215\":1}}],[\"had\",{\"1\":{\"22\":1}}],[\"height\",{\"1\":{\"212\":3,\"213\":2,\"214\":2}}],[\"header\",{\"1\":{\"207\":1}}],[\"headings\",{\"0\":{\"5\":1},\"1\":{\"1\":2}}],[\"hence\",{\"1\":{\"173\":1}}],[\"help\",{\"1\":{\"31\":2,\"164\":1}}],[\"hello\",{\"0\":{\"208\":1},\"1\":{\"1\":1,\"32\":2,\"40\":2,\"43\":2,\"46\":2,\"53\":2,\"54\":2,\"73\":2,\"74\":1,\"76\":1,\"77\":1,\"108\":2,\"117\":2}}],[\"here\",{\"1\":{\"0\":1,\"31\":1,\"67\":1,\"92\":1,\"171\":1,\"207\":1}}],[\"hyphens\",{\"1\":{\"1\":1,\"96\":3,\"99\":1}}],[\"squared\",{\"1\":{\"212\":1}}],[\"square\",{\"0\":{\"169\":1},\"1\":{\"122\":1,\"125\":1,\"126\":1,\"151\":1,\"169\":1,\"175\":2}}],[\"small\",{\"1\":{\"113\":1}}],[\"s2\",{\"1\":{\"110\":3,\"198\":2}}],[\"s1\",{\"1\":{\"110\":9,\"198\":2}}],[\"slicing\",{\"0\":{\"128\":1,\"153\":1},\"1\":{\"77\":1,\"78\":1,\"108\":1}}],[\"school\",{\"1\":{\"207\":1}}],[\"science\",{\"1\":{\"176\":1,\"207\":1}}],[\"score\",{\"1\":{\"175\":1}}],[\"scores\",{\"1\":{\"21\":4}}],[\"scenario\",{\"1\":{\"154\":1}}],[\"scammers\",{\"1\":{\"73\":1}}],[\"snippet\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"swap\",{\"1\":{\"32\":2,\"80\":1}}],[\"supports\",{\"1\":{\"113\":1}}],[\"support\",{\"1\":{\"108\":1,\"134\":1,\"152\":1,\"167\":1,\"173\":1}}],[\"suppose\",{\"1\":{\"32\":2,\"62\":4,\"164\":1,\"216\":1}}],[\"success\",{\"1\":{\"73\":1}}],[\"such\",{\"1\":{\"21\":1,\"32\":1,\"48\":2,\"160\":1}}],[\"sure\",{\"1\":{\"67\":1,\"92\":1}}],[\"sum\",{\"0\":{\"65\":1},\"1\":{\"62\":4,\"65\":5,\"117\":1,\"118\":1}}],[\"submit\",{\"1\":{\"207\":2}}],[\"submissions\",{\"1\":{\"207\":1}}],[\"submission\",{\"0\":{\"207\":1}}],[\"substring\",{\"1\":{\"90\":1}}],[\"subtracting\",{\"1\":{\"65\":1}}],[\"subtraction\",{\"1\":{\"61\":1}}],[\"subcharacter\",{\"1\":{\"41\":1}}],[\"suitable\",{\"1\":{\"48\":3,\"116\":2}}],[\"spend\",{\"1\":{\"215\":1}}],[\"specifies\",{\"1\":{\"125\":1,\"130\":1,\"139\":1}}],[\"specified\",{\"1\":{\"96\":2,\"97\":2,\"98\":2,\"104\":2,\"130\":2,\"145\":1,\"171\":4}}],[\"specification\",{\"1\":{\"104\":1}}],[\"specific\",{\"0\":{\"127\":1,\"130\":1},\"1\":{\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"100\":1,\"101\":1,\"102\":1,\"179\":1,\"199\":2}}],[\"specifying\",{\"1\":{\"104\":1,\"137\":1}}],[\"specify\",{\"1\":{\"54\":1,\"137\":1,\"138\":1,\"139\":1,\"171\":2}}],[\"special\",{\"1\":{\"32\":1,\"48\":1,\"72\":1}}],[\"splits\",{\"1\":{\"100\":3,\"101\":2}}],[\"split\",{\"0\":{\"100\":1},\"1\":{\"100\":5}}],[\"space\",{\"1\":{\"1\":1,\"21\":1,\"22\":1,\"24\":2,\"48\":6,\"100\":1,\"167\":1}}],[\"spaces\",{\"1\":{\"1\":1,\"31\":1,\"74\":1,\"96\":2,\"99\":1}}],[\"symmetric\",{\"0\":{\"191\":1},\"1\":{\"191\":2,\"192\":1}}],[\"symbol\",{\"1\":{\"109\":1}}],[\"symbols\",{\"1\":{\"1\":1}}],[\"syntaxerror\",{\"1\":{\"167\":1}}],[\"syntax\",{\"1\":{\"77\":1,\"78\":1,\"130\":1,\"171\":1}}],[\"system\",{\"1\":{\"31\":1,\"48\":1}}],[\"side\",{\"1\":{\"198\":1}}],[\"since\",{\"1\":{\"157\":1}}],[\"single\",{\"0\":{\"76\":1,\"125\":1,\"134\":1},\"1\":{\"73\":2,\"104\":1,\"106\":1,\"110\":1,\"117\":1,\"132\":1,\"166\":2}}],[\"significance\",{\"1\":{\"164\":1}}],[\"sign\",{\"1\":{\"140\":1,\"155\":1}}],[\"sihtrofnro\",{\"1\":{\"80\":1}}],[\"sihtrofnrob\",{\"1\":{\"80\":1}}],[\"simply\",{\"1\":{\"140\":1,\"155\":1}}],[\"simultaneously\",{\"0\":{\"25\":1,\"27\":1,\"29\":1,\"30\":1},\"1\":{\"24\":1,\"32\":1,\"96\":1}}],[\"similar\",{\"1\":{\"22\":1,\"48\":1,\"109\":1,\"117\":1,\"170\":1}}],[\"sizes\",{\"1\":{\"68\":1}}],[\"size\",{\"1\":{\"20\":1,\"21\":1,\"80\":2,\"199\":1}}],[\"sample\",{\"1\":{\"209\":1}}],[\"same\",{\"0\":{\"29\":1},\"1\":{\"32\":1,\"54\":1,\"158\":1,\"160\":1,\"208\":1,\"209\":1}}],[\"satisfy\",{\"1\":{\"198\":1}}],[\"satisfied\",{\"1\":{\"80\":1,\"198\":1}}],[\"say\",{\"1\":{\"22\":1,\"54\":2,\"73\":1}}],[\"sacra\",{\"1\":{\"0\":1}}],[\"sorts\",{\"1\":{\"146\":1}}],[\"sorted\",{\"0\":{\"146\":1,\"158\":1},\"1\":{\"145\":1,\"146\":1,\"158\":3}}],[\"sort\",{\"0\":{\"145\":1},\"1\":{\"145\":3,\"157\":2,\"208\":1}}],[\"sorting\",{\"0\":{\"144\":1,\"156\":1},\"1\":{\"157\":1}}],[\"solution\",{\"1\":{\"117\":1}}],[\"solve\",{\"0\":{\"171\":1},\"1\":{\"113\":1,\"115\":1,\"117\":1}}],[\"somebody\",{\"1\":{\"209\":1}}],[\"something\",{\"1\":{\"73\":1}}],[\"sometimes\",{\"1\":{\"73\":1}}],[\"some\",{\"0\":{\"209\":2},\"1\":{\"51\":1,\"116\":1,\"208\":1,\"215\":1,\"216\":1}}],[\"software\",{\"1\":{\"48\":1}}],[\"social\",{\"1\":{\"48\":1}}],[\"so\",{\"1\":{\"21\":2,\"22\":1,\"48\":4,\"60\":2,\"73\":1,\"80\":1,\"127\":1,\"158\":1,\"164\":1,\"171\":2,\"198\":1,\"211\":1}}],[\"shows\",{\"1\":{\"211\":1}}],[\"shown\",{\"1\":{\"210\":1}}],[\"should\",{\"1\":{\"1\":1,\"21\":1,\"62\":3,\"80\":1,\"110\":1,\"164\":2,\"207\":3,\"210\":1,\"211\":2}}],[\"shenzhen\",{\"1\":{\"104\":4}}],[\"sheets\",{\"1\":{\"21\":1}}],[\"sheet\",{\"1\":{\"21\":2}}],[\"shanghai\",{\"1\":{\"104\":4}}],[\"shallow\",{\"1\":{\"73\":2}}],[\"s\",{\"1\":{\"21\":4,\"22\":2,\"31\":1,\"32\":6,\"44\":1,\"47\":1,\"48\":1,\"67\":1,\"73\":1,\"102\":1,\"106\":10,\"108\":3,\"109\":15,\"116\":3,\"117\":31,\"122\":1,\"125\":1,\"132\":1,\"164\":1,\"208\":1,\"209\":2,\"210\":2,\"212\":2,\"215\":1}}],[\"semi\",{\"1\":{\"216\":4}}],[\"sentence\",{\"1\":{\"208\":1}}],[\"sensitive\",{\"1\":{\"31\":1,\"32\":1,\"88\":1}}],[\"search\",{\"1\":{\"164\":3}}],[\"searching\",{\"1\":{\"89\":1,\"90\":1,\"170\":1}}],[\"self\",{\"1\":{\"112\":1}}],[\"select\",{\"1\":{\"77\":1,\"78\":7,\"79\":4,\"80\":10}}],[\"selecting\",{\"1\":{\"76\":4,\"77\":1}}],[\"sequences\",{\"1\":{\"167\":1,\"197\":1}}],[\"sequence\",{\"0\":{\"141\":1},\"1\":{\"72\":1,\"199\":1}}],[\"series\",{\"1\":{\"51\":1,\"174\":1,\"215\":1}}],[\"set2\",{\"1\":{\"54\":2,\"188\":2,\"189\":2,\"190\":4,\"191\":4,\"192\":3,\"193\":1}}],[\"sets\",{\"1\":{\"54\":1,\"116\":1,\"188\":1,\"189\":1}}],[\"set1\",{\"1\":{\"53\":3,\"54\":2,\"187\":1,\"188\":2,\"189\":2,\"190\":4,\"191\":4,\"192\":3,\"193\":3}}],[\"set\",{\"0\":{\"52\":2,\"54\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"193\":1},\"1\":{\"48\":1,\"53\":2,\"54\":4,\"117\":1,\"132\":1,\"146\":2,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":2,\"193\":1,\"198\":1}}],[\"seconds\",{\"1\":{\"209\":3}}],[\"second\",{\"1\":{\"62\":1,\"63\":4,\"167\":3,\"171\":1}}],[\"secret\",{\"1\":{\"32\":1}}],[\"section\",{\"1\":{\"1\":1}}],[\"sep=\",{\"1\":{\"25\":1,\"27\":1,\"78\":1,\"99\":1,\"100\":1,\"101\":1}}],[\"separator\",{\"1\":{\"102\":1}}],[\"separation\",{\"0\":{\"25\":1}}],[\"separately\",{\"1\":{\"116\":1}}],[\"separated\",{\"1\":{\"24\":1,\"122\":1,\"165\":1}}],[\"separate\",{\"1\":{\"21\":1,\"31\":1,\"150\":1,\"207\":1,\"211\":1,\"214\":1}}],[\"sep\",{\"0\":{\"27\":1},\"1\":{\"24\":1,\"78\":2,\"100\":2,\"101\":1,\"102\":1}}],[\"seems\",{\"1\":{\"117\":1}}],[\"seen\",{\"1\":{\"24\":1}}],[\"see\",{\"1\":{\"21\":1,\"63\":1,\"73\":2,\"115\":1}}],[\"session\",{\"0\":{\"14\":1,\"15\":1}}],[\"stops\",{\"1\":{\"198\":2}}],[\"storing\",{\"0\":{\"176\":1,\"177\":1},\"1\":{\"174\":4}}],[\"stored\",{\"1\":{\"48\":3}}],[\"store\",{\"1\":{\"21\":1,\"32\":1,\"48\":2,\"73\":1}}],[\"step\",{\"1\":{\"80\":1}}],[\"steps\",{\"1\":{\"78\":1,\"158\":1}}],[\"still\",{\"1\":{\"54\":1,\"110\":1,\"208\":1,\"209\":1}}],[\"strange\",{\"1\":{\"167\":1}}],[\"straightforward\",{\"1\":{\"117\":1}}],[\"structures\",{\"1\":{\"207\":1}}],[\"structure\",{\"0\":{\"122\":1,\"165\":1,\"174\":1},\"1\":{\"167\":1}}],[\"strip\",{\"0\":{\"96\":1},\"1\":{\"96\":4}}],[\"string2\",{\"1\":{\"99\":2}}],[\"string1\",{\"1\":{\"99\":2}}],[\"string\",{\"0\":{\"74\":1,\"75\":1,\"80\":1,\"81\":1,\"103\":1,\"109\":1,\"110\":1,\"115\":1},\"1\":{\"40\":5,\"41\":3,\"43\":2,\"46\":2,\"50\":2,\"53\":2,\"54\":1,\"62\":1,\"72\":1,\"73\":4,\"74\":1,\"77\":3,\"78\":11,\"79\":3,\"80\":9,\"82\":3,\"83\":3,\"84\":3,\"85\":2,\"86\":5,\"87\":5,\"88\":5,\"89\":7,\"90\":3,\"91\":7,\"92\":13,\"93\":3,\"94\":3,\"95\":5,\"96\":9,\"97\":3,\"98\":3,\"99\":4,\"100\":6,\"101\":6,\"102\":6,\"103\":9,\"104\":34,\"105\":4,\"106\":16,\"108\":8,\"109\":1,\"110\":1,\"113\":1,\"115\":1,\"117\":9,\"122\":3,\"132\":2}}],[\"strings\",{\"0\":{\"39\":1,\"41\":1,\"71\":1,\"72\":1,\"73\":1,\"108\":1},\"1\":{\"32\":1,\"41\":2,\"51\":1,\"103\":2,\"108\":1,\"110\":1,\"116\":1,\"160\":1,\"164\":1,\"167\":1}}],[\"str\",{\"0\":{\"39\":1,\"115\":1},\"1\":{\"40\":2,\"103\":3,\"108\":1,\"115\":3,\"117\":1,\"166\":1}}],[\"style\",{\"0\":{\"26\":1}}],[\"state\",{\"1\":{\"198\":1}}],[\"statement\",{\"1\":{\"22\":1}}],[\"statements\",{\"0\":{\"22\":1}}],[\"status\",{\"1\":{\"48\":3}}],[\"static\",{\"1\":{\"32\":1}}],[\"starting\",{\"1\":{\"74\":1,\"80\":1}}],[\"start\",{\"1\":{\"1\":1,\"31\":1,\"32\":1,\"77\":2,\"78\":2,\"79\":1,\"126\":1,\"215\":1}}],[\"startswith\",{\"0\":{\"86\":1},\"1\":{\"86\":2}}],[\"starts\",{\"1\":{\"0\":1,\"21\":1,\"41\":2,\"44\":2,\"47\":2,\"86\":1,\"130\":1}}],[\"students\",{\"1\":{\"175\":4}}],[\"student3\",{\"1\":{\"175\":2,\"177\":2}}],[\"student2\",{\"1\":{\"122\":1,\"175\":2,\"177\":2}}],[\"student1\",{\"1\":{\"122\":1,\"175\":2,\"177\":2,\"179\":3,\"180\":2,\"181\":2,\"182\":2,\"183\":6}}],[\"studentcoder\",{\"1\":{\"103\":1,\"108\":1}}],[\"student\",{\"1\":{\"0\":1,\"21\":3}}],[\"pinching\",{\"0\":{\"210\":1}}],[\"physics\",{\"1\":{\"176\":1}}],[\"phone\",{\"0\":{\"164\":1},\"1\":{\"164\":4,\"165\":2,\"166\":5,\"170\":1}}],[\"please\",{\"1\":{\"208\":2,\"209\":1,\"210\":1,\"211\":1,\"213\":2,\"214\":2,\"216\":6}}],[\"pledge\",{\"1\":{\"207\":1}}],[\"plus\",{\"1\":{\"140\":1,\"155\":1}}],[\"player\",{\"1\":{\"215\":3}}],[\"places\",{\"1\":{\"104\":3,\"105\":2,\"106\":1}}],[\"placed\",{\"1\":{\"41\":1,\"167\":1}}],[\"platform\",{\"1\":{\"48\":1}}],[\"py\",{\"1\":{\"103\":1,\"108\":1,\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1,\"173\":1,\"207\":3,\"214\":1}}],[\"pycharm\",{\"1\":{\"103\":1,\"108\":1}}],[\"pythonfile\",{\"1\":{\"132\":1,\"137\":1,\"152\":1,\"166\":1,\"167\":1,\"170\":1}}],[\"python\",{\"0\":{\"220\":1,\"222\":1},\"1\":{\"27\":2,\"31\":3,\"32\":13,\"44\":2,\"47\":1,\"51\":2,\"62\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"73\":2,\"103\":1,\"128\":1,\"173\":1,\"207\":2},\"2\":{\"16\":1,\"33\":1,\"57\":1,\"69\":1,\"119\":1,\"147\":1,\"161\":1,\"184\":1,\"194\":1,\"201\":1,\"204\":1,\"217\":1}}],[\"pure\",{\"1\":{\"91\":1,\"92\":1,\"95\":1,\"183\":2}}],[\"put\",{\"1\":{\"21\":1,\"134\":1}}],[\"ps\",{\"1\":{\"77\":1,\"78\":1}}],[\"p\",{\"1\":{\"68\":13,\"128\":2}}],[\"pennies\",{\"1\":{\"210\":2,\"211\":2}}],[\"penny\",{\"0\":{\"210\":1}}],[\"perhaps\",{\"1\":{\"167\":1}}],[\"performs\",{\"1\":{\"158\":1}}],[\"perform\",{\"1\":{\"100\":1,\"101\":1,\"157\":1}}],[\"personalized\",{\"1\":{\"208\":1}}],[\"person\",{\"1\":{\"48\":3,\"212\":2}}],[\"people\",{\"1\":{\"22\":3}}],[\"pretend\",{\"1\":{\"215\":1}}],[\"prefer\",{\"1\":{\"175\":1}}],[\"previous\",{\"1\":{\"109\":1,\"117\":1}}],[\"preserves\",{\"1\":{\"104\":2}}],[\"preserve\",{\"1\":{\"104\":1,\"105\":1,\"106\":1}}],[\"precision\",{\"1\":{\"60\":2}}],[\"providing\",{\"1\":{\"209\":1}}],[\"provides\",{\"1\":{\"209\":1}}],[\"provide\",{\"1\":{\"171\":1}}],[\"provided\",{\"1\":{\"67\":1,\"92\":1,\"100\":1,\"101\":1,\"171\":1,\"209\":1}}],[\"procedures\",{\"1\":{\"207\":1}}],[\"prompts\",{\"1\":{\"213\":1,\"214\":1}}],[\"prompting\",{\"1\":{\"113\":1}}],[\"prompt\",{\"0\":{\"113\":1},\"1\":{\"113\":1}}],[\"problems\",{\"1\":{\"117\":1}}],[\"problem\",{\"1\":{\"103\":1,\"113\":1,\"115\":1,\"117\":1,\"164\":1}}],[\"product\",{\"1\":{\"66\":5,\"117\":1}}],[\"programming\",{\"1\":{\"124\":1}}],[\"programmer\",{\"1\":{\"113\":1}}],[\"program\",{\"1\":{\"22\":1,\"44\":1,\"47\":1,\"113\":1,\"164\":1,\"208\":1,\"209\":1,\"210\":2,\"211\":3,\"213\":1,\"214\":1,\"215\":1,\"216\":1}}],[\"practice\",{\"0\":{\"62\":1}}],[\"principle\",{\"1\":{\"172\":1}}],[\"prints\",{\"1\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"208\":1,\"209\":1,\"216\":1}}],[\"printed\",{\"0\":{\"25\":1}}],[\"printing\",{\"0\":{\"24\":1}}],[\"print\",{\"0\":{\"23\":1},\"1\":{\"1\":1,\"24\":2,\"25\":1,\"27\":1,\"29\":1,\"30\":1,\"32\":4,\"38\":10,\"40\":5,\"43\":5,\"46\":5,\"50\":5,\"53\":5,\"54\":2,\"56\":2,\"62\":1,\"63\":12,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":6,\"74\":1,\"76\":4,\"77\":1,\"78\":3,\"79\":2,\"80\":5,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"88\":2,\"89\":3,\"90\":1,\"91\":2,\"92\":4,\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":3,\"104\":15,\"105\":2,\"106\":9,\"108\":1,\"109\":5,\"110\":6,\"112\":2,\"113\":1,\"122\":1,\"125\":2,\"126\":1,\"127\":5,\"130\":1,\"131\":1,\"132\":8,\"134\":4,\"135\":2,\"137\":5,\"138\":4,\"139\":2,\"140\":1,\"141\":2,\"142\":1,\"143\":1,\"145\":2,\"150\":1,\"153\":4,\"154\":2,\"155\":1,\"157\":1,\"158\":1,\"160\":1,\"165\":1,\"166\":2,\"167\":2,\"169\":1,\"170\":2,\"171\":3,\"172\":1,\"173\":6,\"175\":3,\"176\":1,\"177\":2,\"179\":1,\"180\":2,\"181\":2,\"182\":2,\"183\":3,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"197\":3,\"198\":2,\"200\":4,\"208\":1,\"211\":1}}],[\"priority\",{\"1\":{\"60\":2}}],[\"pound\",{\"1\":{\"214\":1}}],[\"pounds\",{\"1\":{\"214\":2}}],[\"population\",{\"1\":{\"209\":6}}],[\"pop\",{\"0\":{\"138\":1,\"179\":1},\"1\":{\"138\":3,\"179\":1}}],[\"positive\",{\"1\":{\"80\":4}}],[\"positions\",{\"1\":{\"80\":1,\"104\":1}}],[\"position\",{\"0\":{\"130\":1,\"143\":1},\"1\":{\"80\":1,\"104\":2,\"106\":2,\"124\":1,\"125\":1,\"126\":3,\"127\":1,\"129\":3,\"130\":2,\"143\":1,\"167\":4}}],[\"posts\",{\"1\":{\"48\":2}}],[\"power\",{\"0\":{\"67\":1},\"1\":{\"67\":5}}],[\"points\",{\"1\":{\"21\":3,\"164\":1}}],[\"pocula\",{\"1\":{\"0\":1}}],[\"pattern\",{\"1\":{\"207\":1}}],[\"patterns\",{\"1\":{\"60\":1}}],[\"pair\",{\"1\":{\"179\":1}}],[\"pairs\",{\"1\":{\"160\":1,\"182\":1}}],[\"parentheses\",{\"1\":{\"106\":1,\"150\":1}}],[\"parameter\",{\"1\":{\"99\":1,\"100\":2,\"101\":1,\"104\":1}}],[\"para\",{\"1\":{\"73\":1,\"74\":2,\"76\":6,\"77\":2}}],[\"paragraph\",{\"1\":{\"73\":1}}],[\"particular\",{\"1\":{\"139\":1}}],[\"part\",{\"0\":{\"213\":1,\"214\":1},\"1\":{\"61\":1,\"207\":1,\"208\":1,\"214\":2}}],[\"pass\",{\"1\":{\"31\":1,\"48\":1}}],[\"paste\",{\"1\":{\"1\":1}}],[\"paper\",{\"1\":{\"21\":2}}],[\"page\",{\"0\":{\"0\":1},\"1\":{\"209\":1}}],[\"emigration\",{\"1\":{\"209\":1}}],[\"empty\",{\"1\":{\"32\":1,\"197\":3}}],[\"either\",{\"1\":{\"117\":1,\"215\":1}}],[\"evaluates\",{\"1\":{\"198\":2}}],[\"eval\",{\"0\":{\"117\":1},\"1\":{\"117\":21}}],[\"event\",{\"1\":{\"54\":1}}],[\"everything\",{\"1\":{\"73\":2}}],[\"every\",{\"1\":{\"48\":1,\"54\":1,\"209\":4}}],[\"estimated\",{\"1\":{\"209\":2}}],[\"estimates\",{\"1\":{\"209\":1}}],[\"essentially\",{\"1\":{\"158\":1}}],[\"escape\",{\"1\":{\"109\":1}}],[\"escaping\",{\"0\":{\"109\":1},\"1\":{\"109\":2}}],[\"especially\",{\"1\":{\"103\":1,\"113\":1}}],[\"equivalent\",{\"1\":{\"64\":6,\"191\":1,\"198\":2,\"211\":1}}],[\"equal\",{\"1\":{\"63\":4,\"68\":3,\"199\":1,\"209\":1,\"214\":2}}],[\"e\",{\"1\":{\"62\":1,\"209\":1}}],[\"error\",{\"1\":{\"54\":1,\"62\":1,\"90\":1,\"117\":2,\"130\":1,\"143\":1,\"152\":1,\"166\":1}}],[\"earliest\",{\"1\":{\"73\":1}}],[\"early\",{\"1\":{\"51\":1}}],[\"each\",{\"1\":{\"21\":4,\"24\":1,\"32\":2,\"41\":1,\"44\":1,\"47\":1,\"85\":1,\"103\":1,\"116\":1,\"160\":1,\"165\":1,\"207\":1,\"216\":1}}],[\"ellipsis\",{\"1\":{\"80\":1}}],[\"elements\",{\"0\":{\"123\":1,\"126\":1,\"127\":1,\"130\":1,\"132\":1,\"133\":1,\"135\":1,\"136\":1,\"193\":1},\"1\":{\"44\":1,\"47\":1,\"92\":1,\"122\":1,\"132\":1,\"134\":1,\"137\":2,\"145\":1,\"150\":1,\"151\":3,\"160\":3,\"165\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1}}],[\"element\",{\"0\":{\"125\":1,\"130\":1,\"134\":1,\"141\":1,\"142\":1,\"143\":1},\"1\":{\"41\":2,\"44\":2,\"47\":2,\"54\":1,\"108\":2,\"116\":1,\"125\":1,\"126\":1,\"130\":7,\"132\":3,\"138\":2,\"139\":4,\"143\":2,\"154\":2}}],[\"elected\",{\"1\":{\"22\":1}}],[\"elder\",{\"1\":{\"32\":4}}],[\"else\",{\"1\":{\"31\":1,\"68\":2,\"207\":1}}],[\"elif\",{\"1\":{\"31\":1,\"68\":2}}],[\"exactly\",{\"1\":{\"208\":1,\"209\":2,\"210\":1,\"211\":1}}],[\"exam\",{\"1\":{\"21\":2}}],[\"example\",{\"0\":{\"21\":1,\"40\":1,\"43\":1,\"46\":1,\"50\":1,\"53\":1,\"56\":1},\"1\":{\"44\":1,\"47\":1,\"51\":1,\"54\":2,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"109\":2,\"129\":1,\"139\":1,\"160\":1,\"167\":1,\"171\":1,\"208\":1,\"210\":1,\"211\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"examples\",{\"0\":{\"19\":1,\"38\":1},\"1\":{\"63\":1,\"115\":1}}],[\"exist\",{\"1\":{\"170\":1,\"171\":3,\"191\":1,\"198\":1}}],[\"existing\",{\"1\":{\"164\":1}}],[\"exists\",{\"0\":{\"141\":1},\"1\":{\"171\":1,\"172\":1}}],[\"extend\",{\"1\":{\"135\":1}}],[\"extended\",{\"1\":{\"1\":1}}],[\"extracting\",{\"0\":{\"125\":1},\"1\":{\"170\":1,\"175\":1}}],[\"extraction\",{\"0\":{\"170\":1},\"1\":{\"80\":1,\"175\":1}}],[\"extract\",{\"1\":{\"79\":1,\"165\":1}}],[\"extra\",{\"1\":{\"48\":1}}],[\"exercise\",{\"1\":{\"67\":1}}],[\"exercises\",{\"0\":{\"32\":1}}],[\"execution\",{\"1\":{\"41\":1,\"44\":1,\"47\":1,\"208\":1,\"209\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"exclusive\",{\"1\":{\"32\":2}}],[\"excluding\",{\"1\":{\"1\":1}}],[\"exchange\",{\"1\":{\"32\":1}}],[\"except\",{\"1\":{\"31\":1}}],[\"experience\",{\"1\":{\"215\":1}}],[\"exp\",{\"1\":{\"198\":2}}],[\"explicitly\",{\"1\":{\"103\":1}}],[\"exploring\",{\"0\":{\"23\":1}}],[\"exponentiation\",{\"1\":{\"61\":1}}],[\"expression\",{\"0\":{\"199\":1},\"1\":{\"22\":3,\"167\":1}}],[\"expand\",{\"1\":{\"21\":1}}],[\"enclose\",{\"1\":{\"151\":1}}],[\"encountered\",{\"1\":{\"96\":1}}],[\"encapsulate\",{\"1\":{\"73\":1}}],[\"entire\",{\"1\":{\"82\":1,\"83\":1,\"134\":1,\"137\":1}}],[\"entered\",{\"1\":{\"41\":1,\"73\":1}}],[\"enter\",{\"1\":{\"31\":1,\"113\":2,\"115\":1,\"129\":2,\"164\":2,\"208\":2,\"209\":2,\"210\":2,\"211\":2,\"213\":2,\"214\":2,\"216\":6}}],[\"enough\",{\"1\":{\"48\":2}}],[\"en\",{\"1\":{\"32\":1}}],[\"english\",{\"1\":{\"31\":1,\"67\":1,\"92\":1,\"122\":1,\"176\":1}}],[\"engineering\",{\"0\":{\"219\":1,\"221\":1},\"1\":{\"0\":1}}],[\"envelope\",{\"1\":{\"21\":3}}],[\"ends\",{\"1\":{\"87\":1,\"96\":2}}],[\"endswith\",{\"0\":{\"87\":1},\"1\":{\"87\":2}}],[\"end=\",{\"1\":{\"27\":1,\"110\":1}}],[\"ending\",{\"0\":{\"26\":1}}],[\"end\",{\"0\":{\"26\":1,\"27\":1},\"1\":{\"1\":1,\"77\":3,\"78\":3,\"79\":2,\"110\":1,\"126\":2,\"130\":1,\"215\":1}}],[\"etc\",{\"1\":{\"207\":2}}],[\"et\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map

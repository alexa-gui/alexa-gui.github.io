import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as u,c as r,b as o,w as a,d as i,e as s,a as n}from"./app--kPdamV4.js";const d="/assets/image-20231218093224921--FCZrLKE.png",k="/assets/image-20231218095008709-cnGeUbVN.png",v="/assets/image-20231221214402328-mrqZd7r1.png",m="/assets/image-20231221214427299-UueSs9hO.png",b="/assets/image-20231228220912772-5AoEno32.png",g="/assets/image-20231228221150020-vAqbDp9h.png",h={},y=i('<h2 id="_1-definition-of-strings" tabindex="-1"><a class="header-anchor" href="#_1-definition-of-strings" aria-hidden="true">#</a> 1. Definition of Strings</h2><p>A string is a sequence composed of letters, numbers, and special characters.</p><figure><img src="'+d+`" alt="image-20231222232933858" tabindex="0" loading="lazy"><figcaption>image-20231222232933858</figcaption></figure><h2 id="_2-creating-strings" tabindex="-1"><a class="header-anchor" href="#_2-creating-strings" aria-hidden="true">#</a> 2. Creating Strings</h2><p>— Using <strong><span style="color:orange;">single quotes, double quotes</span>, or <span style="color:orange;">triple quotes</span></strong>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;alexa&quot;</span>
number <span class="token operator">=</span> <span class="token string">&#39;18&#39;</span>
paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;Hello, I&#39;m Alexa
&#39;&#39;&#39;</span>
para <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;Hello Alexa
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Mixing single and double quotes, so you may need to accept different types of quotes, otherwise, you cannot fully encapsulate the string content.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;I&#39;</span>m Alexa <span class="token comment"># wrong</span>
string <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Alexa&quot;</span> <span class="token comment"># correct</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>What about triple quotes?</p><p>Let&#39;s say we need to store the following text in Python code:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>We sometimes need to <span class="token keyword">not</span> only look at the answers within the options but also think about the answers outside the options<span class="token punctuation">.</span> — AI Yuechuang

Shallow ones see shallow<span class="token punctuation">,</span> deep ones see deep<span class="token punctuation">.</span> — Huang Jiabao

The earliest risers are idealists<span class="token punctuation">,</span> the fastest runners are scammers<span class="token punctuation">,</span> <span class="token keyword">and</span> the bravest are adventurers who are afraid of missing everything <span class="token keyword">and</span> rushing <span class="token keyword">in</span> are leeks<span class="token punctuation">.</span> And the real success<span class="token punctuation">,</span> may <span class="token keyword">not</span> have entered yet<span class="token punctuation">.</span>

Implement the function first<span class="token punctuation">,</span> then optimize<span class="token punctuation">,</span> otherwise<span class="token punctuation">,</span> everything will be chaotic<span class="token punctuation">.</span> — AI Yuechuang

Anything you can<span class="token string">&#39;t write clearly is something you haven&#39;</span>t really understood<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How do we implement this in Python code as a string?</p>`,12),f=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("string "),n("span",{class:"token operator"},"="),s(' "We sometimes need to '),n("span",{class:"token keyword"},"not"),s(" only look at the answers within the options but also think about the answers outside the options"),n("span",{class:"token punctuation"},"."),s(` — AI Yuechuang

Shallow ones see shallow`),n("span",{class:"token punctuation"},","),s(" deep ones see deep"),n("span",{class:"token punctuation"},"."),s(` — Huang Jiabao

The earliest risers are idealists`),n("span",{class:"token punctuation"},","),s(" the fastest runners are scammers"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"and"),s(" the bravest are adventurers who are afraid of missing everything "),n("span",{class:"token keyword"},"and"),s(" rushing "),n("span",{class:"token keyword"},"in"),s(" are leeks"),n("span",{class:"token punctuation"},"."),s(" And the real success"),n("span",{class:"token punctuation"},","),s(" may "),n("span",{class:"token keyword"},"not"),s(" have entered yet"),n("span",{class:"token punctuation"},"."),s(`

Implement the function first`),n("span",{class:"token punctuation"},","),s(" then optimize"),n("span",{class:"token punctuation"},","),s(" otherwise"),n("span",{class:"token punctuation"},","),s(" everything will be chaotic"),n("span",{class:"token punctuation"},"."),s(` — AI Yuechuang

Anything you can`),n("span",{class:"token string"},"'t write clearly is something you haven'"),s(`t really understood"
`),n("span",{class:"token comment"},"# This way, only the first line content will be encapsulated"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("string "),n("span",{class:"token operator"},"="),s(' "We sometimes need to '),n("span",{class:"token keyword"},"not"),s(" only look at the answers within the options but also think about the answers outside the options"),n("span",{class:"token punctuation"},"."),s(` — AI Yuechuang\\

Shallow ones see shallow`),n("span",{class:"token punctuation"},","),s(" deep ones see deep"),n("span",{class:"token punctuation"},"."),s(` — Huang Jiabao\\

The earliest risers are idealists`),n("span",{class:"token punctuation"},","),s(" the fastest runners are scammers"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"and"),s(" the bravest are adventurers who are afraid of missing everything "),n("span",{class:"token keyword"},"and"),s(" rushing "),n("span",{class:"token keyword"},"in"),s(" are leeks"),n("span",{class:"token punctuation"},"."),s(" And the real success"),n("span",{class:"token punctuation"},","),s(" may "),n("span",{class:"token keyword"},"not"),s(" have entered yet"),n("span",{class:"token punctuation"},"."),s(`\\

Implement the function first`),n("span",{class:"token punctuation"},","),s(" then optimize"),n("span",{class:"token punctuation"},","),s(" otherwise"),n("span",{class:"token punctuation"},","),s(" everything will be chaotic"),n("span",{class:"token punctuation"},"."),s(` — AI Yuechuang\\

Anything you can`),n("span",{class:"token string"},"'t write clearly is something you haven'"),s(`t really understood"
`),n("span",{class:"token comment"},"# Output"),s(`
We sometimes need to `),n("span",{class:"token keyword"},"not"),s(" only look at the answers within the options but also think about the answers outside the options"),n("span",{class:"token punctuation"},"."),s(" — AI YuechuangShallow ones see shallow"),n("span",{class:"token punctuation"},","),s(" deep ones see deep"),n("span",{class:"token punctuation"},"."),s(" — Huang JiabaoThe earliest risers are idealists"),n("span",{class:"token punctuation"},","),s(" the fastest runners are scammers"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"and"),s(" the bravest are adventurers who are afraid of missing everything "),n("span",{class:"token keyword"},"and"),s(" rushing "),n("span",{class:"token keyword"},"in"),s(" are leeks"),n("span",{class:"token punctuation"},"."),s(" And the real success"),n("span",{class:"token punctuation"},","),s(" may "),n("span",{class:"token keyword"},"not"),s(" have entered yet"),n("span",{class:"token punctuation"},"."),s("Implement the function first"),n("span",{class:"token punctuation"},","),s(" then optimize"),n("span",{class:"token punctuation"},","),s(" otherwise"),n("span",{class:"token punctuation"},","),s(" everything will be chaotic"),n("span",{class:"token punctuation"},"."),s(" — AI YuechuangAnything you can"),n("span",{class:"token string"},"'t write clearly is something you haven'"),s(`t really understood
`),n("span",{class:"token comment"},"# Adding a backslash can encapsulate it, but it cannot break the line, so triple quotes are needed."),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("string "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token triple-quoted-string string"},`"""We sometimes need to not only look at the answers within the options but also think about the answers outside the options. — AI Yuechuang

Shallow ones see shallow, deep ones see deep. — Huang Jiabao

The earliest risers are idealists, the fastest runners are scammers, and the bravest are adventurers who are afraid of missing everything and rushing in are leeks. And the real success, may not have entered yet.

Implement the function first, then optimize, otherwise, everything will be chaotic. — AI Yuechuang

Anything you can't write clearly is something you haven't really understood"""`),s(`
`),n("span",{class:"token comment"},"# Implement the original output"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=i('<p>Triple quotes can also be used for comments</p><figure><img src="'+k+`" alt="image-20231222233001673" tabindex="0" loading="lazy"><figcaption>image-20231222233001673</figcaption></figure><h2 id="_3-string-length" tabindex="-1"><a class="header-anchor" href="#_3-string-length" aria-hidden="true">#</a> 3. String Length</h2><p>Use <code>len()</code>: Returns the length or number of characters in the string, starting from one, including spaces.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>para <span class="token operator">=</span> <span class="token string">&quot;Hello, alexa&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token number">12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-getting-characters-from-a-string" tabindex="-1"><a class="header-anchor" href="#_4-getting-characters-from-a-string" aria-hidden="true">#</a> 4. Getting Characters from a String</h2><h3 id="_4-1-getting-a-single-character" tabindex="-1"><a class="header-anchor" href="#_4-1-getting-a-single-character" aria-hidden="true">#</a> 4.1 Getting a Single Character</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>para <span class="token operator">=</span> <span class="token string">&quot;Hello, alexa&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>para<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># Selecting the 3rd character</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>para<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># Selecting the 1st character</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>para<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Selecting the last character</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>para<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Selecting the last character</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-getting-a-range-of-characters" tabindex="-1"><a class="header-anchor" href="#_4-2-getting-a-range-of-characters" aria-hidden="true">#</a> 4.2 Getting a Range of Characters</h3><p>Use slicing interval (left-closed right-open) <code>string[start: end]</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;Syntax: string = &quot;bornforthis&quot;
select = string[start: end]
PS: Remember to +1 for end&quot;&quot;&quot;</span>

para <span class="token operator">=</span> <span class="token string">&quot;Hello, alexa&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>para<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Selecting the 3rd to the 6th character (not including the 7th)</span>
<span class="token comment"># Output</span>
llo<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-getting-multiple-discontinuous-characters" tabindex="-1"><a class="header-anchor" href="#_4-3-getting-multiple-discontinuous-characters" aria-hidden="true">#</a> 4.3 Getting Multiple Discontinuous Characters</h3><p>Use slicing interval <code>string[start: end: sep]</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
Syntax: string = &quot;0123456789&quot;
select = string[start: end: sep] *sep= how many steps to the next number*
PS: Remember to +1 for end
&quot;&quot;&quot;</span>
string <span class="token operator">=</span> <span class="token string">&quot;0123456789&quot;</span>
<span class="token comment"># Get characters 02468</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
<span class="token comment"># Get characters 13579</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;bornforthis&quot;</span>
<span class="token comment"># Get characters ofts</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-optimization" tabindex="-1"><a class="header-anchor" href="#_4-4-optimization" aria-hidden="true">#</a> 4.4 Optimization</h3><p>If we want to extract characters from the beginning to the end, we can omit the start and/or end, leaving them blank.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;0123456789&quot;</span>
<span class="token comment"># Get characters 02468</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span>

 <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
<span class="token comment"># Get characters 13579</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-string-reversal" tabindex="-1"><a class="header-anchor" href="#_4-5-string-reversal" aria-hidden="true">#</a> 4.5 String Reversal</h3><p>The third position of the string controls the direction of character extraction. The default is 1 for positive, and if we change it to -1, it will be reversed.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Positive and negative control direction, number size controls step size.</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;bornforthis&quot;</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>

<span class="token comment"># Output</span>
sihtrofnrob
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What does the ellipsis omit?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>

<span class="token comment"># Output</span>
No result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use a positive index, starting from 0, going to -1 has no value, not satisfied.</p><figure><img src="`+v+`" alt="image-20231222233023698" tabindex="0" loading="lazy"><figcaption>image-20231222233023698</figcaption></figure><p>If you directly use a positive index to swap positions, the last one is 0, and it will be omitted:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>

<span class="token comment"># Output</span>
sihtrofnro <span class="token comment"># Missing &quot;b&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So it should be reversed from -1 to the last one:</p><figure><img src="`+m+`" alt="image-20231222233037523" tabindex="0" loading="lazy"><figcaption>image-20231222233037523</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Get rofn</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-string-built-in-methods" tabindex="-1"><a class="header-anchor" href="#_5-string-built-in-methods" aria-hidden="true">#</a> 5. String Built-in Methods</h2><h3 id="_5-1-upper" tabindex="-1"><a class="header-anchor" href="#_5-1-upper" aria-hidden="true">#</a> 5.1 .upper()</h3><p>Converts the entire string to uppercase.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
BORNFORTHIS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-lower" tabindex="-1"><a class="header-anchor" href="#_5-2-lower" aria-hidden="true">#</a> 5.2 .lower()</h3><p>Converts the entire string to lowercase.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
bornforthis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-capitalize" tabindex="-1"><a class="header-anchor" href="#_5-3-capitalize" aria-hidden="true">#</a> 5.3 .capitalize()</h3><p>Capitalizes the first letter of the string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
Bornforthis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-title" tabindex="-1"><a class="header-anchor" href="#_5-4-title" aria-hidden="true">#</a> 5.4 .title()</h3><p>Capitalizes the first letter of each word, creating a title format.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS to-aiyc&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
Bornforthis To<span class="token operator">-</span>Aiyc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-startswith" tabindex="-1"><a class="header-anchor" href="#_5-5-startswith" aria-hidden="true">#</a> 5.5 .startswith()</h3><p>Checks if the string starts with a specific content, returns True or False.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS to-aiyc&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token boolean">False</span>

string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS to-aiyc&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;BO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-endswith" tabindex="-1"><a class="header-anchor" href="#_5-6-endswith" aria-hidden="true">#</a> 5.6 .endswith()</h3><p>Checks if the string ends with a specific character or word, returns a boolean value.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS to-aiyc&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;BO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Output</span>
<span class="token boolean">False</span>

string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS to-aiyc&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;yc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Output</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-7-count" tabindex="-1"><a class="header-anchor" href="#_5-7-count" aria-hidden="true">#</a> 5.7 .count()</h3><p>Counts the number of times a specific character or word appears in the target string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS to-aiyc bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Output</span>
<span class="token number">2</span> <span class="token comment"># Case-sensitive</span>

string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS for-aiyc bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;for&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Output</span>
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-8-find" tabindex="-1"><a class="header-anchor" href="#_5-8-find" aria-hidden="true">#</a> 5.8 .find()</h3><p>Finds the index of the first occurrence of a specific character or word in the string. If searching for a word, <code>find()</code> returns the index of the first character of the target word. If the character or word is not found, it returns -1.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS for-aiyc bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;for&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token number">12</span> <span class="token comment"># Returns the index of the first occurrence</span>

string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS for-aiyc bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token number">2</span>

string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS for-aiyc bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;k&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-9-index" tabindex="-1"><a class="header-anchor" href="#_5-9-index" aria-hidden="true">#</a> 5.9 .index()</h3><p>Finds the index of the first occurrence of a specific character or word in the string. If searching for a word, <code>index()</code> returns the index of the first character of the target word. If the character or word is not found, it raises an error.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;BORNFORTHIS for-aiyc bornforthis&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&quot;k&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
ValueError<span class="token punctuation">:</span> substring <span class="token keyword">not</span> found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-10-isdigit" tabindex="-1"><a class="header-anchor" href="#_5-10-isdigit" aria-hidden="true">#</a> 5.10 .isdigit()</h3><p>Checks if the string is a pure numeric string. Returns False if any character in the string is not a number.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;01234567&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token boolean">True</span>

string <span class="token operator">=</span> <span class="token string">&quot;01234567o&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-11-isalpha" tabindex="-1"><a class="header-anchor" href="#_5-11-isalpha" aria-hidden="true">#</a> 5.11 .isalpha()</h3><p>Checks if the string is a pure alphabetical string. Returns False if any character in the string is not a letter.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;abcdefg&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token boolean">True</span>

string <span class="token operator">=</span> <span class="token string">&quot;abcdefg0&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Output</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sure, here is the translation of the provided Markdown content to English:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">##</span> 5.12 .isalnum()</span>

Checks whether the string consists of alphanumeric characters only. Returns False if the string contains any non-alphanumeric elements.

\`\`\`python
string = &quot;abcdefg0&quot;
print(string.isalnum())

<span class="token title important"><span class="token punctuation">#</span> output</span>
True

string = &quot;abcdefg0!&quot;
print(string.isalnum())

<span class="token title important"><span class="token punctuation">#</span> output</span>
False
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-13-isupper" tabindex="-1"><a class="header-anchor" href="#_5-13-isupper" aria-hidden="true">#</a> 5.13 .isupper()</h2><p>Checks if all the letters in the string are uppercase. Returns True if all uppercase, otherwise False.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;abcdefg0!&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-14-islower" tabindex="-1"><a class="header-anchor" href="#_5-14-islower" aria-hidden="true">#</a> 5.14 .islower()</h2><p>Checks if all the letters in the string are lowercase. Returns True if all lowercase, otherwise False.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;abcdefg0!&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-15-isspace" tabindex="-1"><a class="header-anchor" href="#_5-15-isspace" aria-hidden="true">#</a> 5.15 .isspace()</h2><p>Checks if the string consists of only whitespace characters. Returns True for pure whitespace, otherwise False.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;abcdefg0!&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token boolean">False</span>

string <span class="token operator">=</span> <span class="token string">&quot;   &quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-16-strip" tabindex="-1"><a class="header-anchor" href="#_5-16-strip" aria-hidden="true">#</a> 5.16 .strip()</h2><p>By default, removes leading and trailing whitespace characters from the target string. If specified, it can also remove specified characters.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;   bornforthis   &quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Removes leading and trailing spaces</span>
<span class="token comment"># output</span>
bornforthis

string <span class="token operator">=</span> <span class="token string">&quot;---bornforthis---&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Removes leading and trailing hyphens</span>
<span class="token comment"># output</span>
bornforthis

string <span class="token operator">=</span> <span class="token string">&quot;--  -bornforthis-- -&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Removes consecutive hyphens only from both ends until a different character is encountered</span>
<span class="token comment"># output</span>
  <span class="token operator">-</span>bornforthis<span class="token operator">-</span><span class="token operator">-</span> 
    
string <span class="token operator">=</span> <span class="token string">&quot;--  -bornforthis-- -&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Removes all hyphens and spaces from both ends simultaneously</span>
<span class="token comment"># output</span>
bornforthis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-17-lstrip" tabindex="-1"><a class="header-anchor" href="#_5-17-lstrip" aria-hidden="true">#</a> 5.17 .lstrip()</h2><p>By default, removes leading whitespace characters from the string. If specified, it can remove specified leading characters.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;--  -bornforthis-- -&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">&quot;- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># output</span>
bornforthis<span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-18-rstrip" tabindex="-1"><a class="header-anchor" href="#_5-18-rstrip" aria-hidden="true">#</a> 5.18 .rstrip()</h2><p>By default, removes trailing whitespace characters from the string. If specified, it can remove specified trailing characters.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;--  -bornforthis-- -&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&quot;- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># output</span>
<span class="token operator">-</span><span class="token operator">-</span>  <span class="token operator">-</span>bornforthis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-19-replace" tabindex="-1"><a class="header-anchor" href="#_5-19-replace" aria-hidden="true">#</a> 5.19 .replace()</h2><p><code>.replace(old, new, count)</code> replaces occurrences of the &quot;old&quot; character with the &quot;new&quot; character. The count parameter controls the number of replacements.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;--  -bornforthis-- -&quot;</span>
string1 <span class="token operator">=</span> string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Replaces all spaces with *</span>
string2 <span class="token operator">=</span> string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># Replaces the first three hyphens with !</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> string1<span class="token punctuation">,</span> string2<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token operator">-</span><span class="token operator">-</span>  <span class="token operator">-</span>bornforthis<span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">**</span><span class="token operator">-</span>bornforthis<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>
!!  !bornforthis<span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-20-split" tabindex="-1"><a class="header-anchor" href="#_5-20-split" aria-hidden="true">#</a> 5.20 .split()</h2><p><code>.split(sep, maxsplit)</code> splits the string using a specific character, default is space. If the &quot;sep&quot; parameter is provided, it splits using that character and returns a list. The maxsplit parameter controls how many splits to perform, default is to split from the left.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;i am bornforthis bornforthis&quot;</span>
lst1 <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
lst2 <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span>
lst3 <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> lst1<span class="token punctuation">,</span> lst2<span class="token punctuation">,</span> lst3<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
i am bornforthis bornforthis
<span class="token punctuation">[</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;am&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bornforthis&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bornforthis&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;i am b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;i am b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnforthis&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-21-rsplit" tabindex="-1"><a class="header-anchor" href="#_5-21-rsplit" aria-hidden="true">#</a> 5.21 .rsplit()</h2><p><code>.rsplit(sep, maxsplit)</code> splits the string from the right, using a specific character if provided. Returns a list. The maxsplit parameter controls how many splits to perform.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;i am bornforthis bornforthis&quot;</span>
lst1 <span class="token operator">=</span> string<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token punctuation">)</span>
lst2 <span class="token operator">=</span> string<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span>
lst3 <span class="token operator">=</span> string<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> lst1<span class="token punctuation">,</span> lst2<span class="token punctuation">,</span> lst3<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
i am bornforthis bornforthis
<span class="token punctuation">[</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;am&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bornforthis&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bornforthis&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;i am b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;i am bornf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rnf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rthis&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-22-join" tabindex="-1"><a class="header-anchor" href="#_5-22-join" aria-hidden="true">#</a> 5.22 .join()</h2><p>Joins the characters of a string with a specific separator. <code>“sep”.join(string)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;i am bornforthis &quot;</span>
string_joined <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_joined<span class="token punctuation">)</span>

<span class="token comment"># output</span>
i<span class="token operator">-</span> <span class="token operator">-</span>a<span class="token operator">-</span>m<span class="token operator">-</span> <span class="token operator">-</span>b<span class="token operator">-</span>o<span class="token operator">-</span>r<span class="token operator">-</span>n<span class="token operator">-</span>f<span class="token operator">-</span>o<span class="token operator">-</span>r<span class="token operator">-</span>t<span class="token operator">-</span>h<span class="token operator">-</span>i<span class="token operator">-</span>s<span class="token operator">-</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-string-formatting" tabindex="-1"><a class="header-anchor" href="#_6-string-formatting" aria-hidden="true">#</a> 6. String Formatting</h2><p>Issue:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hi Bornforthis,Welcome to XiaMen.&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
Hi Bornforthis<span class="token punctuation">,</span>Welcome to XiaMen<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The problem is that each time we want to change a name or location, we need to create a new string.</li><li>Using string concatenation may be cumbersome, especially for more complex strings.</li><li>Another issue is that different data types cannot be directly concatenated in Python, unless explicitly converted to strings:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is &quot;</span> <span class="token operator">+</span> <span class="token number">190</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    string <span class="token operator">=</span> <span class="token string">&quot;Money is &quot;</span> <span class="token operator">+</span> <span class="token number">190</span>
TypeError<span class="token punctuation">:</span> can only concatenate <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span> to <span class="token builtin">str</span>


string <span class="token operator">=</span> <span class="token string">&quot;Money is &quot;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token comment"># ---output---</span>
Money <span class="token keyword">is</span> <span class="token number">190</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-format" tabindex="-1"><a class="header-anchor" href="#_6-1-format" aria-hidden="true">#</a> 6.1 .format()</h3><ol><li>Single curly braces <code>{}</code>: Three methods</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hi {}, welcome to XiaMen.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

template_string <span class="token operator">=</span> <span class="token string">&quot;Hi {}, welcome to XiaMen.&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

new_string <span class="token operator">=</span> template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Multiple curly braces above &quot;filled in order&quot;</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hi {}, welcome to {}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XiaMen&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

template_string <span class="token operator">=</span> <span class="token string">&quot;Hi {}, welcome to {}.&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XiaMen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

new_string <span class="token operator">=</span> template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XiaMen&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Multiple curly braces specifying positions &quot;index specified&quot;</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hi {1}, welcome to {0}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Hi {1}, welcome to {0}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;XiaMen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 0th position input:XiaMen, 1st position input:Alexa</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

template_string <span class="token operator">=</span> <span class="token string">&quot;Hi {1}, welcome to {0}.&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Shanghai&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

new_string <span class="token operator">=</span> template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Shenzhen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Hi <span class="token number">1</span><span class="token punctuation">,</span> welcome to <span class="token number">0.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to Shanghai<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to Shenzhen<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Parameter specification</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hi {name}, welcome to {city}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&quot;city&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Hi {name}, welcome to {city}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&quot;XiaMen&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

template_string <span class="token operator">=</span> <span class="token string">&quot;Hi {name}, welcome to {city}.&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&quot;Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

new_string <span class="token operator">=</span> template_string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Alexa&quot;</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&quot;Shenzhen&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Hi name<span class="token punctuation">,</span> welcome to city<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to Shanghai<span class="token punctuation">.</span>
Hi Alexa<span class="token punctuation">,</span> welcome to Shenzhen<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Preserve specified decimal places: <code>{:.xf}</code> preserves x decimal places</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is {:.3f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">)</span>  <span class="token comment"># .3f preserves three decimal places</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Money <span class="token keyword">is</span> <span class="token number">190.000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-f" tabindex="-1"><a class="header-anchor" href="#_6-2-f" aria-hidden="true">#</a> 6.2 f</h3><ol><li>Directly read variables (variables must be created in advance)</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;Alexa&quot;</span>
city <span class="token operator">=</span> <span class="token string">&quot;XiaMen&quot;</span>
string <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;Hi </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, welcome to </span><span class="token interpolation"><span class="token punctuation">{</span>city<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token comment"># Variables must be created before using f</span>

<span class="token comment"># output</span>
Hi Alexa<span class="token punctuation">,</span> welcome to XiaMen<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Preserve decimal places <code>{variable: .xf}</code> keeps variable to x decimal places</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>money <span class="token operator">=</span> <span class="token number">190</span>
string <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;Money is </span><span class="token interpolation"><span class="token punctuation">{</span>money<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Money <span class="token keyword">is</span> <span class="token number">190.000</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-formatting" tabindex="-1"><a class="header-anchor" href="#_6-3-formatting" aria-hidden="true">#</a> 6.3 % formatting</h3><ul><li><code>%d</code>: Integer</li><li><code>%s</code>: String</li><li><code>%f</code>: Float</li></ul><ol><li>Single position input (three methods: use % + number to input; d/s/f controls input type)</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is %d&quot;</span>
new_s <span class="token operator">=</span> string <span class="token operator">%</span> <span class="token number">13</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string <span class="token operator">%</span> <span class="token number">19</span><span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %d&quot;</span> <span class="token operator">%</span> <span class="token number">190</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Money <span class="token keyword">is</span> <span class="token number">13</span> 
Money <span class="token keyword">is</span> <span class="token number">18</span> 
Money <span class="token keyword">is</span> <span class="token number">190</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Multiple position input: % must be followed by parentheses</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is %d %s&quot;</span>
new_s <span class="token operator">=</span> string <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&quot;发大财&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;暴富&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %d %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token string">&quot;666&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Money <span class="token keyword">is</span> <span class="token number">13</span> 发大财
Money <span class="token keyword">is</span> <span class="token number">18</span> 暴富
Money <span class="token keyword">is</span> <span class="token number">190</span> <span class="token number">666</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Preserve decimal places: %.xf</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is %.3f&quot;</span>
new_s <span class="token operator">=</span> string <span class="token operator">%</span> <span class="token number">13</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string <span class="token operator">%</span> <span class="token number">18</span><span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %.3f&quot;</span> <span class="token operator">%</span> <span class="token number">190</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Money <span class="token keyword">is</span> <span class="token number">13.000</span>
Money <span class="token keyword">is</span> <span class="token number">18.000</span>
Money <span class="token keyword">is</span> <span class="token number">190.000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-f-and-format-advantages-and-disadvantages" tabindex="-1"><a class="header-anchor" href="#_6-4-f-and-format-advantages-and-disadvantages" aria-hidden="true">#</a> 6.4 f and format, % advantages and disadvantages</h3><p>format and % are like templates, and once the template is created, it can be used directly when needed; while f is like a bank teller, registering while asking, and cannot create a template in advance.</p><h2 id="_7-immutability-of-strings" tabindex="-1"><a class="header-anchor" href="#_7-immutability-of-strings" aria-hidden="true">#</a> 7. Immutability of Strings</h2><p>Strings are immutable, and no element can be changed in the string. If you want to change an element in the string, a new string needs to be created.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;hello bornforthis&quot;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>

<span class="token comment"># ---output---</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;str&#39;</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to using replace, you can also use string concatenation</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hello, Alexa!&quot;</span>
new_string <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># using slicing</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_string<span class="token punctuation">)</span>

<span class="token comment"># output</span>
aello<span class="token punctuation">,</span> Alexa!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-string-escaping" tabindex="-1"><a class="header-anchor" href="#_8-string-escaping" aria-hidden="true">#</a> 8. String Escaping</h2><table><thead><tr><th>Escape Character</th><th>Meaning</th><th>Example</th></tr></thead><tbody><tr><td><code>\\\\</code></td><td>Backslash symbol, to get <code>\\</code></td><td><code>s = &quot;bor\\\\nforthis&quot;</code></td></tr><tr><td><code>\\b</code></td><td>Backspace, similar to the delete key</td><td><code>s = &quot;bornff\\borthis&quot;</code></td></tr><tr><td><code>\\n</code></td><td>Newline</td><td><code>s = &quot;bornfor\\nthis&quot;</code></td></tr><tr><td><code>\\t</code></td><td>Tab</td><td><code>s = &quot;born\\tfor\\tthis&quot;</code></td></tr><tr><td><code>r</code></td><td>Cancel escaping &quot;R and r&quot; both work</td><td><code>s = r&quot;born\\tfor\\tthis&quot;</code></td></tr></tbody></table><p>Example code:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;bor\\\\nforthis&quot;</span>
<span class="token comment"># Originally using \\n would cause the string to break, but if you want to output \\n, you need to add another \\ in front of \\</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token comment"># output</span>
bor\\nforthis

s <span class="token operator">=</span> <span class="token string">&quot;bornff\\borthis&quot;</span>
<span class="token comment"># \\b deletes the previous character f</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token comment"># output</span>
bornforthis

s <span class="token operator">=</span> <span class="token string">&quot;bornfor\\nthis&quot;</span>
<span class="token comment"># \\n newline</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token comment"># output</span>
bornfor
this

s <span class="token operator">=</span> &quot;born\\t

<span class="token keyword">for</span>\\tthis&quot;
<span class="token comment"># \\t tab</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token comment"># output</span>
born    <span class="token keyword">for</span>    this

s <span class="token operator">=</span> <span class="token string">r&quot;born\\tfor\\tthis&quot;</span>
<span class="token comment"># You can also use r to cancel escaping</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token comment"># output</span>
born\\tfor\\tthis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-string-concatenation" tabindex="-1"><a class="header-anchor" href="#_9-string-concatenation" aria-hidden="true">#</a> 9 String Concatenation</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;born&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;forthis&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span>  <span class="token comment"># Forms a single string</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment"># Still two independent strings</span>

<span class="token comment"># ---output---</span>
bornforthis
born forthis


s1 <span class="token operator">=</span> <span class="token string">&#39;*-love-&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
<span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>love<span class="token operator">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I want to add an * at the end of the output above. What should I do?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-reading-user-input" tabindex="-1"><a class="header-anchor" href="#_10-reading-user-input" aria-hidden="true">#</a> 10. Reading User Input</h2><h3 id="_10-1-input-basic-usage" tabindex="-1"><a class="header-anchor" href="#_10-1-input-basic-usage" aria-hidden="true">#</a> 10.1 input() Basic Usage</h3><p>Use <code>input()</code> to get user input</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span>

<span class="token comment"># output</span>
alexa <span class="token comment"># self input</span>
alexa <span class="token comment"># print</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2-input-input-prompt" tabindex="-1"><a class="header-anchor" href="#_10-2-input-input-prompt" aria-hidden="true">#</a> 10.2 input() Input Prompt</h3><p>But the above code has a small problem: it is not very intuitive to know during runtime that the program needs our input, especially for non-programmer users.</p><figure><img src="`+b+`" alt="image-20231231074522629" tabindex="0" loading="lazy"><figcaption>image-20231231074522629</figcaption></figure><p>How to solve it? - Use input prompt.</p><p><code>input()</code> function supports writing a string for prompting.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your name:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;user input name:&quot;</span><span class="token punctuation">,</span> user_input<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Enter your name<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alexa
user <span class="token builtin">input</span> name<span class="token punctuation">:</span>  alexa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="image-20231231074540136" tabindex="0" loading="lazy"><figcaption>image-20231231074540136</figcaption></figure><h3 id="_10-3-input-characteristics" tabindex="-1"><a class="header-anchor" href="#_10-3-input-characteristics" aria-hidden="true">#</a> 10.3 input() Characteristics</h3><h4 id="_10-3-1-input-type-is-string-str" tabindex="-1"><a class="header-anchor" href="#_10-3-1-input-type-is-string-str" aria-hidden="true">#</a> 10.3.1 input() Type is String &quot;str&quot;</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;i:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
i<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;i:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
i<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;i:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
i<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>From the above code examples, we can see that the data type obtained by <code>input()</code> is always <strong>string</strong>.</p><p>Knowing the characteristics of <code>input()</code>, how to solve this problem? - How can users directly enter the original type and get the original type.</p><h4 id="_10-3-2-method-one-forced-type-conversion" tabindex="-1"><a class="header-anchor" href="#_10-3-2-method-one-forced-type-conversion" aria-hidden="true">#</a> 10.3.2 Method One: Forced Type Conversion</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">12</span>

In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">int</span>

In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># There are some issues</span>

In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s  <span class="token comment"># Gets each element separately</span>
Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">list</span>

In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token boolean">True</span>

In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b
Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>

In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Suitable for: numbers, strings, booleans</li><li>Not suitable for: lists, tuples, dictionaries, sets</li></ul><h4 id="_10-3-3-method-two-use-eval" tabindex="-1"><a class="header-anchor" href="#_10-3-3-method-two-use-eval" aria-hidden="true">#</a> 10.3.3 Method Two: Use eval()</h4><ol><li>Wonderful use of eval()</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">12</span>

In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>

In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token boolean">True</span>

In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>

In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Problems with eval()</li></ol><p>The code above seems to solve our problem, but it comes with issues that need attention.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>string
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
NameError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>
Cell In<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> line <span class="token number">1</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

File <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token number">1</span>

NameError<span class="token punctuation">:</span> name <span class="token string">&#39;string&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s analyze the &quot;magic&quot; of <code>eval()</code>:</p><ol><li>Get user input: <code>s = eval(input(&#39;:&gt;&gt;&gt;&#39;))</code></li><li>Input <code>string</code> will be obtained, and after conversion by <code>eval</code>, it becomes a variable similar to <code>string</code>. However, in our previous code, we did not create a variable named <code>string</code>.</li><li>Therefore, an error is raised. The error is quite obvious: <code>NameError: name &#39;string&#39; is not defined</code>.</li><li>The solution is straightforward: either create a variable named <code>string</code> before getting user input, or intentionally add single quotes, double quotes, or triple quotes around the input.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>

In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>string

In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s
Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span>

In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token number">12</span>

In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>num

In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s
Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">12</span>

In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token string">&quot;string&quot;</span>

In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s
Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Tricks with <code>eval()</code></li></ol><p>Task requirement: Get user input, calculate the sum, difference, product, and quotient of two digits.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>

In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>

In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">9</span><span class="token operator">*</span><span class="token number">8</span>
Out<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">72</span>

In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">3</span>
Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-trying-out" tabindex="-1"><a class="header-anchor" href="#_11-trying-out" aria-hidden="true">#</a> 11. Trying Out</h2><p>Get user input to display the sum of two integers.</p><p><strong>Requirements:</strong></p><ul><li>Use only one <code>input</code> function.</li><li>User input format: num1 num2</li><li>Output the calculation result.</li></ul><p><strong>Input:</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">5</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Output:</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,180),_=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("nums "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"eval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'":>>>"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("replace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" "'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"+"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"# use eval and replace"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("nums "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'":>>>"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("split"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"# split directly at the space and return a list"),s(`
`),n("span",{class:"token builtin"},"sum"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"# convert to numbers"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function O(A,T){const p=l("CodeTabs");return u(),r("div",null,[y,o(p,{id:"34",data:[{id:"Double quotes"},{id:"Double quotes + Backslash"},{id:"Triple quotes"}]},{title0:a(({value:t,isActive:e})=>[s("Double quotes")]),title1:a(({value:t,isActive:e})=>[s("Double quotes + Backslash")]),title2:a(({value:t,isActive:e})=>[s("Triple quotes")]),tab0:a(({value:t,isActive:e})=>[f]),tab1:a(({value:t,isActive:e})=>[q]),tab2:a(({value:t,isActive:e})=>[w]),_:1}),x,o(p,{id:"660",data:[{id:"Code1"},{id:"Code2"}]},{title0:a(({value:t,isActive:e})=>[s("Code1")]),title1:a(({value:t,isActive:e})=>[s("Code2")]),tab0:a(({value:t,isActive:e})=>[_]),tab1:a(({value:t,isActive:e})=>[I]),_:1})])}const M=c(h,[["render",O],["__file","04-string.html.vue"]]);export{M as default};

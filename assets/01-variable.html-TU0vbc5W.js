import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as r,c as u,b as o,w as a,d as l,e as s,a as n}from"./app-KiXwN5gg.js";const d={},k=l('<h2 id="_1-理解变量——生活中的例子" tabindex="-1"><a class="header-anchor" href="#_1-理解变量——生活中的例子" aria-hidden="true">#</a> 1. 理解变量——生活中的例子</h2><h3 id="_1-1-从字面意思去理解" tabindex="-1"><a class="header-anchor" href="#_1-1-从字面意思去理解" aria-hidden="true">#</a> 1.1 从字面意思去理解</h3><ul><li>变：变化</li><li>量：大小</li></ul><h3 id="_1-2-举个例子🌰" tabindex="-1"><a class="header-anchor" href="#_1-2-举个例子🌰" aria-hidden="true">#</a> 1.2 举个例子🌰</h3><p>假如，你是班级当中的课代表，每个月需要统计班级中每个学生的月考成绩。月考成绩会每个月一张纸，每张纸上都会依次记录每个学生的成绩越到成绩，例如：</p><ol><li>李雷 98分</li><li>马冬梅 89分</li><li>刘奕彤 96分</li><li>......</li></ol><p>某一天，老师要看刘奕彤 1月、2月、3月的成绩，这个时候作为课代表的你需要怎么办。——总不能直接把每个月的月考成绩单直接给老师，显然是不合适的。</p><p>我们应该把刘奕彤 1月、2月、3月的成绩抄写到单独的一张纸上，接着给老师。</p><p>那么，我们为什么不一开始直接为每一个学生分配一个信封呢？（也可以是档案袋）信封在一开始是扁的，当我们放东西（数据）进去之后，是不是鼓起来了？——是不是变化了？是不是有大小了呢？显然是的。</p><p>那么信封，是不是在我们当前所处的空间当中开辟空间，来存放数据并且说这是信封。</p><p>类似的有：冰箱，不也是在我们当前所处的空间中，开辟空间。</p><p>——所以，<strong><span style="color:orange;">变量不就是在计算机的内存当中开辟空间，来存储数据。</span></strong></p><p><strong>特点：</strong> 变量的值会被覆盖，只会记着最后一个值。</p><h2 id="_2-如何创建变量——赋值语句" tabindex="-1"><a class="header-anchor" href="#_2-如何创建变量——赋值语句" aria-hidden="true">#</a> 2. 如何创建变量——赋值语句</h2><ol><li><strong>变量：通过变量名代表或引用某个值。</strong></li></ol><ul><li>女娲捏了泥人，泥人没有生命，女娲挥了挥手柳条，赋予给泥人生命。此时，泥人可以代表说是女娲的后人。「变量：泥人，值：女娲」</li><li>全国人民代表大会，中的人大代表，是由广大人民群众投票选举出来的。他们的权利不是自己获取的，所以他们可以说：我代表的是广大人民群众的意志。「变量：人大代表，值：人民群众」</li></ul><ol start="2"><li>初始化赋值语句: <strong>变量名 = 表达式</strong></li></ol><ul><li>变量名：就是这个空间，我们叫它什么名字；</li><li>表达式：类似数学表达；</li></ul><p>程序的运行逻辑：<strong>从上到下，从右到左，最后才是赋值。</strong></p>',19),m=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s("  "),n("span",{class:"token comment"},"# 1 赋值给了 x，x 代表1"),s(`
x `),n("span",{class:"token operator"},"="),s(" x "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"10"),s("  "),n("span",{class:"token comment"},"# x + 10 等价于 1 + 10 最后得出 11，11 赋值给 x"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"# print 打印、输出"),s(`
`),n("span",{class:"token comment"},"# 井号是用来注释、注解，解释某一行代码的功能或者作用"),s(`

`),n("span",{class:"token comment"},"# ---output---"),s(`
`),n("span",{class:"token number"},"11"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("name1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"lilei"'),s(`
name2 `),n("span",{class:"token operator"},"="),s(` name1
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("name2"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# 覆盖"),s(`
name1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"lilei"'),s(`
name1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"hanmeimei"'),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("name1"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# ---output---"),s(`
lilei
hanmeimei
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=l(`<h2 id="_3-探究-print" tabindex="-1"><a class="header-anchor" href="#_3-探究-print" aria-hidden="true">#</a> 3. 探究 print</h2><h3 id="_3-1-同时输出多个数据" tabindex="-1"><a class="header-anchor" href="#_3-1-同时输出多个数据" aria-hidden="true">#</a> 3.1 同时输出多个数据</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出的结果可以看出，print 同时输出多个变量，每个值之间默认以空格间隔。</p><p>那么，我们可以修改这个默认空格间隔么？——答案显然是可以的。</p><p>使用 sep。</p><h3 id="_3-2-sep-修改多个变量同时输出的间隔" tabindex="-1"><a class="header-anchor" href="#_3-2-sep-修改多个变量同时输出的间隔" aria-hidden="true">#</a> 3.2 sep 修改多个变量同时输出的间隔</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39; 间隔 &#39;</span><span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
<span class="token number">1</span> 间隔 <span class="token number">2</span> 间隔 <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-end-修改-print-输出结尾方式" tabindex="-1"><a class="header-anchor" href="#_3-3-end-修改-print-输出结尾方式" aria-hidden="true">#</a> 3.3 end 修改 print 输出结尾方式</h3>`,9),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
b `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
c `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# ---output---"),s(`
`),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
b `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
c `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},"'\\n\\n\\n'"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"# 多换行几个，\\n 是换行的意思"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# ---output---"),s(`
`),n("span",{class:"token number"},"1"),s(`


`),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
b `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
c `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'" Hugo is hugo "'),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"# 我们可以修改成不换行的字符串"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"# 这行的输出就会紧接着上面输出的结尾输出"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# ---output---"),s(`
`),n("span",{class:"token number"},"1"),s(" Hugo "),n("span",{class:"token keyword"},"is"),s(" hugo "),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=l(`<h3 id="_3-4-end-和-sep-可以同时使用" tabindex="-1"><a class="header-anchor" href="#_3-4-end-和-sep-可以同时使用" aria-hidden="true">#</a> 3.4 end 和 sep 可以同时使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">1</span>
c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;~&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; love Python&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
<span class="token number">1</span><span class="token operator">~</span><span class="token number">1</span><span class="token operator">~</span><span class="token number">1</span> love Python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-进阶的赋值方法" tabindex="-1"><a class="header-anchor" href="#_4-进阶的赋值方法" aria-hidden="true">#</a> 4. 进阶的赋值方法</h2><h3 id="_4-1-多个变量同时赋予相同的值" tabindex="-1"><a class="header-anchor" href="#_4-1-多个变量同时赋予相同的值" aria-hidden="true">#</a> 4.1 多个变量同时赋予相同的值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
<span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-多个变量同时赋予不同的值" tabindex="-1"><a class="header-anchor" href="#_4-2-多个变量同时赋予不同的值" aria-hidden="true">#</a> 4.2 多个变量同时赋予不同的值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>

<span class="token comment"># ---output---</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div style="text-align:center;"></div><h2 id="_5-变量的命名规则" tabindex="-1"><a class="header-anchor" href="#_5-变量的命名规则" aria-hidden="true">#</a> 5. 变量的命名规则</h2><ul><li>大小写英文、数字和 <code>_</code> 的结合，且不能用数字开头；</li><li>系统关键词不能做变量名使用「获取关键词列表：<code>help(&#39;keywords&#39;)</code></li><li>Python 中的变量名区分大小写；</li><li>变量名不能包含空格，但是可以使用下划线来分隔其中的单词；</li><li>不要使用 Python 的内置函数名称做变量；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Here <span class="token keyword">is</span> a <span class="token builtin">list</span> of the Python keywords<span class="token punctuation">.</span>  Enter <span class="token builtin">any</span> keyword to get more <span class="token builtin">help</span><span class="token punctuation">.</span>

<span class="token boolean">False</span>               <span class="token keyword">class</span>               <span class="token class-name">from</span>                <span class="token keyword">or</span>
<span class="token boolean">None</span>                <span class="token keyword">continue</span>            <span class="token keyword">global</span>              <span class="token keyword">pass</span>
<span class="token boolean">True</span>                <span class="token keyword">def</span>                 <span class="token keyword">if</span>                  <span class="token keyword">raise</span>
<span class="token keyword">and</span>                 <span class="token keyword">del</span>                 <span class="token keyword">import</span>              <span class="token keyword">return</span>
<span class="token keyword">as</span>                  <span class="token keyword">elif</span>                <span class="token keyword">in</span>                  <span class="token keyword">try</span>
<span class="token keyword">assert</span>              <span class="token keyword">else</span>                <span class="token keyword">is</span>                  <span class="token keyword">while</span>
<span class="token keyword">async</span>               <span class="token keyword">except</span>              <span class="token keyword">lambda</span>              <span class="token keyword">with</span>
<span class="token keyword">await</span>               <span class="token keyword">finally</span>             <span class="token keyword">nonlocal</span>            <span class="token keyword">yield</span>
<span class="token keyword">break</span>               <span class="token keyword">for</span>                 <span class="token keyword">not</span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),_=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("n "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"A"'),s(`
N `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"a"'),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"# 如果变量不区分大小写的话，输出什么结果？—— a"),s(`
`),n("span",{class:"token comment"},"# 但是，它区分大小写，所以输出的是 A"),s(`

`),n("span",{class:"token comment"},"# out"),s(`
A
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# 数字不能开头"),s(`
a121iy212c21 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"a"'),s("  "),n("span",{class:"token comment"},"# 数字不能开头，除了开头。你想放哪就放哪。"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("user_name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"aiyc"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"print"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"aiyc"'),s("  "),n("span",{class:"token comment"},"# 不能使用 Python 内置函数名命名"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"# python 分不清"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# 关键词不能当作变量名"),s(`
`),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"aiyc"'),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"await"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"# await 在 Python 当中有特殊功能，比如 while"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=l('<h2 id="_6-练习" tabindex="-1"><a class="header-anchor" href="#_6-练习" aria-hidden="true">#</a> 6. 练习</h2><ol><li><p>在 Python 中，变量名可以以数字开始。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>在 Python 中，以下哪个变量名是有效的？</p><ul><li>[ ] 2myVar</li><li>[x] myVar2</li><li>[ ] my-var</li><li>[ ] my var</li></ul></li><li><p>在Python中，变量名区分大小写。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>在Python中，<code>my_var</code> 和 <code>myVar</code> 是同一个变量。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>变量名可以是 Python 中的关键字。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p><code>None</code> 是Python中的特殊类型，表示没有值或空值。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>在Python中，以下哪个是有效的变量赋值？</p><ul><li>[ ] 123abc = &quot;hello&quot;</li><li>[ ] for = &quot;world&quot;</li><li>[x] _hidden = &quot;secret&quot;</li><li>[ ] import = 123</li></ul></li><li><p>在Python中，一个变量可以同时被赋予多个值。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>在Python中，以下哪个是多变量赋值？</p><ul><li>[x] a, b, c = 1, 2, 3</li><li>[ ] a = 1, b = 2, c = 3</li><li>[ ] a; b; c = 1; 2; 3</li><li>[ ] a = 1; b = 2; c = 3;</li></ul></li><li><p>变量在使用之前必须被赋值。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>Python中变量的类型是静态的，一旦赋值就不能改变。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>在Python中，以下哪个表示全局变量？</p><ul><li>[ ] var = &quot;hello&quot;</li><li>[ ] global var ✅</li><li>[x] var(global) ❌</li><li>[ ] def var():</li></ul></li><li><p>以下哪个表示删除变量？</p><ul><li>[ ] delete x</li><li>[ ] del x ✅</li><li>[x] remove x ❌</li><li>[ ] destroy x</li></ul></li><li><p><code>x = 5</code> 之后 <code>y = x</code>，现在改变 <code>y</code> 的值，<code>x</code> 的值也会改变。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p><code>x = [1, 2, 3]</code> 之后 <code>y = x</code>，现在改变 <code>y</code> 的列表内容，<code>x</code> 的内容也会改变。</p><ul><li>[ ] 对 ✅</li><li>[x] 错 ❌</li></ul></li><li><p>在Python中，变量只能存储基本数据类型的值，如整数或字符串。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>交换果汁</p></li></ol><p>假如你有两个小孩，哥哥叫：Austin，弟弟叫：Jaden。</p><p>Austin 想喝<strong>果汁</strong>，Jaden 想喝<strong>可乐</strong>。<strong>哥哥和弟弟都有专属的杯子，不喜欢用对方的杯子。</strong></p><p>家中仅剩一杯果汁、一杯可乐，你不小心把哥哥的杯子装了可乐，弟弟的杯子装了果汁。</p><p><strong>问：如何交换哥哥与弟弟杯中的果汁？</strong></p><div class="hint-container info"><p class="hint-container-title">zh</p><p>Suppose you have two children, the elder brother is named Austin, and the younger brother is named Jaden. Austin wants to drink juice, and Jaden wants to drink cola. Both brothers have their own exclusive cups and don&#39;t like to use each other&#39;s cups. There is only one cup of juice and one cup of cola left at home, and you accidentally filled the elder brother&#39;s cup with cola and the younger brother&#39;s cup with juice. How can you swap the juice in the brothers&#39; cups?</p></div>',7),C=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("Austin "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Coke"'),s("  "),n("span",{class:"token comment"},"# 该赋值可以理解为倒果汁的过程"),s(`
Jaden `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"juice"'),s("  "),n("span",{class:"token comment"},"# 该赋值可以理解为倒果汁的过程"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Austin"'),n("span",{class:"token punctuation"},","),s(" Austin"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Jaden"'),n("span",{class:"token punctuation"},","),s(" Jaden"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"# 待补充代码"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Austin"'),n("span",{class:"token punctuation"},","),s(" Austin"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Jaden"'),n("span",{class:"token punctuation"},","),s(" Jaden"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-tips line-numbers-mode","data-ext":"tips"},[n("pre",{class:"language-tips"},[n("code",null,`两种方法思路：

方法一： 联想现实生活，现实生活中你会如何解决？

> 现实生活中，我想你会引入一个空杯子来操作，那你会如何操作？思考后再思考代码中如何实现？

方法二： Python 多个变量赋予不同值。
a, b, c = 1, 2, 3
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("Austin "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Coke"'),s(`
Jaden `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"juice"'),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Austin"'),n("span",{class:"token punctuation"},","),s(" Austin"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Jaden"'),n("span",{class:"token punctuation"},","),s(" Jaden"),n("span",{class:"token punctuation"},")"),s(`
Empty_cup `),n("span",{class:"token operator"},"="),s(` Austin
Austin `),n("span",{class:"token operator"},"="),s(` Jaden
Jaden `),n("span",{class:"token operator"},"="),s(` Empty_cup
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"-"'),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"12"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Austin"'),n("span",{class:"token punctuation"},","),s(" Austin"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Jaden"'),n("span",{class:"token punctuation"},","),s(" Jaden"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("Austin "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Coke"'),s(`
Jaden `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"juice"'),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Austin"'),n("span",{class:"token punctuation"},","),s(" Austin"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Jaden"'),n("span",{class:"token punctuation"},","),s(" Jaden"),n("span",{class:"token punctuation"},")"),s(`
Austin`),n("span",{class:"token punctuation"},","),s(" Jaden "),n("span",{class:"token operator"},"="),s(" Jaden"),n("span",{class:"token punctuation"},","),s(` Austin
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"-"'),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"12"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Austin"'),n("span",{class:"token punctuation"},","),s(" Austin"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Jaden"'),n("span",{class:"token punctuation"},","),s(" Jaden"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=l(`<div class="hint-container caution"><p class="hint-container-title">警告！！！</p><details class="hint-container details"><summary>不要出现如下方法！！！</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Austin <span class="token operator">=</span> <span class="token string">&quot;Coke&quot;</span>
Jaden <span class="token operator">=</span> <span class="token string">&quot;juice&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Austin&quot;</span><span class="token punctuation">,</span> Austin<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Jaden&quot;</span><span class="token punctuation">,</span> Jaden<span class="token punctuation">)</span>
<span class="token comment"># 待补充代码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Austin&quot;</span><span class="token punctuation">,</span> Jaden<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Jaden&quot;</span><span class="token punctuation">,</span> Austin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div><ol start="18"><li><p>创建变量并输出</p></li><li><p>输出效果：</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Austin Jaden Alex Cava
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>输出效果如下：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Austin$Jaden$Alex$Cava<span class="token operator">%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function T(B,E){const i=c("CodeTabs");return r(),u("div",null,[k,o(i,{id:"111",data:[{id:"demo1"},{id:"demo2"}]},{title0:a(({value:e,isActive:t})=>[s("demo1")]),title1:a(({value:e,isActive:t})=>[s("demo2")]),tab0:a(({value:e,isActive:t})=>[m]),tab1:a(({value:e,isActive:t})=>[v]),_:1}),b,o(i,{id:"142",data:[{id:"原本"},{id:"修改结尾 end 1"},{id:"修改 end 2"}]},{title0:a(({value:e,isActive:t})=>[s("原本")]),title1:a(({value:e,isActive:t})=>[s("修改结尾 end 1")]),title2:a(({value:e,isActive:t})=>[s("修改 end 2")]),tab0:a(({value:e,isActive:t})=>[h]),tab1:a(({value:e,isActive:t})=>[y]),tab2:a(({value:e,isActive:t})=>[g]),_:1}),w,o(i,{id:"201",data:[{id:"Code1"},{id:"Code2"},{id:"Code3"},{id:"Code4"},{id:"Code5"}]},{title0:a(({value:e,isActive:t})=>[s("Code1")]),title1:a(({value:e,isActive:t})=>[s("Code2")]),title2:a(({value:e,isActive:t})=>[s("Code3")]),title3:a(({value:e,isActive:t})=>[s("Code4")]),title4:a(({value:e,isActive:t})=>[s("Code5")]),tab0:a(({value:e,isActive:t})=>[_]),tab1:a(({value:e,isActive:t})=>[x]),tab2:a(({value:e,isActive:t})=>[A]),tab3:a(({value:e,isActive:t})=>[f]),tab4:a(({value:e,isActive:t})=>[J]),_:1}),q,o(i,{id:"567",data:[{id:"样例代码"},{id:"提示"},{id:"answer１"},{id:"answer2"}]},{title0:a(({value:e,isActive:t})=>[s("样例代码")]),title1:a(({value:e,isActive:t})=>[s("提示")]),title2:a(({value:e,isActive:t})=>[s("answer１")]),title3:a(({value:e,isActive:t})=>[s("answer2")]),tab0:a(({value:e,isActive:t})=>[C]),tab1:a(({value:e,isActive:t})=>[P]),tab2:a(({value:e,isActive:t})=>[j]),tab3:a(({value:e,isActive:t})=>[V]),_:1}),N])}const S=p(d,[["render",T],["__file","01-variable.html.vue"]]);export{S as default};

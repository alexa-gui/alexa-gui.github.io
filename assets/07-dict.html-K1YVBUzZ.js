import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as u,c as r,b as c,w as a,a as n,d as p,e as s}from"./app--kPdamV4.js";const k="/assets/image-20240207072239841-wz34MEuo.png",d="/assets/image-20240207072309359-XfF0hnha.png",m="/assets/image-20240207072337892-qWMFtu38.png",v="/assets/image-20240207072410098-fdxaTPJe.png",g={},b=p(`<h2 id="_1-how-to-create-a-phone-book" tabindex="-1"><a class="header-anchor" href="#_1-how-to-create-a-phone-book" aria-hidden="true">#</a> 1. How to Create a Phone Book</h2><p>Suppose we have the following contacts:</p><table><thead><tr><th>Name</th><th>Phone Number</th></tr></thead><tbody><tr><td>李雷</td><td>123456</td></tr><tr><td>韩梅梅</td><td>132456</td></tr><tr><td>大卫</td><td>154389</td></tr><tr><td>Mr.Liu</td><td>131452</td></tr><tr><td>Bornforthis</td><td>180595</td></tr><tr><td>Alexa</td><td>131559</td></tr></tbody></table><p>How to build a phone book with user input search functionality using the knowledge we&#39;ve learned so far.</p><blockquote><p>Variables, numeric types, lists, tuples, strings.</p></blockquote><p>Program output:</p><ul><li>Test 1:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Enter your search name<span class="token punctuation">:</span> 李雷
The 李雷 phone number <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Test 2:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Enter your search name<span class="token punctuation">:</span> Bornforthis
The Bornforthis phone number <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">180595</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,10),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("contacts "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'李雷'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"123456"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'韩梅梅'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"132456"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'大卫'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"154389"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Mr. Liu'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"131452"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Bornforthis'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"180595"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Alexa'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"131559"),n("span",{class:"token punctuation"},"]"),s(`
name `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Enter your search name:>>> '"),n("span",{class:"token punctuation"},")"),s(`
name_index `),n("span",{class:"token operator"},"="),s(" contacts"),n("span",{class:"token punctuation"},"."),s("index"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-interpolation"},[n("span",{class:"token string"},'f"'),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("name"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},"'s phone number is "),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("contacts"),n("span",{class:"token punctuation"},"["),s("name_index"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("contacts_name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'李雷'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'韩梅梅'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'大卫'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Mr. Liu'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Bornforthis'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Alexa'"),n("span",{class:"token punctuation"},"]"),s(`
contacts_number `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"123456"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"132456"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"154389"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"131452"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"180595"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"131559"),n("span",{class:"token punctuation"},"]"),s(`
contacts `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"zip"),n("span",{class:"token punctuation"},"("),s("contacts_name"),n("span",{class:"token punctuation"},","),s(" contacts_number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
name `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Enter your search name:>>> '"),n("span",{class:"token punctuation"},")"),s(`
name_index `),n("span",{class:"token operator"},"="),s(" contacts_name"),n("span",{class:"token punctuation"},"."),s("index"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-interpolation"},[n("span",{class:"token string"},'f"'),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("name"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},"'s phone number is "),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("contacts"),n("span",{class:"token punctuation"},"["),s("name_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-interpolation"},[n("span",{class:"token string"},'f"'),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("name"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},"'s phone number is "),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("contacts_number"),n("span",{class:"token punctuation"},"["),s("name_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=p(`<p>The above problem should help understand two points:</p><ol><li>How to use existing knowledge to complete new tasks, as it&#39;s impossible to include all the data types needed for various requirements.</li><li>The significance of dictionaries, which should be understood after completing the above question.</li></ol><h2 id="_2-dictionary-structure" tabindex="-1"><a class="header-anchor" href="#_2-dictionary-structure" aria-hidden="true">#</a> 2. Dictionary Structure</h2><ul><li>Represented by <strong><span style="color:orange;">curly braces</span></strong>.</li><li>Each item in the dictionary consists of two elements: <strong><span style="color:orange;">key and value</span></strong>. <ul><li><code>{key: value, key: value}</code></li></ul></li><li>Items are separated by <strong><span style="color:orange;">commas</span></strong>.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>phone_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">3456</span><span class="token punctuation">,</span> <span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">:</span> <span class="token number">1123</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>phone_numbers<span class="token punctuation">[</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Extract a value using a key</span>

<span class="token comment"># output</span>
<span class="token number">1234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-dictionary-key-value" tabindex="-1"><a class="header-anchor" href="#_3-dictionary-key-value" aria-hidden="true">#</a> 3. Dictionary Key &amp; Value</h2><ul><li>Keys and values are one-to-one, with a single key corresponding to a single value.</li><li>Key types are immutable; str.</li><li>Value types can be anything.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>phone_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">3456</span><span class="token punctuation">,</span> <span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">:</span> <span class="token number">1123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token string">&#39;bool&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>phone_numbers<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">3456</span><span class="token punctuation">,</span> <span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">:</span> <span class="token number">1123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token string">&#39;bool&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If a list is used as a key, it will result in an error.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>phone_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3456</span><span class="token punctuation">,</span> <span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">:</span> <span class="token number">1123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token string">&#39;bool&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>phone_numbers<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;/Users/gaxa/Coder/Pythonfile/data_type.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    phone_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3456</span><span class="token punctuation">,</span> <span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">:</span> <span class="token number">1123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token string">&#39;bool&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">}</span>
                    <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span>
TypeError<span class="token punctuation">:</span> unhashable <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-creating-a-dictionary-using-the-dict-function" tabindex="-1"><a class="header-anchor" href="#_4-creating-a-dictionary-using-the-dict-function" aria-hidden="true">#</a> 4. Creating a Dictionary Using the <code>dict()</code> Function</h2><ul><li>Method 1: Creating a dictionary based on other sequences.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
list_to_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token comment"># Convert tuples to a dictionary</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_to_dict<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Method 2: Creating a dictionary based on keyword arguments.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>lilei<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">,</span> hanmeimei<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">What are the advantages and disadvantages of the two methods above?</p><p>For method one, it is more adaptable to various data types in dictionaries. Why? Because the structure is a list containing tuples, and in a tuple, the 0th position is the key, and the 1st position is the value. Therefore, as long as it is an immutable data type, it can be placed in the 0th position.</p><p>In contrast, for method two, the first position must be a &quot;variable,&quot; and it cannot be another data type. For example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>lilei<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">,</span> hanmeimei<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>  <span class="token comment"># Looks normal, lilei is a variable</span>
d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token string">&#39;lilei&#39;</span><span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">,</span> &#39;hanme

imei<span class="token string">&#39;=99)  # How does this look? &#39;</span>lilei&#39; <span class="token keyword">is</span> a value
  File <span class="token string">&quot;/Users/gaxa/Coder/Pythonfile/data_type.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span>
    d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token string">&#39;lilei&#39;</span><span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">,</span> hanmeimei<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">)</span>
             <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span>
SyntaxError<span class="token punctuation">:</span> expression cannot contain assignment<span class="token punctuation">,</span> perhaps you meant <span class="token string">&quot;==&quot;</span>?
<span class="token comment"># Value cannot be assigned to another value; values can only be compared using ==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the second method, it may look strange. There are two values, &#39;lilei&#39; and 98, both are values. Can 98 be assigned to another value? Obviously not. Our assignment requires assigning one value to a variable &quot;with space.&quot;</p><p>Therefore, while the second method can create a dictionary, it does not fully support various cases of dictionary keys.</p><p>When outputting, the keys in the second method will only be strings.</p></div><h2 id="_5-accessing-dictionary-data" tabindex="-1"><a class="header-anchor" href="#_5-accessing-dictionary-data" aria-hidden="true">#</a> 5. Accessing Dictionary Data</h2><h3 id="_5-1-using-square-brackets" tabindex="-1"><a class="header-anchor" href="#_5-1-using-square-brackets" aria-hidden="true">#</a> 5.1 Using Square Brackets</h3><ul><li>Use square brackets along with the key to access the value.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">[</span><span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-issue-with-the-above-extraction-method" tabindex="-1"><a class="header-anchor" href="#_5-2-issue-with-the-above-extraction-method" aria-hidden="true">#</a> 5.2 Issue with the Above Extraction Method</h3><p>An issue arises when extracting a key that doesn&#39;t exist.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">[</span><span class="token string">&#39;ma&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;/Users/gaxa/Coder/Pythonfile/data_type.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">[</span><span class="token string">&#39;ma&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span>
KeyError<span class="token punctuation">:</span> <span class="token string">&#39;ma&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similar to searching for a contact in a phone book, it returns &quot;not found.”</p><figure><img src="`+k+`" alt="image-20240207072239841" tabindex="0" loading="lazy"><figcaption>image-20240207072239841</figcaption></figure><h3 id="_5-3-using-get-to-solve" tabindex="-1"><a class="header-anchor" href="#_5-3-using-get-to-solve" aria-hidden="true">#</a> 5.3 Using <code>.get()</code> to Solve</h3><p>When using the <code>get</code> method, provide a key, and the method will return the associated value. If the key does not exist, the <code>get</code> method will return <code>None</code>, or you can specify a default value if the key is not found.</p><p>The basic syntax for the <code>get</code> method is:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>value <span class="token operator">=</span> dictionary<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> default_value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>key</code>: The key you want to retrieve.</li><li><code>default_value</code>: (Optional) The value to return if the key is not found. If not provided, the default is <code>None</code>.</li></ul><p>Here is an example using the <code>get</code> method:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;lilei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;ma&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Returns None if key doesn&#39;t exist</span>
<span class="token comment"># If you want to specify a custom return value when the key is not found</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;ma&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Not specified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token number">98</span>
<span class="token boolean">None</span>
Not specified
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the first <code>get</code> call, we accessed the key <code>&#39;name&#39;</code>, which exists in the dictionary, so it returned the corresponding value <code>98</code>. In the second call, we tried to access the key <code>&#39;ma&#39;</code>, which doesn&#39;t exist in the dictionary, so it returned the default value <code>&#39;Not Specified&#39;</code> that we specified.</p><h2 id="_6-updating-dictionary-data" tabindex="-1"><a class="header-anchor" href="#_6-updating-dictionary-data" aria-hidden="true">#</a> 6. Updating Dictionary Data</h2><p>Principle for modifying or adding data to a dictionary: If it exists, modify it; if not, add it diligently.</p><figure><img src="`+d+`" alt="image-20240207072309359" tabindex="0" loading="lazy"><figcaption>image-20240207072309359</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
grade<span class="token punctuation">[</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span>
grade<span class="token punctuation">[</span><span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">&#39;hanmeimei&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">&#39;madongmei&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-deleting-dictionary-data" tabindex="-1"><a class="header-anchor" href="#_7-deleting-dictionary-data" aria-hidden="true">#</a> 7. Deleting Dictionary Data</h2><figure><img src="`+m+`" alt="image-20240207072337892" tabindex="0" loading="lazy"><figcaption>image-20240207072337892</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>
<span class="token keyword">del</span> grade<span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> grade  <span class="token comment"># the variable would be deleted hence not able to print</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;/Users/gaxa/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/c6f75b68835a096ebee7933989e7770c/Message/MessageTemp/4b975e58c46c58ce379c1852275bb5cf/File/python.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>
          <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span>
NameError<span class="token punctuation">:</span> name <span class="token string">&#39;grade&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-dictionary-structure-nesting-dictionaries" tabindex="-1"><a class="header-anchor" href="#_8-dictionary-structure-nesting-dictionaries" aria-hidden="true">#</a> 8. Dictionary Structure: Nesting Dictionaries</h2><p>Nesting involves storing a series of dictionaries in a list or storing a list as a value in a dictionary.</p><ul><li>Dictionary in a List</li><li>Storing a List in a Dictionary</li><li>Storing a Dictionary in a Dictionary</li></ul><h3 id="_8-1-dictionary-in-a-list" tabindex="-1"><a class="header-anchor" href="#_8-1-dictionary-in-a-list" aria-hidden="true">#</a> 8.1 Dictionary in a List</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">}</span>
student2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span>
student3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">}</span>
students <span class="token operator">=</span> <span class="token punctuation">[</span>student1<span class="token punctuation">,</span> student2<span class="token punctuation">,</span> student3<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;grade&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;grade&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),f={class:"hint-container tip"},_=n("p",{class:"hint-container-title"},"Try extracting the score of Han Meimei by retrieving the `students` variable.",-1),w=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("students"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'grade'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("students"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s("get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'grade'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),T=n("p",null,[s("Square brackets and "),n("code",null,"get"),s(" are chosen based on whether the data is certain. If it is certain, prefer using square brackets for extraction; otherwise, use "),n("code",null,"get"),s(".")],-1),A=p(`<h3 id="_8-2-storing-a-list-in-a-dictionary" tabindex="-1"><a class="header-anchor" href="#_8-2-storing-a-list-in-a-dictionary" aria-hidden="true">#</a> 8.2 Storing a List in a Dictionary</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>favorite_class <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;A&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;english&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;B&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;chinese&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;computer science&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;physics&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;math&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>favorite_class<span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># output</span>
math
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-storing-a-dictionary-in-a-dictionary" tabindex="-1"><a class="header-anchor" href="#_8-3-storing-a-dictionary-in-a-dictionary" aria-hidden="true">#</a> 8.3 Storing a Dictionary in a Dictionary</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
student2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
student3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
class1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">:</span> student1<span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">:</span> student2<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">:</span>

 student3<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>class1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>class1<span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;实验班&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-common-dictionary-methods" tabindex="-1"><a class="header-anchor" href="#_9-common-dictionary-methods" aria-hidden="true">#</a> 9. Common Dictionary Methods</h2><h3 id="_9-1-pop-key" tabindex="-1"><a class="header-anchor" href="#_9-1-pop-key" aria-hidden="true">#</a> 9.1 <code>.pop(key)</code></h3><p>Delete a specific key-value pair.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
student1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&quot;实验班&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grade&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-keys" tabindex="-1"><a class="header-anchor" href="#_9-2-keys" aria-hidden="true">#</a> 9.2 <code>.keys()</code></h3><p>Get all keys in the dictionary.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
keys <span class="token operator">=</span> student1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grade&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;实验班&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grade&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;实验班&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-values" tabindex="-1"><a class="header-anchor" href="#_9-3-values" aria-hidden="true">#</a> 9.3 <code>.values()</code></h3><p>Get all values in the dictionary.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
values <span class="token operator">=</span> student1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-items" tabindex="-1"><a class="header-anchor" href="#_9-4-items" aria-hidden="true">#</a> 9.4 <code>.items()</code></h3><p>Get key-value pairs in the dictionary as tuples.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
values <span class="token operator">=</span> student1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;grade&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;实验班&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;grade&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;实验班&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-5-in" tabindex="-1"><a class="header-anchor" href="#_9-5-in" aria-hidden="true">#</a> 9.5 <code>in</code></h3><ol><li>By default, it checks if the key is in the dictionary.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> student1<span class="token punctuation">)</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Use <code>.keys()</code> for pure key checking.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> student1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Use <code>.values()</code> for pure value checking.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">&quot;实验班&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> student1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="image-20240207072410098" tabindex="0" loading="lazy"><figcaption>image-20240207072410098</figcaption></figure>',25);function C(D,B){const o=l("CodeTabs");return u(),r("div",null,[b,c(o,{id:"95",data:[{id:"method 1"},{id:"method 2"}]},{title0:a(({value:t,isActive:e})=>[s("method 1")]),title1:a(({value:t,isActive:e})=>[s("method 2")]),tab0:a(({value:t,isActive:e})=>[h]),tab1:a(({value:t,isActive:e})=>[y]),_:1}),q,n("div",f,[_,c(o,{id:"315",data:[{id:"Code1"},{id:"Code2"}]},{title0:a(({value:t,isActive:e})=>[s("Code1")]),title1:a(({value:t,isActive:e})=>[s("Code2")]),tab0:a(({value:t,isActive:e})=>[w]),tab1:a(({value:t,isActive:e})=>[x]),_:1}),T]),A])}const E=i(g,[["render",C],["__file","07-dict.html.vue"]]);export{E as default};

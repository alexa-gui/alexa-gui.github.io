import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as i,c as u,b as r,w as a,d as t,e as s,a as n}from"./app--kPdamV4.js";const k="/assets/image-20231217084933264-gBTYTqlQ.png",d="/assets/image-20231217084933264-gBTYTqlQ.png",m={},h=t('<h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data Types</h2><figure><img src="'+k+`" alt="image-20231222204535588" tabindex="0" loading="lazy"><figcaption>image-20231222204535588</figcaption></figure><h2 id="_1-numeric-types-int-float" tabindex="-1"><a class="header-anchor" href="#_1-numeric-types-int-float" aria-hidden="true">#</a> 1. Numeric Types [int, float]</h2><h3 id="_1-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_1-1-code-examples" aria-hidden="true">#</a> 1.1 Code Examples</h3><ol><li><p>Integer</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>int_num <span class="token operator">=</span> <span class="token number">1</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>  <span class="token comment"># check data type</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token number">1</span>
<span class="token builtin">int</span> num <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Float</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>float_num <span class="token operator">=</span> <span class="token number">1.5</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span>  <span class="token comment"># check data type</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;float num type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token number">1.5</span>
<span class="token builtin">float</span> num <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2-strings-str" tabindex="-1"><a class="header-anchor" href="#_2-strings-str" aria-hidden="true">#</a> 2. Strings [str]</h2><h3 id="_2-1-code-example" tabindex="-1"><a class="header-anchor" href="#_2-1-code-example" aria-hidden="true">#</a> 2.1 Code Example</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hello Alexa&quot;</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
Hello Alexa
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-three-characteristics-of-strings" tabindex="-1"><a class="header-anchor" href="#_2-2-three-characteristics-of-strings" aria-hidden="true">#</a> 2.2 Three Characteristics of Strings</h3><ol><li>Orderliness <ol><li>From left to right, index starts from 0</li><li>From right to left, index starts from -1</li><li>Anything inside quotes is considered an index</li></ol></li><li>Immutability <ol><li>Strings cannot be changed after creation</li><li>Note: Immutability means that during the execution of the code, strings cannot be modified, added, or deleted</li></ol></li><li>Any Character <ol><li>Any character that can be entered from the keyboard can be an element of a string</li><li>Characters placed in a string become the type of the string, with each element referred to as a &quot;subcharacter&quot;</li></ol></li></ol><h2 id="_3-lists-list" tabindex="-1"><a class="header-anchor" href="#_3-lists-list" aria-hidden="true">#</a> 3. Lists [list]</h2><h3 id="_3-1-code-example" tabindex="-1"><a class="header-anchor" href="#_3-1-code-example" aria-hidden="true">#</a> 3.1 Code Example</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello Alexa&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">[</span><span class="token string">&#39;Hello Alexa&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-three-characteristics-of-lists" tabindex="-1"><a class="header-anchor" href="#_3-2-three-characteristics-of-lists" aria-hidden="true">#</a> 3.2 Three Characteristics of Lists</h3><ol><li>Orderliness <ol><li>From left to right, index starts from 0</li><li>From right to left, index starts from -1</li><li>Each element in the list is counted <ol><li>For example: <code>lst = [&quot;alexa&quot;, 12]</code></li><li>In the above list, there are two elements with indices: <ol><li><code>&quot;alexa&quot;</code>, from left to right 0, from right to left -1</li><li><code>12</code>, from left to right 1, from right to left -1</li></ol></li></ol></li></ol></li><li>Mutability: During the program&#39;s execution, lists can be &quot;added, changed, deleted&quot;</li><li>Any Data Type: Any data type in Python can be an element of a list</li></ol><details class="hint-container details"><summary>All Data Types Owned by Python &quot;Only Include Basic Data Types&quot;</summary><figure><img src="`+d+`" alt="image-20231222204547540" tabindex="0" loading="lazy"><figcaption>image-20231222204547540</figcaption></figure></details><h2 id="_4-tuples-tuple" tabindex="-1"><a class="header-anchor" href="#_4-tuples-tuple" aria-hidden="true">#</a> 4. Tuples [tuple]</h2><h3 id="_4-1-code-example" tabindex="-1"><a class="header-anchor" href="#_4-1-code-example" aria-hidden="true">#</a> 4.1 Code Example</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello Alexa&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token string">&#39;Hello Alexa&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-three-characteristics-of-tuples" tabindex="-1"><a class="header-anchor" href="#_4-2-three-characteristics-of-tuples" aria-hidden="true">#</a> 4.2 Three Characteristics of Tuples</h3><ol><li>Orderliness <ol><li>From left to right, index starts from 0</li><li>From right to left, index starts from -1</li><li>Each element in the tuple is counted <ol><li>For example: <code>tup = (“alexa”, 12)</code></li><li>In the above tuple, there are two elements with indices: <ol><li><code>“alexa”</code>, from left to right 0, from right to left -1</li><li><code>12</code>, from left to right 1, from right to left -1</li></ol></li></ol></li></ol></li><li>Immutability: During the program&#39;s execution, tuples cannot be &quot;added, changed, deleted&quot;</li><li>Any Data Type: Any data type in Python can be an element of a tuple</li></ol><h3 id="_4-3-tuple-vs-list" tabindex="-1"><a class="header-anchor" href="#_4-3-tuple-vs-list" aria-hidden="true">#</a> 4.3 Tuple vs List</h3><div class="hint-container info"><p class="hint-container-title">Why Choose a Tuple After Having a List?</p></div><ol><li>If the stored data or quantity is variable, such as a log function on a social platform that tracks which posts a user has viewed in a week, then a list is more suitable.</li><li>If the stored data and quantity are constant, such as a system (software) that needs to return the latitude and longitude of a location and directly pass it to the user for viewing, then a tuple is definitely more suitable.</li></ol><ul><li><strong>Assumption</strong><ul><li>Assumption 1: Now there is a warehouse, and you want to add items to the warehouse. The warehouse is large, and there may or may not be space available. In this case, do we need to hire a warehouse manager so that we can directly ask the warehouse manager if there is space (is there space/ memory)? The warehouse manager will tell you, and you can directly add your items. <ul><li>The question is, why does the warehouse manager know if there is space in the warehouse? — Because the warehouse manager will track the status of the warehouse all the time.</li></ul></li><li>Assumption</li></ul></li></ul><p>2: Now there is a warehouse for atomic bombs. After the warehouse is created, only one atomic bomb can be stored. So, do we need to set up a special person to track the status of the atomic bomb warehouse? — No need, it is redundant. (Otherwise, the leader will run out of oil hahaha)</p><ul><li><strong>Why?</strong><ul><li>User logs 📔, will it always change (record 📝 which posts have been viewed)? Do we need a &quot;person&quot; similar to a warehouse manager to track and know if there is space (if there is space/ memory), and also know where to add it? — A list is more appropriate because lists are mutable. &quot;Mutable means: adding, deleting, modifying&quot; <ul><li>Why is a tuple not suitable? — Because every time you need to add data, you have to create a new tuple. (It&#39;s like: you create a warehouse for atomic bombs, it is just enough to store one, so when you want to store two, you can only create a new warehouse again.)</li></ul></li><li>Will the latitude and longitude change? Obviously not, so there is no need for an extra &quot;person&quot; to track the status. — Can a list be used? Yes, but it is unnecessary. &quot;Because we don&#39;t need a warehouse manager.&quot; Using a list is a bit wasteful of resources. The functionality of the tuple is just enough.</li></ul></li></ul><h2 id="_5-dictionary-dict" tabindex="-1"><a class="header-anchor" href="#_5-dictionary-dict" aria-hidden="true">#</a> 5. Dictionary [dict]</h2><h3 id="_5-1-code-example" tabindex="-1"><a class="header-anchor" href="#_5-1-code-example" aria-hidden="true">#</a> 5.1 Code Example</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;alexa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;tup&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;alexa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;tup&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-characteristics-of-a-dictionary" tabindex="-1"><a class="header-anchor" href="#_5-2-characteristics-of-a-dictionary" aria-hidden="true">#</a> 5.2 Characteristics of a Dictionary</h3><ol><li>Unordered (after Python 3.6+, it is ordered) <ol><li>Understand as unordered for now</li><li>Some early basics may not be needed</li></ol></li><li>Composition of a Dictionary: Composed of a series of keys and values <code>d = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;}</code></li><li>Key: <ol><li>Only immutable data types can be used as keys</li><li>For example: strings, numbers, booleans, tuples</li></ol></li><li>Value: Any data type, all data types owned by Python</li><li>Mutability: Can add, delete, and change values corresponding to keys</li></ol><h2 id="_6-set-set" tabindex="-1"><a class="header-anchor" href="#_6-set-set" aria-hidden="true">#</a> 6. Set [set]</h2><h3 id="_6-1-code-example" tabindex="-1"><a class="header-anchor" href="#_6-1-code-example" aria-hidden="true">#</a> 6.1 Code Example</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directly check data type and print:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span>
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
Directly check data <span class="token builtin">type</span> <span class="token keyword">and</span> <span class="token keyword">print</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-characteristics-of-a-set" tabindex="-1"><a class="header-anchor" href="#_6-2-characteristics-of-a-set" aria-hidden="true">#</a> 6.2 Characteristics of a Set</h3><ol><li>Unordered: Sets have no order, meaning there is no index<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>The order may change after running, and it might not be the same as the input order<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>If you run the set many times or one of the times, the order does not change, we still cannot say that the set is ordered. Why? You throw a die 500 times, and it is always 6. Can you say that throwing a die is a deterministic event? — Obviously not 🙅.</p></div></li><li>Determinism: <ol><li>Every value in a set is determined, meaning &quot;immutable data types&quot; are needed</li><li>For example: boolean, number, tuple, string</li><li>For example: Why doesn&#39;t a list work? — Lists are mutable and have indeterminacy</li></ol></li></ol>`,37),b=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("set1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1.1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),s(`
t `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"type"),n("span",{class:"token punctuation"},"("),s("set1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("set1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"string type is:>>>"'),n("span",{class:"token punctuation"},","),s(" t"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Directly check data type and print:>>>"'),n("span",{class:"token punctuation"},","),s(" t"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# output"),s(`
Traceback `),n("span",{class:"token punctuation"},"("),s("most recent call last"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
  File `),n("span",{class:"token string"},'"/Users/gaxa/Coder/Pythonfile/data_type.py"'),n("span",{class:"token punctuation"},","),s(" line "),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token operator"},"<"),s("module"),n("span",{class:"token operator"},">"),s(`
    set1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1.1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),s(`
           `),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),s(`
TypeError`),n("span",{class:"token punctuation"},":"),s(" unhashable "),n("span",{class:"token builtin"},"type"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},"'list'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=t(`<ol start="3"><li>Uniqueness: Repeating values will not cause an error, and duplicates will be automatically removed<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Mutability: You can add and delete data in a set, but you cannot modify the output. &quot;Note: It is impossible to specify the index to delete an element&quot;</li></ol><h2 id="_7-boolean-bool" tabindex="-1"><a class="header-anchor" href="#_7-boolean-bool" aria-hidden="true">#</a> 7. Boolean [bool]</h2><h3 id="_7-1-code-example" tabindex="-1"><a class="header-anchor" href="#_7-1-code-example" aria-hidden="true">#</a> 7.1 Code Example</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>condition <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token boolean">True</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;bool&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function y(v,f){const e=c("CodeTabs");return i(),u("div",null,[h,r(e,{id:"416",data:[{id:"Mutable Test"}]},{title0:a(({value:o,isActive:p})=>[s("Mutable Test")]),tab0:a(({value:o,isActive:p})=>[b]),_:1}),g])}const x=l(m,[["render",y],["__file","02-datatype.html.vue"]]);export{x as default};
